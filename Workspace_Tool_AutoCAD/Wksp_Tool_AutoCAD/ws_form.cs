using Autodesk.AutoCAD.ApplicationServices;
using Autodesk.AutoCAD.DatabaseServices;
using Autodesk.AutoCAD.EditorInput;
using Autodesk.AutoCAD.Geometry;
using Autodesk.AutoCAD.Runtime;
using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

namespace Alignment_mdi
{
    public partial class wksp_tool : System.Windows.Forms.Form
    {
        public static wksp_tool form1;
        //Global Variables
        private bool clickdragdown;
        private System.Drawing.Point lastLocation;
        System.Data.DataTable dt_cl = null;
        System.Data.DataTable dt_library = null;
        System.Data.DataTable dt_corridor = null;
        System.Data.DataTable dt_atws = null;
        System.Data.DataTable dt_prop_perm = null;
        System.Data.DataTable dt_ar = null;
        System.Data.DataTable dt_ar_side_left_p = null;
        System.Data.DataTable dt_ar_side_right_p = null;
        System.Data.DataTable dt_ar_temp = null;

        System.Data.DataTable dt_erase = null;
        string col_objid = "Object_ID";
        string col_dwg = "Drawing";
        string col_layer = "Layer";

        //System.Data.DataTable dt_manual_ar = null;
        System.Data.DataTable dt_stg = null;
        System.Data.DataTable dt_manual_stg = null;
        System.Data.DataTable dt_layers = null;

        System.Data.DataTable dt_atws_manual = null;
        System.Data.DataTable dt_manual_tws = null;

        private ContextMenuStrip ContextMenuStrip_dt_ws;
        private ContextMenuStrip ContextMenuStrip_dt_atws;
        private ContextMenuStrip ContextMenuStrip_dt_ar;
        private ContextMenuStrip ContextMenuStrip_dt_stg;
        private ContextMenuStrip ContextMenuStrip_xl;

        string mmid_column = "MMID";
        string lib_name_column = "WORKSPACE NAME";
        string wksp_atws_left_column = "ATWS LEFT";
        string wksp_tws_left_column = "TWS LEFT";
        string wksp_perm_left_column = "PERM LEFT";
        string wksp_perm_right_column = "PERM RIGHT";
        string wksp_tws_right_column = "TWS RIGHT";
        string wksp_atws_right_column = "ATWS RIGHT";

        string wksp_cl_column = "CL";
        string atws_width_column = "WIDTH";
        string atws_length_column = "LENGTH";
        string atws_justification_column = "JUSTIFICATION";
        string atws_type_column = "TYPE";
        string atws_working_side_column = "WORKING\r\nSIDE";
        string atws_area_column = "AREA\r\n[sqft]";
        string atws_handle_column = "HANDLE";
        string atws_handle0_column = "HANDLE0";
        string atws_abutter_column = "ABUTTER";
        string atws_source_column = "SOURCE";

        string ar_width_column = "WIDTH";
        string ar_length_column = "LENGTH";
        string ar_type_column = "TYPE";
        string ar_handle_column = "HANDLE";
        string ar_station_column = "STA";

        string col_pp_x = "Proposed Permanent X";
        string col_pp_y = "Proposed Permanent Y";
        string col_pp_id = "Proposed Permanent ID";
        string col_pp_offset = "Proposed Permanent Offset";
        string col_pp_justif = "Proposed Permanent Justification";
        string col_pp_start = "Proposed Permanent Start";
        string col_pp_end = "Proposed Permanent End";

        string stg_sta1_column = "Station\r\nStart";
        string stg_sta2_column = "Station\r\nEnd";
        string stg_handle_column = "HANDLE";
        string stg_area_column = "AREA\r\n[sqft]";
        string stg_justification_column = "JUSTIFICATION";

        string atws_regular = "REGULAR";
        string atws_irregular = "IRREGULAR";
        string atws_source_library = "COR";
        string atws_source_manual = "SS";

        string atws_sta1_column = "Station\r\nStart";
        string atws_sta2_column = "Station\r\nEnd";
        string atws_sta1_orig_column = "Station\r\nOriginal\r\nStart";
        string atws_sta2_orig_column = "Station\r\nOriginal\r\nEnd";
        string col_corridor_name = "Workspace Name";
        string tws_side_column = "Working\r\nSide";
        string tws_primary_column = "PrimaryWS";
        string tws_modified_column = "ATWS\r\nmodified";

        string tws_sta1_column = "Station\r\nStart";
        string tws_sta2_column = "Station\r\nEnd";

        string workspace_data = "Workspace Data";
        string workspace_library = "Workspace Library";
        string centerline_data = "Centerline Data";

        string atws_data_tab = "ATWS Data";
        string ar_data_tab = "Access Road Data";
        string stg_data_tab = "Staging Area Data";
        string atws_side1_tab = "ATWS side1";
        string atws_side2_tab = "ATWS side2";
        string cor_side_tab = "TWS side";
        string proposed_permanent_tab = "Proposed Permanent";
        string perm_poly_tab = "PermPoly";
        string tws_poly_tab = "TWSPoly";
        string design_file = "";

        string primary_workspace_name = "";

        string client1 = "";
        string project1 = "";

        static System.Data.DataTable dt_lod_left = null;
        static System.Data.DataTable dt_lod_right = null;

        string atws_geometry_tab = "ATWS Geometry";
        string lod_atws_geometry_tab = "ATWS Data for LOD";
        string ar_perm_left_tab = "ar_perm_left";
        string ar_perm_right_tab = "ar_perm_right";
        string ar_temp_tab = "ar_temp";
        string stg_geometry = "Staging Area Geometry";

        string nume_field_handle = "WDesigner";
        System.Data.DataTable dt_atws_lod_manual = null;
        System.Data.DataTable dt_atws_side1 = null;
        System.Data.DataTable dt_atws_side2 = null;
        System.Data.DataTable dt_sides = null;
        System.Data.DataTable dt_pcn = null;
        Point2dCollection col_side1 = null;
        Point2dCollection col_side2 = null;


        string layer_stationing = "WD_stationning";
        static public bool show_export_tab = false;
        int coridor_index = 0;

        Form inputbox1 = null;
        private bool clickdragdown1;
        private System.Drawing.Point lastLocation1;
        static Alignment_mdi.access_road_methods ar = null;

        System.Data.DataTable dt_poly_perm = null;
        System.Data.DataTable dt_poly_tws = null;
        System.Data.DataTable dt_poly_atws = null;
        string col_x = "X";
        string col_y = "Y";
        string col_side = "SIDE";
        string col_id = "ID";
        string col_sta1 = "Start";
        string col_sta2 = "End";




        [CommandMethod("WD")]
        public void ShowForm()
        {
            if (Functions.isSECURE() == true)
            {
                show_export_tab = false;
                foreach (System.Windows.Forms.Form Forma1 in System.Windows.Forms.Application.OpenForms)
                {
                    if (Forma1 is Alignment_mdi.wksp_tool)
                    {
                        Forma1.Focus();
                        Forma1.WindowState = System.Windows.Forms.FormWindowState.Normal;
                        Forma1.Location = new System.Drawing.Point((Screen.PrimaryScreen.WorkingArea.Width - Forma1.Width) / 2,
                          (Screen.PrimaryScreen.WorkingArea.Height - Forma1.Height) / 2);
                        return;
                    }
                }

                try
                {
                    Alignment_mdi.wksp_tool forma2 = new Alignment_mdi.wksp_tool();
                    Autodesk.AutoCAD.ApplicationServices.Application.ShowModelessDialog(forma2);
                    forma2.Location = new System.Drawing.Point((Screen.PrimaryScreen.WorkingArea.Width - forma2.Width) / 2,
                         (Screen.PrimaryScreen.WorkingArea.Height - forma2.Height) / 2);
                }
                catch (System.Exception EX)
                {
                    MessageBox.Show(EX.Message);
                }
            }
        }

        [CommandMethod("zz")]
        public void mleader_reset()
        {

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_mleader;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_mleader;
                        Prompt_mleader = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the mleader:");
                        Prompt_mleader.SetRejectMessage("\nSelect a mleader!");
                        Prompt_mleader.AllowNone = true;
                        Prompt_mleader.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.MLeader), false);
                        Rezultat_mleader = ThisDrawing.Editor.GetEntity(Prompt_mleader);

                        if (Rezultat_mleader.Status != PromptStatus.OK)
                        {

                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            return;
                        }
                        MLeader ml1 = Trans1.GetObject(Rezultat_mleader.ObjectId, OpenMode.ForWrite) as MLeader;


                        if (ml1 != null)
                        {
                            MText mtxt1 = ml1.MText;

                            string text1 = mtxt1.Text;
                            text1.Replace("\n", "\\P").Replace("\r", "").Replace("{", "").Replace("}", "");

                            string[] split1 = text1.Split(';');

                            text1 = split1[split1.Length - 1];

                            MText mtxt2 = new MText();
                            mtxt2.Contents = text1;
                            mtxt2.TextHeight = mtxt1.TextHeight;
                            mtxt2.TextStyleId = mtxt1.TextStyleId;
                            ml1.MText = mtxt2;




                        }



                        Trans1.Commit();
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }


        static public void minimize_form()
        {
            form1.WindowState = FormWindowState.Minimized;
        }

        static public void maximize_form()
        {
            form1.WindowState = FormWindowState.Normal;
        }

        public wksp_tool()
        {
            InitializeComponent();
            ar = new access_road_methods();
            form1 = this;
            if (show_export_tab == false)
            {
                if (Functions.is_dan_popescu() == false && Functions.is_bruno_coelho() == false)
                {
                    flatTabControl1.TabPages.Remove(tabPage_export);
                }
            }

            if (Functions.is_dan_popescu() == false)
            {
                button_debug.Visible = false;
            }

            var toolStripMenuItem1 = new ToolStripMenuItem { Text = "Open File" };
            toolStripMenuItem1.Click += open_excel_Click;

            ContextMenuStrip_xl = new ContextMenuStrip();
            ContextMenuStrip_xl.Items.AddRange(new ToolStripItem[] { toolStripMenuItem1 });

            var toolStripMenuItem2 = new ToolStripMenuItem { Text = "Delete Row" };
            toolStripMenuItem2.Click += delete_current_row_ws_Click;

            var toolStripMenuItem3 = new ToolStripMenuItem { Text = "Clear All Data" };
            toolStripMenuItem3.Click += clear_all_data_ws_Click;

            ContextMenuStrip_dt_ws = new ContextMenuStrip();
            ContextMenuStrip_dt_ws.Items.AddRange(new ToolStripItem[] { toolStripMenuItem2, toolStripMenuItem3 });

            var toolStripMenuItem4 = new ToolStripMenuItem { Text = "Delete Row" };
            toolStripMenuItem4.Click += delete_current_row_atws_Click;
            var toolStripMenuItem5 = new ToolStripMenuItem { Text = "Clear All Site Specific ATWS" };
            toolStripMenuItem5.Click += clear_all_data_atws_Click;
            var toolStripMenuItem6 = new ToolStripMenuItem { Text = "Delete rows not found in DWG" };
            toolStripMenuItem6.Click += update_dt_atws_handles_from_dwg;

            ContextMenuStrip_dt_atws = new ContextMenuStrip();
            ContextMenuStrip_dt_atws.Items.AddRange(new ToolStripItem[] { toolStripMenuItem4, toolStripMenuItem5, toolStripMenuItem6 });

            var toolStripMenuItem7 = new ToolStripMenuItem { Text = "Delete Row" };
            toolStripMenuItem7.Click += delete_current_row_ar_Click;
            var toolStripMenuItem8 = new ToolStripMenuItem { Text = "Clear All Data" };
            toolStripMenuItem8.Click += clear_all_data_ar_Click;

            var toolStripMenuItem9 = new ToolStripMenuItem { Text = "Delete rows not found in DWG" };
            toolStripMenuItem9.Click += update_dt_ar_handles_from_dwg;

            ContextMenuStrip_dt_ar = new ContextMenuStrip();
            ContextMenuStrip_dt_ar.Items.AddRange(new ToolStripItem[] { toolStripMenuItem7, toolStripMenuItem8, toolStripMenuItem9 });


            var toolStripMenuItem10 = new ToolStripMenuItem { Text = "Delete Row" };
            toolStripMenuItem10.Click += delete_current_row_stg_Click;
            var toolStripMenuItem11 = new ToolStripMenuItem { Text = "Clear All Data" };
            toolStripMenuItem11.Click += clear_all_data_stg_Click;

            var toolStripMenuItem12 = new ToolStripMenuItem { Text = "Delete rows not found in DWG" };
            toolStripMenuItem12.Click += update_dt_stg_handles_from_dwg;

            ContextMenuStrip_dt_stg = new ContextMenuStrip();
            ContextMenuStrip_dt_stg.Items.AddRange(new ToolStripItem[] { toolStripMenuItem10, toolStripMenuItem11, toolStripMenuItem12 });


            label_workspace_design.Text = "";

            comboBox_layer_perm.DropDownWidth = 2 * comboBox_layer_perm.Width;
            comboBox_layer_ar.DropDownWidth = 2 * comboBox_layer_perm.Width;
            comboBox_layer_atws.DropDownWidth = 2 * comboBox_layer_perm.Width;
            comboBox_layer_stg.DropDownWidth = 2 * comboBox_layer_perm.Width;
            comboBox_layer_tws.DropDownWidth = 2 * comboBox_layer_perm.Width;
            comboBox_layer_lod.DropDownWidth = 2 * comboBox_layer_perm.Width;
            dt_erase = get_dt_erase_structure();

        }





        private void update_dt_ar_handles_from_dwg(object sender, EventArgs e)
        {
            string layer1 = comboBox_layer_ar.Text;
            update_dt_ar_handles_from_dwg(dt_ar, layer1);
        }


        public void update_dt_ar_handles_from_dwg(System.Data.DataTable dt_ar, string layer1)
        {
            if (dt_ar != null && dt_ar.Rows.Count > 0)
            {
                Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.Database.TransactionManager.StartTransaction())
                    {
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;
                        for (int i = dt_ar.Rows.Count - 1; i >= 0; --i)
                        {
                            if (dt_ar.Rows[i][ar_handle_column] != DBNull.Value)
                            {
                                string handle1 = Convert.ToString(dt_ar.Rows[i][ar_handle_column]);
                                ObjectId id1 = Functions.GetObjectId(ThisDrawing.Database, handle1);
                                if (id1 == ObjectId.Null)
                                {
                                    dt_ar.Rows[i].Delete();
                                    if (dt_ar_side_left_p != null && dt_ar_side_left_p.Columns.Count > 0)
                                    {
                                        for (int k = dt_ar_side_left_p.Columns.Count - 1; k >= 0; --k)
                                        {
                                            if (dt_ar_side_left_p.Columns[k].ColumnName.Contains(handle1) == true)
                                            {
                                                dt_ar_side_left_p.Columns.RemoveAt(k);
                                            }
                                        }
                                    }
                                    if (dt_ar_temp != null && dt_ar_temp.Columns.Count > 0)
                                    {
                                        for (int k = dt_ar_temp.Columns.Count - 1; k >= 0; --k)
                                        {
                                            if (dt_ar_temp.Columns[k].ColumnName.Contains(handle1) == true)
                                            {
                                                dt_ar_temp.Columns.RemoveAt(k);
                                            }
                                        }
                                    }
                                    if (dt_ar_side_right_p != null && dt_ar_side_right_p.Columns.Count > 0)
                                    {
                                        for (int k = dt_ar_side_right_p.Columns.Count - 1; k >= 0; --k)
                                        {
                                            if (dt_ar_side_right_p.Columns[k].ColumnName.Contains(handle1) == true)
                                            {
                                                dt_ar_side_right_p.Columns.RemoveAt(k);
                                            }
                                        }
                                    }
                                    if (dt_ar_temp != null && dt_ar_temp.Columns.Count > 0)
                                    {
                                        for (int k = dt_ar_temp.Columns.Count - 1; k >= 0; --k)
                                        {
                                            if (dt_ar_temp.Columns[k].ColumnName.Contains(handle1) == true)
                                            {
                                                dt_ar_temp.Columns.RemoveAt(k);
                                            }
                                        }
                                    }


                                }
                                else
                                {
                                    Polyline ar1 = null;
                                    try
                                    {
                                        ar1 = Trans1.GetObject(id1, OpenMode.ForRead) as Polyline;
                                    }
                                    catch (Autodesk.AutoCAD.Runtime.Exception)
                                    {


                                    }

                                    if (ar1 == null)
                                    {
                                        dt_ar.Rows[i].Delete();
                                        if (dt_ar_side_left_p != null && dt_ar_side_left_p.Columns.Count > 0)
                                        {
                                            for (int k = dt_ar_side_left_p.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_ar_side_left_p.Columns[k].ColumnName.Contains(handle1) == true)
                                                {
                                                    dt_ar_side_left_p.Columns.RemoveAt(k);
                                                }
                                            }
                                        }
                                        if (dt_ar_temp != null && dt_ar_temp.Columns.Count > 0)
                                        {
                                            for (int k = dt_ar_temp.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_ar_temp.Columns[k].ColumnName.Contains(handle1) == true)
                                                {
                                                    dt_ar_temp.Columns.RemoveAt(k);
                                                }
                                            }
                                        }
                                        if (dt_ar_side_right_p != null && dt_ar_side_right_p.Columns.Count > 0)
                                        {
                                            for (int k = dt_ar_side_right_p.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_ar_side_right_p.Columns[k].ColumnName.Contains(handle1) == true)
                                                {
                                                    dt_ar_side_right_p.Columns.RemoveAt(k);
                                                }
                                            }
                                        }
                                        if (dt_ar_temp != null && dt_ar_temp.Columns.Count > 0)
                                        {
                                            for (int k = dt_ar_temp.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_ar_temp.Columns[k].ColumnName.Contains(handle1) == true)
                                                {
                                                    dt_ar_temp.Columns.RemoveAt(k);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (ar1.Layer != layer1)
                                        {
                                            dt_ar.Rows[i].Delete();
                                            if (dt_ar_side_left_p != null && dt_ar_side_left_p.Columns.Count > 0)
                                            {
                                                for (int k = dt_ar_side_left_p.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_ar_side_left_p.Columns[k].ColumnName.Contains(handle1) == true)
                                                    {
                                                        dt_ar_side_left_p.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }
                                            if (dt_ar_temp != null && dt_ar_temp.Columns.Count > 0)
                                            {
                                                for (int k = dt_ar_temp.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_ar_temp.Columns[k].ColumnName.Contains(handle1) == true)
                                                    {
                                                        dt_ar_temp.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }
                                            if (dt_ar_side_right_p != null && dt_ar_side_right_p.Columns.Count > 0)
                                            {
                                                for (int k = dt_ar_side_right_p.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_ar_side_right_p.Columns[k].ColumnName.Contains(handle1) == true)
                                                    {
                                                        dt_ar_side_right_p.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }
                                            if (dt_ar_temp != null && dt_ar_temp.Columns.Count > 0)
                                            {
                                                for (int k = dt_ar_temp.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_ar_temp.Columns[k].ColumnName.Contains(handle1) == true)
                                                    {
                                                        dt_ar_temp.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Trans1.Commit();
                    }
                }
            }
        }

        private void open_excel_Click(object sender, EventArgs e)
        {
            if (System.IO.File.Exists(design_file) == false) return;
            set_enable_false();
            try
            {
                Microsoft.Office.Interop.Excel.Application Excel1 = null;
                try
                {
                    Excel1 = (Microsoft.Office.Interop.Excel.Application)System.Runtime.InteropServices.Marshal.GetActiveObject("Excel.Application");
                }
                catch (System.Exception ex)
                {
                    Excel1 = new Microsoft.Office.Interop.Excel.Application();
                }

                if (Excel1 == null)
                {
                    MessageBox.Show("PROBLEM WITH EXCEL!");
                    return;
                }
                Excel1.Visible = true;
                Microsoft.Office.Interop.Excel.Workbook Workbook1 = Excel1.Workbooks.Open(design_file);
            }
            catch (System.Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.Message);

            }
            set_enable_true();
        }
        private void label_workspace_design_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right)
            {
                ContextMenuStrip_xl.Show(Cursor.Position);
                ContextMenuStrip_xl.Visible = true;
            }
            else
            {
                ContextMenuStrip_xl.Visible = false;
            }
        }
        #region set enable true or false    



        private void set_enable_false()
        {
            List<System.Windows.Forms.Control> lista_butoane = new List<Control>();
            lista_butoane.Add(button_add_row_to_library);
            //lista_butoane.Add(button_Exit);
            lista_butoane.Add(Button_zoom_to_ws_area);
            lista_butoane.Add(button_load_wksp_library);
            lista_butoane.Add(button_minimize);
            lista_butoane.Add(button_pick_points);
            lista_butoane.Add(button_select_centerline);
            lista_butoane.Add(button_draw);
            lista_butoane.Add(button_draw1);

            lista_butoane.Add(flatTabControl1);
            lista_butoane.Add(button_add_row_to_library);

            lista_butoane.Add(comboBox_layer_ar);
            lista_butoane.Add(comboBox_layer_atws);
            lista_butoane.Add(comboBox_layer_perm);
            lista_butoane.Add(comboBox_layer_stg);
            lista_butoane.Add(comboBox_layer_tws);
            lista_butoane.Add(comboBox_layer_lod);
            lista_butoane.Add(button_load_config);
            lista_butoane.Add(button_save_config);
            lista_butoane.Add(button_draw_custom_atws);
            lista_butoane.Add(comboBox_atws_od_field);
            lista_butoane.Add(comboBox_atws_od_name);
            lista_butoane.Add(button_atws_select_drafted);
            lista_butoane.Add(button_atws_extend_atws);
            lista_butoane.Add(button_atws_to_feature);
            lista_butoane.Add(button_combine_atws);
            lista_butoane.Add(button_atws_in);
            lista_butoane.Add(button_atws_out);
            lista_butoane.Add(button_zoom_to_atws);
            lista_butoane.Add(button_atws_update_justification);
            lista_butoane.Add(button_ar_draw);
            lista_butoane.Add(button_ar_in);
            lista_butoane.Add(button_ar_out);
            lista_butoane.Add(button_zoom_to_ar);
            lista_butoane.Add(button_ar_update_justification);
            lista_butoane.Add(button_ar_select_drafted);
            lista_butoane.Add(button_stg_in);
            lista_butoane.Add(button_stg_out);
            lista_butoane.Add(button_zoom_to_stg);
            lista_butoane.Add(button_stg_update_justification);
            lista_butoane.Add(button_stg_select_drafted);
            lista_butoane.Add(button_highlight_atws);
            lista_butoane.Add(button_atws_add_dim_preset);
            lista_butoane.Add(button_atws_add_justif_preset);
            lista_butoane.Add(button_corridor_to_feature);
            lista_butoane.Add(button_stationing);
            lista_butoane.Add(checkBox_use_od);
            lista_butoane.Add(button_export);
            lista_butoane.Add(radioButton_kml);
            lista_butoane.Add(radioButton_shp);

            lista_butoane.Add(button_draw_cl);
            lista_butoane.Add(button_move_atws);
            lista_butoane.Add(button_prop_perm_select_drafted);
            lista_butoane.Add(button_highlight_prop_perm);
            lista_butoane.Add(button_prop_perm_update_justification);
            lista_butoane.Add(button_proposed_perm_add_preset);
            lista_butoane.Add(button_pp_out);
            lista_butoane.Add(button_pp_in);

            foreach (System.Windows.Forms.Control bt1 in lista_butoane)
            {
                bt1.Enabled = false;
            }
        }
        private void set_enable_true()
        {
            List<System.Windows.Forms.Control> lista_butoane = new List<Control>();
            lista_butoane.Add(button_add_row_to_library);
            lista_butoane.Add(button_Exit);
            lista_butoane.Add(Button_zoom_to_ws_area);
            lista_butoane.Add(button_load_wksp_library);
            lista_butoane.Add(button_minimize);
            lista_butoane.Add(button_pick_points);
            lista_butoane.Add(button_select_centerline);
            lista_butoane.Add(button_draw);
            lista_butoane.Add(button_draw1);


            lista_butoane.Add(flatTabControl1);
            lista_butoane.Add(button_add_row_to_library);

            lista_butoane.Add(comboBox_layer_ar);
            lista_butoane.Add(comboBox_layer_atws);
            lista_butoane.Add(comboBox_layer_perm);
            lista_butoane.Add(comboBox_layer_stg);
            lista_butoane.Add(comboBox_layer_tws);
            lista_butoane.Add(comboBox_layer_lod);
            lista_butoane.Add(button_load_config);
            lista_butoane.Add(button_save_config);
            lista_butoane.Add(button_draw_custom_atws);
            lista_butoane.Add(comboBox_atws_od_field);
            lista_butoane.Add(comboBox_atws_od_name);
            lista_butoane.Add(button_atws_select_drafted);
            lista_butoane.Add(button_atws_extend_atws);
            lista_butoane.Add(button_atws_to_feature);
            lista_butoane.Add(button_combine_atws);
            lista_butoane.Add(button_atws_in);
            lista_butoane.Add(button_atws_out);
            lista_butoane.Add(button_zoom_to_atws);
            lista_butoane.Add(button_atws_update_justification);
            lista_butoane.Add(button_ar_draw);
            lista_butoane.Add(button_ar_in);
            lista_butoane.Add(button_ar_out);
            lista_butoane.Add(button_zoom_to_ar);
            lista_butoane.Add(button_ar_update_justification);
            lista_butoane.Add(button_ar_select_drafted);
            lista_butoane.Add(button_stg_in);
            lista_butoane.Add(button_stg_out);
            lista_butoane.Add(button_zoom_to_stg);
            lista_butoane.Add(button_stg_update_justification);
            lista_butoane.Add(button_stg_select_drafted);
            lista_butoane.Add(button_highlight_atws);
            lista_butoane.Add(button_atws_add_dim_preset);
            lista_butoane.Add(button_atws_add_justif_preset);
            lista_butoane.Add(button_corridor_to_feature);
            lista_butoane.Add(button_stationing);
            lista_butoane.Add(checkBox_use_od);
            lista_butoane.Add(button_export);
            lista_butoane.Add(button_refresh_layers);
            lista_butoane.Add(radioButton_kml);
            lista_butoane.Add(radioButton_shp);

            lista_butoane.Add(button_draw_cl);
            lista_butoane.Add(button_move_atws);
            lista_butoane.Add(button_prop_perm_select_drafted);
            lista_butoane.Add(button_highlight_prop_perm);
            lista_butoane.Add(button_prop_perm_update_justification);
            lista_butoane.Add(button_proposed_perm_add_preset);
            lista_butoane.Add(button_pp_out);
            lista_butoane.Add(button_pp_in);


            foreach (System.Windows.Forms.Control bt1 in lista_butoane)
            {
                bt1.Enabled = true;
            }
        }
        #endregion
        #region minimize
        private void button_minimize_Click(object sender, EventArgs e)
        //Minimizes Form
        {
            this.WindowState = FormWindowState.Minimized;
        }
        private void button_Exit_Click(object sender, EventArgs e)
        //Closes Form
        {
            this.Close();
        }
        private void clickmove_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
        {

            clickdragdown = true;
            lastLocation = e.Location;
        }
        private void clickmove_MouseMove(object sender, MouseEventArgs e)
        {
            if (clickdragdown)
            {
                this.Location = new System.Drawing.Point(
                  (this.Location.X - lastLocation.X) + e.X, (this.Location.Y - lastLocation.Y) + e.Y);

                this.Update();
            }
        }
        private void clickmove_MouseUp(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            clickdragdown = false;
        }
        #endregion
        private void clear_all_data_ws_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("are sure you want to clear all the data?", "wd tool", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
            {
                return;
            }

            try
            {


                dt_corridor = null;
                dt_atws_manual = null;
                dt_atws_lod_manual = null;
                dt_atws_side1 = null;
                dt_atws_side2 = null;
                dt_lod_left = null;
                dt_lod_right = null;
                dt_atws = null;
                dt_atws_side1 = null;
                dt_atws_side2 = null;
                dt_ar = null;
                dt_stg = null;
                dt_sides = null;
                dt_ar_side_left_p = null;
                dt_ar_temp = null;
                dt_ar_side_right_p = null;
                dt_ar_temp = null;
                dataGridView_ws_data.DataSource = dt_corridor;
                dataGridView_atws_data.DataSource = dt_atws;
                dataGridView_ar_data.DataSource = dt_ar;
                dataGridView_stg_data.DataSource = dt_stg;
                primary_workspace_name = "";
                fill_library_comboboxes(dt_library);

            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void clear_all_data_atws_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("are sure you want to clear all the data?", "wd tool", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
            {
                return;
            }

            try
            {
                if (dt_atws != null && dt_atws.Rows.Count > 0)
                {
                    for (int j = dt_atws.Rows.Count - 1; j >= 0; --j)
                    {
                        if (dt_atws.Rows[j][atws_source_column] != DBNull.Value &&
                            Convert.ToString(dt_atws.Rows[j][atws_source_column]).ToLower() == atws_source_manual.ToLower() &&
                            dt_atws.Rows[j][atws_handle_column] != DBNull.Value)
                        {
                            string handle1 = Convert.ToString(dt_atws.Rows[j][atws_handle_column]);
                            dt_atws.Rows[j].Delete();

                            if (dt_atws_manual != null && dt_atws_manual.Columns.Count > 0)
                            {
                                for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                                {
                                    if (dt_atws_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                    {
                                        dt_atws_manual.Columns.RemoveAt(k);
                                    }
                                }
                            }
                            if (dt_atws_lod_manual != null && dt_atws_lod_manual.Columns.Count > 0)
                            {
                                for (int k = dt_atws_lod_manual.Columns.Count - 1; k >= 0; --k)
                                {
                                    if (dt_atws_lod_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                    {
                                        dt_atws_lod_manual.Columns.RemoveAt(k);
                                    }
                                }
                            }

                            if (dt_atws_side1 != null && dt_atws_side1.Columns.Count > 0)
                            {
                                for (int k = dt_atws_side1.Columns.Count - 1; k >= 0; --k)
                                {
                                    if (dt_atws_side1.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                    {
                                        dt_atws_side1.Columns.RemoveAt(k);
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Columns.Count > 0)
                            {
                                for (int k = dt_atws_side2.Columns.Count - 1; k >= 0; --k)
                                {
                                    if (dt_atws_side2.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                    {
                                        dt_atws_side2.Columns.RemoveAt(k);
                                    }
                                }
                            }


                        }
                    }
                }

                calculate_LOD();
                delete_existing_linework();
                draw_all_corridors();


            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void clear_all_data_ar_Click(object sender, EventArgs e)
        {
            try
            {
                dt_ar = null;
                dataGridView_ar_data.DataSource = null;
                dt_ar_side_left_p = null;
                dt_ar_temp = null;
                dt_ar_side_right_p = null;
                dt_ar_temp = null;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void clear_all_data_stg_Click(object sender, EventArgs e)
        {
            try
            {
                dt_stg = null;
                dt_manual_stg = null;
                dataGridView_stg_data.DataSource = null;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void delete_current_row_ws_Click(object sender, EventArgs e)
        {
            try
            {

                if (dataGridView_ws_data.RowCount > 0)
                {
                    int index_grid_ws = dataGridView_ws_data.CurrentCell.RowIndex;
                    if (index_grid_ws == -1)
                    {
                        return;
                    }

                    bool is_primary = false;

                    if (dataGridView_ws_data.Rows[index_grid_ws].Cells[tws_primary_column].Value != DBNull.Value && Convert.ToBoolean(dataGridView_ws_data.Rows[index_grid_ws].Cells[tws_primary_column].Value) == true)
                    {
                        is_primary = true;
                    }

                    if (is_primary == true)
                    {
                        MessageBox.Show("You can not delete a primary workspace row");
                        return;
                    }

                    string wn = "";
                    if (dataGridView_ws_data.Rows[index_grid_ws].Cells[col_corridor_name].Value != DBNull.Value)
                    {
                        wn = Convert.ToString(dataGridView_ws_data.Rows[index_grid_ws].Cells[col_corridor_name].Value);
                    }

                    double sta1 = -1;
                    double sta2 = -1;

                    int index_dt = -1;

                    if (dataGridView_ws_data.Rows[index_grid_ws].Cells[atws_sta1_column].Value != DBNull.Value && Functions.IsNumeric(Convert.ToString(dataGridView_ws_data.Rows[index_grid_ws].Cells[atws_sta1_column].Value)) == true)
                    {
                        sta1 = Math.Round(Convert.ToDouble(dataGridView_ws_data.Rows[index_grid_ws].Cells[atws_sta1_column].Value), 2);
                    }
                    if (dataGridView_ws_data.Rows[index_grid_ws].Cells[atws_sta2_column].Value != DBNull.Value && Functions.IsNumeric(Convert.ToString(dataGridView_ws_data.Rows[index_grid_ws].Cells[atws_sta2_column].Value)) == true)
                    {
                        sta2 = Math.Round(Convert.ToDouble(dataGridView_ws_data.Rows[index_grid_ws].Cells[atws_sta2_column].Value), 2);
                    }


                    if (dt_sides != null && dt_sides.Columns.Count > 0)
                    {
                        if (dt_sides.Columns.Contains(sta1.ToString()) == true)
                        {
                            dt_sides.Columns.Remove(sta1.ToString());
                        }

                        if (dt_sides.Columns.Contains(sta2.ToString()) == true)
                        {
                            dt_sides.Columns.Remove(sta2.ToString());
                        }

                        if (dt_sides.Columns.Contains(sta1.ToString() + "#") == true)
                        {
                            dt_sides.Columns.Remove(sta1.ToString() + "#");
                        }

                        if (dt_sides.Columns.Contains(sta2.ToString() + "#") == true)
                        {
                            dt_sides.Columns.Remove(sta2.ToString() + "#");
                        }
                    }


                    List<int> lista_del = new List<int>();

                    for (int j = 0; j < dt_corridor.Rows.Count; ++j)
                    {
                        if (dt_corridor.Rows[j][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][atws_sta1_column])) == true &&
                            dt_corridor.Rows[j][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][atws_sta2_column])) == true)
                        {
                            double sta11 = Math.Round(Convert.ToDouble(dt_corridor.Rows[j][atws_sta1_column]), 2);
                            double sta22 = Math.Round(Convert.ToDouble(dt_corridor.Rows[j][atws_sta2_column]), 2);

                            if (sta1 == sta11 && sta2 == sta22)
                            {
                                index_dt = j;
                                dt_corridor.Rows[j][col_corridor_name] = primary_workspace_name;
                                dt_corridor.Rows[j][tws_side_column] = "normal";
                                dt_corridor.Rows[j][tws_primary_column] = true;


                                if (j > 0)
                                {
                                    if (dt_corridor.Rows[j - 1][tws_primary_column] != DBNull.Value && Convert.ToBoolean(dt_corridor.Rows[j - 1][tws_primary_column]) == true &&
                                            dt_corridor.Rows[j - 1][tws_side_column] != DBNull.Value && Convert.ToString(dt_corridor.Rows[j - 1][tws_side_column]) == "normal")
                                    {
                                        dt_corridor.Rows[j - 1][atws_sta2_column] = sta2;
                                        lista_del.Add(j);

                                    }

                                }

                                if (j < dt_corridor.Rows.Count - 1)
                                {
                                    if (dt_corridor.Rows[j + 1][tws_primary_column] != DBNull.Value && Convert.ToBoolean(dt_corridor.Rows[j + 1][tws_primary_column]) == true &&
                                            dt_corridor.Rows[j + 1][tws_side_column] != DBNull.Value && Convert.ToString(dt_corridor.Rows[j + 1][tws_side_column]) == "normal")
                                    {
                                        dt_corridor.Rows[j + 1][tws_sta1_column] = sta1;
                                        if (lista_del.Contains(j) == false)
                                        {
                                            lista_del.Add(j);
                                        }
                                        else
                                        {
                                            if (j > 0)
                                            {
                                                dt_corridor.Rows[j + 1][tws_sta1_column] = dt_corridor.Rows[j - 1][tws_sta1_column];
                                                lista_del.Add(j - 1);
                                            }
                                        }

                                    }

                                }
                                j = dt_corridor.Rows.Count;
                            }
                        }



                        if (dt_atws != null && dt_atws.Rows.Count > 0)
                        {
                            for (int i = dt_atws.Rows.Count - 1; i >= 0; --i)
                            {
                                if (dt_atws.Rows[i][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[i][atws_sta1_column])) == true &&
                                    dt_atws.Rows[i][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[i][atws_sta2_column])) == true &&
                                    dt_atws.Rows[i][atws_source_column] != DBNull.Value && dt_atws.Rows[i][atws_handle_column] != DBNull.Value)
                                {
                                    double sta_start = Math.Round(Convert.ToDouble(dt_atws.Rows[i][atws_sta1_orig_column]), 2);
                                    double sta_end = Math.Round(Convert.ToDouble(dt_atws.Rows[i][atws_sta2_orig_column]), 2);
                                    string source1 = Convert.ToString(dt_atws.Rows[i][atws_source_column]);
                                    string handle1 = Convert.ToString(dt_atws.Rows[i][atws_handle_column]);
                                    if (sta1 == sta_start && sta2 == sta_end && source1.ToLower() == atws_source_library.ToLower())
                                    {
                                        dt_atws.Rows[i].Delete();
                                        if (dt_atws_manual != null && dt_atws_manual.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                                {
                                                    dt_atws_manual.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_lod_manual != null && dt_atws_lod_manual.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_lod_manual.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_lod_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                                {
                                                    dt_atws_lod_manual.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_side1 != null && dt_atws_side1.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_side1.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_side1.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                                {
                                                    dt_atws_side1.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_side2 != null && dt_atws_side2.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_side2.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_side2.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle1.ToLower())
                                                {
                                                    dt_atws_side2.Columns.RemoveAt(k);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                    if (index_dt == -1)
                    {
                        MessageBox.Show("The row does not exist in database");
                        return;
                    }


                    if (lista_del != null && lista_del.Count > 0)
                    {
                        for (int i = 0; i < lista_del.Count; ++i)
                        {
                            dt_corridor.Rows[lista_del[i]].Delete();
                        }
                    }

                    calculate_LOD();
                    delete_existing_linework();
                    draw_all_corridors();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void delete_current_row_atws_Click(object sender, EventArgs e)
        {
            try
            {

                if (dataGridView_atws_data.RowCount > 0)
                {
                    int index_grid = dataGridView_atws_data.CurrentCell.RowIndex;
                    if (index_grid == -1)
                    {
                        return;
                    }


                    string source1 = "";
                    if (dataGridView_atws_data.Rows[index_grid].Cells[atws_source_column].Value != DBNull.Value)
                    {
                        source1 = Convert.ToString(dataGridView_atws_data.Rows[index_grid].Cells[atws_source_column].Value);
                    }

                    bool is_from_dt_ws = false;

                    if (source1.ToLower() == atws_source_library.ToLower())
                    {
                        is_from_dt_ws = true;

                    }




                    if (is_from_dt_ws == true)
                    {

                        if (MessageBox.Show("this atws has been generated from the corridor library\r\nAre you sure you want to remove it?", "WD tool", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.No)
                        {
                            return;
                        }

                        #region dt_tws delete


                        double sta1 = -1;
                        double sta2 = -1;

                        int index_dt = -1;

                        if (dataGridView_atws_data.Rows[index_grid].Cells[atws_sta1_orig_column].Value != DBNull.Value && Functions.IsNumeric(Convert.ToString(dataGridView_atws_data.Rows[index_grid].Cells[atws_sta1_orig_column].Value)) == true)
                        {
                            sta1 = Math.Round(Convert.ToDouble(dataGridView_atws_data.Rows[index_grid].Cells[atws_sta1_orig_column].Value), 2);
                        }
                        if (dataGridView_atws_data.Rows[index_grid].Cells[atws_sta2_orig_column].Value != DBNull.Value && Functions.IsNumeric(Convert.ToString(dataGridView_atws_data.Rows[index_grid].Cells[atws_sta2_orig_column].Value)) == true)
                        {
                            sta2 = Math.Round(Convert.ToDouble(dataGridView_atws_data.Rows[index_grid].Cells[atws_sta2_orig_column].Value), 2);
                        }


                        if (dt_sides != null && dt_sides.Columns.Count > 0)
                        {
                            if (dt_sides.Columns.Contains(sta1.ToString()) == true)
                            {
                                dt_sides.Columns.Remove(sta1.ToString());
                            }

                            if (dt_sides.Columns.Contains(sta2.ToString()) == true)
                            {
                                dt_sides.Columns.Remove(sta2.ToString());
                            }

                            if (dt_sides.Columns.Contains(sta1.ToString() + "#") == true)
                            {
                                dt_sides.Columns.Remove(sta1.ToString() + "#");
                            }

                            if (dt_sides.Columns.Contains(sta2.ToString() + "#") == true)
                            {
                                dt_sides.Columns.Remove(sta2.ToString() + "#");
                            }
                        }


                        List<int> lista_del = new List<int>();

                        for (int j = 0; j < dt_corridor.Rows.Count; ++j)
                        {
                            if (dt_corridor.Rows[j][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][tws_sta1_column])) == true &&
                                dt_corridor.Rows[j][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][tws_sta2_column])) == true)
                            {
                                double sta11 = Math.Round(Convert.ToDouble(dt_corridor.Rows[j][tws_sta1_column]), 2);
                                double sta22 = Math.Round(Convert.ToDouble(dt_corridor.Rows[j][tws_sta2_column]), 2);

                                if (sta1 == sta11 && sta2 == sta22)
                                {
                                    index_dt = j;
                                    dt_corridor.Rows[j][col_corridor_name] = primary_workspace_name;
                                    dt_corridor.Rows[j][tws_side_column] = "normal";
                                    dt_corridor.Rows[j][tws_primary_column] = true;


                                    if (j > 0)
                                    {
                                        if (dt_corridor.Rows[j - 1][tws_primary_column] != DBNull.Value && Convert.ToBoolean(dt_corridor.Rows[j - 1][tws_primary_column]) == true &&
                                                dt_corridor.Rows[j - 1][tws_side_column] != DBNull.Value && Convert.ToString(dt_corridor.Rows[j - 1][tws_side_column]) == "normal")
                                        {
                                            dt_corridor.Rows[j - 1][tws_sta2_column] = sta2;
                                            lista_del.Add(j);

                                        }

                                    }

                                    if (j < dt_corridor.Rows.Count - 1)
                                    {
                                        if (dt_corridor.Rows[j + 1][tws_primary_column] != DBNull.Value && Convert.ToBoolean(dt_corridor.Rows[j + 1][tws_primary_column]) == true &&
                                                dt_corridor.Rows[j + 1][tws_side_column] != DBNull.Value && Convert.ToString(dt_corridor.Rows[j + 1][tws_side_column]) == "normal")
                                        {
                                            dt_corridor.Rows[j + 1][tws_sta1_column] = sta1;
                                            if (lista_del.Contains(j) == false)
                                            {
                                                lista_del.Add(j);
                                            }
                                            else
                                            {
                                                if (j > 0)
                                                {
                                                    dt_corridor.Rows[j + 1][tws_sta1_column] = dt_corridor.Rows[j - 1][tws_sta1_column];
                                                    lista_del.Add(j - 1);
                                                }
                                            }

                                        }

                                    }
                                    j = dt_corridor.Rows.Count;
                                }
                            }



                            if (dt_atws != null && dt_atws.Rows.Count > 0)
                            {
                                for (int i = dt_atws.Rows.Count - 1; i >= 0; --i)
                                {
                                    if (dt_atws.Rows[i][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[i][atws_sta1_column])) == true &&
                                        dt_atws.Rows[i][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[i][atws_sta2_column])) == true &&
                                        dt_atws.Rows[i][atws_source_column] != DBNull.Value && dt_atws.Rows[i][atws_handle0_column] != DBNull.Value)
                                    {
                                        double sta_start = Math.Round(Convert.ToDouble(dt_atws.Rows[i][atws_sta1_orig_column]), 2);
                                        double sta_end = Math.Round(Convert.ToDouble(dt_atws.Rows[i][atws_sta2_orig_column]), 2);
                                        string source_tws = Convert.ToString(dt_atws.Rows[i][atws_source_column]);
                                        string handle0 = Convert.ToString(dt_atws.Rows[i][atws_handle0_column]);
                                        if (sta1 == sta_start && sta2 == sta_end && source_tws.ToLower() == atws_source_library.ToLower())
                                        {
                                            dt_atws.Rows[i].Delete();
                                            if (dt_atws_manual != null && dt_atws_manual.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_manual.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }

                                            if (dt_atws_lod_manual != null && dt_atws_lod_manual.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_lod_manual.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_lod_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_lod_manual.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }

                                            if (dt_atws_side1 != null && dt_atws_side1.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_side1.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_side1.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_side1.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }

                                            if (dt_atws_side2 != null && dt_atws_side2.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_side2.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_side2.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_side2.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                        if (index_dt == -1)
                        {
                            MessageBox.Show("The row does not exist in database");
                            return;
                        }


                        if (lista_del != null && lista_del.Count > 0)
                        {
                            for (int i = 0; i < lista_del.Count; ++i)
                            {
                                dt_corridor.Rows[lista_del[i]].Delete();
                            }
                        }




                        #endregion


                    }
                    else //is from library = false
                    {

                        string handle_grid = "";

                        if (dataGridView_atws_data.Rows[index_grid].Cells[atws_handle0_column].Value != DBNull.Value)
                        {
                            handle_grid = Convert.ToString(dataGridView_atws_data.Rows[index_grid].Cells[atws_handle0_column].Value);
                        }

                        if (handle_grid != "")
                        {
                            for (int j = dt_atws.Rows.Count - 1; j >= 0; --j)
                            {
                                if (dt_atws.Rows[j][atws_handle0_column] != DBNull.Value)
                                {
                                    string handle0 = Convert.ToString(dt_atws.Rows[j][atws_handle0_column]);

                                    if (handle0.ToLower() == handle_grid.ToLower())
                                    {
                                        dt_atws.Rows[j].Delete();
                                        j = -1;

                                        if (dt_atws_manual != null && dt_atws_manual.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_manual.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_lod_manual != null && dt_atws_lod_manual.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_lod_manual.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_lod_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_lod_manual.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_side1 != null && dt_atws_side1.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_side1.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_side1.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_side1.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_side2 != null && dt_atws_side2.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_side2.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_side2.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_side2.Columns.RemoveAt(k);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }



                    }

                    delete_columns_not_found_in_dt_atws();

                    calculate_LOD();

                    delete_existing_linework();
                    draw_all_corridors();

                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void delete_current_row_ar_Click(object sender, EventArgs e)
        {
            try
            {

                if (dataGridView_ar_data.RowCount > 0)
                {
                    int index_grid = dataGridView_ar_data.CurrentCell.RowIndex;
                    if (index_grid == -1)
                    {
                        return;
                    }



                    string handle_grid = "";


                    if (dataGridView_ar_data.Rows[index_grid].Cells[ar_handle_column].Value != DBNull.Value)
                    {
                        handle_grid = Convert.ToString(dataGridView_ar_data.Rows[index_grid].Cells[ar_handle_column].Value);
                    }

                    if (handle_grid != "")
                    {
                        for (int j = dt_ar.Rows.Count - 1; j >= 0; --j)
                        {
                            if (dt_ar.Rows[j][ar_handle_column] != DBNull.Value)
                            {
                                string handle1 = Convert.ToString(dt_ar.Rows[j][ar_handle_column]);

                                if (handle1.ToLower() == handle_grid.ToLower())
                                {
                                    dt_ar.Rows[j].Delete();
                                    j = -1;
                                }
                            }
                        }
                        if (dt_ar_side_left_p != null)
                        {
                            for (int j = dt_ar_side_left_p.Columns.Count - 1; j >= 0; --j)
                            {
                                if (dt_ar_side_left_p.Columns[j].ColumnName.Contains(handle_grid) == true)
                                {
                                    dt_ar_side_left_p.Columns.RemoveAt(j);
                                }
                            }
                        }
                        if (dt_ar_temp != null)
                        {
                            for (int j = dt_ar_temp.Columns.Count - 1; j >= 0; --j)
                            {
                                if (dt_ar_temp.Columns[j].ColumnName.Contains(handle_grid) == true)
                                {
                                    dt_ar_temp.Columns.RemoveAt(j);
                                }
                            }
                        }
                        if (dt_ar_side_right_p != null)
                        {
                            for (int j = dt_ar_side_right_p.Columns.Count - 1; j >= 0; --j)
                            {
                                if (dt_ar_side_right_p.Columns[j].ColumnName.Contains(handle_grid) == true)
                                {
                                    dt_ar_side_right_p.Columns.RemoveAt(j);
                                }
                            }
                        }
                        if (dt_ar_temp != null)
                        {
                            for (int j = dt_ar_temp.Columns.Count - 1; j >= 0; --j)
                            {
                                if (dt_ar_temp.Columns[j].ColumnName.Contains(handle_grid) == true)
                                {
                                    dt_ar_temp.Columns.RemoveAt(j);
                                }
                            }
                        }
                        //baga si restul daca merge
                    }
                    if (dt_ar.Rows.Count == 0)
                    {
                        dt_ar = null;
                        dataGridView_ar_data.DataSource = null;
                        dt_ar_side_left_p = null;
                        dt_ar_temp = null;
                        dt_ar_side_right_p = null;
                        dt_ar_temp = null;
                    }
                    else
                    {
                        ar.attach_dt_ar_to_datagridview(dt_ar, dataGridView_ar_data);
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void delete_current_row_stg_Click(object sender, EventArgs e)
        {
            try
            {

                if (dataGridView_stg_data.RowCount > 0)
                {
                    int index_grid = dataGridView_stg_data.CurrentCell.RowIndex;
                    if (index_grid == -1)
                    {
                        return;
                    }

                    string handle_grid = "";

                    if (dataGridView_stg_data.Rows[index_grid].Cells[stg_handle_column].Value != DBNull.Value)
                    {
                        handle_grid = Convert.ToString(dataGridView_stg_data.Rows[index_grid].Cells[stg_handle_column].Value);
                    }

                    if (handle_grid != "")
                    {
                        for (int j = dt_stg.Rows.Count - 1; j >= 0; --j)
                        {
                            if (dt_stg.Rows[j][stg_handle_column] != DBNull.Value)
                            {
                                string handle1 = Convert.ToString(dt_stg.Rows[j][stg_handle_column]);

                                if (handle1.ToLower() == handle_grid.ToLower())
                                {
                                    dt_stg.Rows[j].Delete();
                                    j = -1;
                                }
                            }
                        }
                    }
                    if (dt_stg.Rows.Count == 0)
                    {
                        dt_stg = null;
                        dataGridView_stg_data.DataSource = null;
                    }
                    else
                    {
                        attach_dt_stg_to_datagridview(dt_stg);
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }
        private void update_dt_atws_handles_from_dwg(object sender, EventArgs e)
        {
            if (dt_atws != null && dt_atws.Rows.Count > 0)
            {
                Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.Database.TransactionManager.StartTransaction())
                    {
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;
                        List<string> lista_del = new List<string>();

                        for (int i = dt_atws.Rows.Count - 1; i >= 0; --i)
                        {
                            if (dt_atws.Rows[i][atws_handle_column] != DBNull.Value && dt_atws.Rows[i][atws_handle0_column] != DBNull.Value && dt_atws.Rows[i][atws_source_column] != DBNull.Value &&
                                                    Convert.ToString(dt_atws.Rows[i][atws_source_column]).ToLower() == atws_source_manual.ToLower())
                            {
                                string handle1 = Convert.ToString(dt_atws.Rows[i][atws_handle_column]);
                                string handle0 = Convert.ToString(dt_atws.Rows[i][atws_handle0_column]);
                                ObjectId id1 = Functions.GetObjectId(ThisDrawing.Database, handle1);
                                if (id1 == ObjectId.Null)
                                {
                                    dt_atws.Rows[i].Delete();
                                    if (dt_atws_manual != null && dt_atws_manual.Columns.Count > 0)
                                    {
                                        for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                                        {
                                            if (dt_atws_manual.Columns[k].ColumnName.Replace("x ", "").Replace("y ", "") == handle1 ||
                                                dt_atws_manual.Columns[k].ColumnName.Replace("x ", "").Replace("y ", "") == handle0)
                                            {
                                                dt_atws_manual.Columns.RemoveAt(k);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Polyline atws1 = null;
                                    try
                                    {
                                        atws1 = Trans1.GetObject(id1, OpenMode.ForRead) as Polyline;
                                    }
                                    catch (Autodesk.AutoCAD.Runtime.Exception)
                                    {


                                    }

                                    if (atws1 == null)
                                    {
                                        lista_del.Add(handle0);
                                        if (dt_atws_manual != null && dt_atws_manual.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_manual.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_lod_manual != null && dt_atws_lod_manual.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_lod_manual.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_lod_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_lod_manual.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_side1 != null && dt_atws_side1.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_side1.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_side1.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_side1.Columns.RemoveAt(k);
                                                }
                                            }
                                        }

                                        if (dt_atws_side2 != null && dt_atws_side2.Columns.Count > 0)
                                        {
                                            for (int k = dt_atws_side2.Columns.Count - 1; k >= 0; --k)
                                            {
                                                if (dt_atws_side2.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                {
                                                    dt_atws_side2.Columns.RemoveAt(k);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (atws1.Layer != comboBox_layer_atws.Text)
                                        {
                                            lista_del.Add(handle0);
                                            if (dt_atws_manual != null && dt_atws_manual.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_manual.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }

                                            if (dt_atws_lod_manual != null && dt_atws_lod_manual.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_lod_manual.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_lod_manual.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_lod_manual.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }

                                            if (dt_atws_side1 != null && dt_atws_side1.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_side1.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_side1.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_side1.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }

                                            if (dt_atws_side2 != null && dt_atws_side2.Columns.Count > 0)
                                            {
                                                for (int k = dt_atws_side2.Columns.Count - 1; k >= 0; --k)
                                                {
                                                    if (dt_atws_side2.Columns[k].ColumnName.ToLower().Replace("x ", "").Replace("y ", "") == handle0.ToLower())
                                                    {
                                                        dt_atws_side2.Columns.RemoveAt(k);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        for (int i = dt_atws.Rows.Count - 1; i >= 0; --i)
                        {
                            if (dt_atws.Rows[i][atws_handle0_column] != DBNull.Value)
                            {
                                string handle2 = Convert.ToString(dt_atws.Rows[i][atws_handle0_column]);
                                if (lista_del.Contains(handle2) == true)
                                {
                                    dt_atws.Rows[i].Delete();
                                }
                            }

                        }


                        Trans1.Commit();
                    }
                }
            }

            if (dt_atws != null && dt_atws.Rows.Count > 0)
            {
                System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                dt_atws_sorted = dt_atws.Clone();
                for (int i = 0; i < dt_atws.Rows.Count; ++i)
                {
                    System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                    row1.ItemArray = dt_atws.Rows[i].ItemArray;
                    if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                    {
                        dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                    }
                }
                Polyline lod1_left = create_lod_construction_polylines(1, "LEFT");
                Polyline lod2_left = create_lod_construction_polylines(2, "LEFT");
                dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);

                dt_atws_sorted = dt_atws.Clone();
                for (int i = 0; i < dt_atws.Rows.Count; ++i)
                {
                    System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                    row1.ItemArray = dt_atws.Rows[i].ItemArray;
                    if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                    {
                        dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                    }
                }

                Polyline lod1_right = create_lod_construction_polylines(1, "RIGHT");
                Polyline lod2_right = create_lod_construction_polylines(2, "RIGHT");
                dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);
            }
            delete_existing_linework();
            draw_all_corridors();

        }
        private void dataGridView_dt_ws_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right && e.RowIndex >= 0)
            {
                ContextMenuStrip_dt_ws.Show(Cursor.Position);
                ContextMenuStrip_dt_ws.Visible = true;
            }
            else
            {
                ContextMenuStrip_dt_ws.Visible = false;
            }
        }
        private void dataGridView_dt_atws_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right && e.RowIndex >= 0)
            {
                ContextMenuStrip_dt_atws.Show(Cursor.Position);
                ContextMenuStrip_dt_atws.Visible = true;
            }
            else
            {
                ContextMenuStrip_dt_atws.Visible = false;
            }
        }
        private void dataGridView_dt_ar_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right && e.RowIndex >= 0)
            {
                ContextMenuStrip_dt_ar.Show(Cursor.Position);
                ContextMenuStrip_dt_ar.Visible = true;
            }
            else
            {
                ContextMenuStrip_dt_ar.Visible = false;
            }
        }
        private void dataGridView_dt_stg_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right && e.RowIndex >= 0)
            {
                ContextMenuStrip_dt_stg.Show(Cursor.Position);
                ContextMenuStrip_dt_stg.Visible = true;
            }
            else
            {
                ContextMenuStrip_dt_stg.Visible = false;
            }
        }
        private void Button_Select_Centerline_Click(object sender, EventArgs e)
        {
            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            try
            {

                Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;
                        Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_centerline;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_centerline;
                        Prompt_centerline = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the centerline:");
                        Prompt_centerline.SetRejectMessage("\nSelect a polyline!");
                        Prompt_centerline.AllowNone = true;
                        Prompt_centerline.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        this.WindowState = FormWindowState.Minimized;
                        Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
                        Rezultat_centerline = ThisDrawing.Editor.GetEntity(Prompt_centerline);
                        if (Rezultat_centerline.Status == PromptStatus.OK)
                        {
                            Polyline poly1 = Trans1.GetObject(Rezultat_centerline.ObjectId, OpenMode.ForRead) as Polyline;
                            if (poly1 != null)
                            {
                                dt_cl = build_data_table_from_poly(poly1);
                            }

                            if (dt_cl == null)
                            {
                                MessageBox.Show("nothing loaded, please check the centerline");
                            }
                            if (dt_cl != null && dt_cl.Rows.Count > 1)
                            {
                                labelCL_loaded.Visible = true;
                                labelCL_not_loaded.Visible = false;
                            }
                            else
                            {
                                labelCL_loaded.Visible = false;
                                labelCL_not_loaded.Visible = true;
                                dt_cl = null;
                            }

                        }
                    }
                }
                Editor1.SetImpliedSelection(Empty_array);
                Editor1.WriteMessage("\n\rCommand:");
                this.WindowState = FormWindowState.Normal;

                dt_ar = null;
                dt_atws = null;
                dt_lod_left = null;
                dt_lod_right = null;
                dt_ar_side_left_p = null;
                dt_ar_temp = null;
                dt_ar_side_right_p = null;
                dt_ar_temp = null;
                dt_atws_manual = null;
                dt_manual_stg = null;
                dt_stg = null;
                dt_corridor = null;
                dataGridView_ar_data.DataSource = null;
                dataGridView_atws_data.DataSource = null;
                dataGridView_stg_data.DataSource = null;
                dataGridView_ws_data.DataSource = null;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            set_enable_true();
        }
        private void Button_load_wksp_library_Click(object sender, EventArgs e)
        {
            set_enable_false();
            try
            {
                using (OpenFileDialog fbd = new OpenFileDialog())
                {
                    fbd.Multiselect = false;
                    fbd.Filter = "Excel files (*.xlsx)|*.xlsx";
                    if (fbd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        try
                        {
                            Microsoft.Office.Interop.Excel.Application Excel1 = null;

                            try
                            {
                                Excel1 = (Microsoft.Office.Interop.Excel.Application)System.Runtime.InteropServices.Marshal.GetActiveObject("Excel.Application");
                            }
                            catch (System.Exception ex)
                            {
                                Excel1 = new Microsoft.Office.Interop.Excel.Application();

                            }

                            if (Functions.is_dan_popescu() == false)
                            {
                                if (Excel1.Workbooks.Count == 0) Excel1.Visible = false;
                            }
                            else
                            {
                                Excel1.Visible = true;
                            }
                            Microsoft.Office.Interop.Excel.Workbook Workbook1 = Excel1.Workbooks.Open(fbd.FileName);

                            try
                            {
                                for (int i = 1; i <= Workbook1.Worksheets.Count; ++i)
                                {
                                    Worksheet W1 = Workbook1.Worksheets[i];

                                    if (W1.Name == "General")
                                    {
                                        client1 = Convert.ToString(W1.Range["B1"].Value2);
                                        project1 = Convert.ToString(W1.Range["B2"].Value2);
                                        string tabla1 = Convert.ToString(W1.Range["B3"].Value2);
                                        string field1 = Convert.ToString(W1.Range["B4"].Value2);
                                        if (client1 != null) textBox_client_name.Text = client1;
                                        if (project1 != null) textBox_project.Text = project1;
                                        if (tabla1 != null && tabla1 != "")
                                        {
                                            if (comboBox_atws_od_name.Items.Contains(tabla1) == false)
                                            {
                                                comboBox_atws_od_name.Items.Add(tabla1);
                                            }

                                            comboBox_atws_od_name.SelectedIndex = comboBox_atws_od_name.Items.IndexOf(tabla1);
                                        }
                                        if (field1 != null && field1 != "")
                                        {
                                            if (comboBox_atws_od_field.Items.Contains(field1) == false)
                                            {
                                                comboBox_atws_od_field.Items.Add(field1);
                                            }
                                            comboBox_atws_od_field.SelectedIndex = comboBox_atws_od_field.Items.IndexOf(field1);

                                        }

                                        string last_col = Functions.get_excel_column_letter(101);

                                        string tabla2 = W1.Range["B6"].Value2;
                                        string field2 = W1.Range["B7"].Value2;
                                        if (tabla2 != null && tabla2 != "")
                                        {
                                            if (comboBox_ar_od_name.Items.Contains(tabla2) == false)
                                            {
                                                comboBox_ar_od_name.Items.Add(tabla2);
                                            }
                                            comboBox_ar_od_name.SelectedIndex = comboBox_ar_od_name.Items.IndexOf(tabla2);
                                        }
                                        if (field2 != null && field2 != "")
                                        {
                                            if (comboBox_ar_od_field.Items.Contains(field2) == false)
                                            {
                                                comboBox_ar_od_field.Items.Add(field2);
                                            }
                                            comboBox_ar_od_field.SelectedIndex = comboBox_ar_od_field.Items.IndexOf(field2);
                                        }

                                        string tabla3 = W1.Range["B8"].Value2;
                                        string field3 = W1.Range["B9"].Value2;
                                        if (tabla3 != null && tabla3 != "")
                                        {
                                            if (comboBox_stg_od_name.Items.Contains(tabla3) == false)
                                            {
                                                comboBox_stg_od_name.Items.Add(tabla3);
                                            }
                                            comboBox_stg_od_name.SelectedIndex = comboBox_stg_od_name.Items.IndexOf(tabla3);
                                        }
                                        if (field3 != null && field3 != "")
                                        {
                                            if (comboBox_stg_od_field.Items.Contains(field3) == false)
                                            {
                                                comboBox_stg_od_field.Items.Add(field3);
                                            }
                                            comboBox_stg_od_field.SelectedIndex = comboBox_stg_od_field.Items.IndexOf(field3);
                                        }

                                    }

                                    if (W1.Name == "Layers")
                                    {
                                        Range range1 = W1.Range["A2:B7"];
                                        object[,] values = new object[6, 2];
                                        values = range1.Value2;
                                        if (values[1, 1] != null && values[1, 2] != null)
                                        {
                                            if (Convert.ToString(values[1, 2]) == "PERMANENT EASEMENT")
                                            {
                                                string lay_perm = Convert.ToString(values[1, 1]);
                                                if (lay_perm == "")
                                                {
                                                    lay_perm = "0";
                                                }
                                                comboBox_layer_perm.Items.Clear();
                                                comboBox_layer_perm.Items.Add(lay_perm);
                                                comboBox_layer_perm.SelectedIndex = 0;
                                            }
                                        }
                                        if (values[2, 1] != null && values[2, 2] != null)
                                        {
                                            if (Convert.ToString(values[2, 2]) == "TEMPORARY WORKSPACE")
                                            {
                                                string lay_temp = Convert.ToString(values[2, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_tws.Items.Clear();
                                                comboBox_layer_tws.Items.Add(lay_temp);
                                                comboBox_layer_tws.SelectedIndex = 0;
                                            }
                                        }
                                        if (values[3, 1] != null && values[3, 2] != null)
                                        {
                                            if (Convert.ToString(values[3, 2]) == "ADDITIONAL TEMPORARY WORKSPACE")
                                            {
                                                string lay_temp = Convert.ToString(values[3, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_atws.Items.Clear();
                                                comboBox_layer_atws.Items.Add(lay_temp);
                                                comboBox_layer_atws.SelectedIndex = 0;
                                            }
                                        }
                                        if (values[4, 1] != null && values[4, 2] != null)
                                        {
                                            if (Convert.ToString(values[4, 2]) == "ACCESS ROADS")
                                            {
                                                string lay_temp = Convert.ToString(values[4, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_ar.Items.Clear();
                                                comboBox_layer_ar.Items.Add(lay_temp);
                                                comboBox_layer_ar.SelectedIndex = 0;
                                            }
                                        }

                                        if (values[5, 1] != null && values[5, 2] != null)
                                        {
                                            if (Convert.ToString(values[5, 2]) == "STAGING AREA")
                                            {
                                                string lay_temp = Convert.ToString(values[5, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_stg.Items.Clear();
                                                comboBox_layer_stg.Items.Add(lay_temp);
                                                comboBox_layer_stg.SelectedIndex = 0;
                                            }
                                        }

                                        if (values[6, 1] != null && values[6, 2] != null)
                                        {
                                            if (Convert.ToString(values[6, 2]) == "LOD")
                                            {
                                                string lay_temp = Convert.ToString(values[6, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_lod.Items.Clear();
                                                comboBox_layer_lod.Items.Add(lay_temp);
                                                comboBox_layer_lod.SelectedIndex = 0;
                                            }
                                        }
                                    }
                                }


                                for (int i = 1; i <= Workbook1.Worksheets.Count; ++i)
                                {
                                    Worksheet W1 = Workbook1.Worksheets[i];



                                    if (W1.Name == workspace_library)
                                    {
                                        primary_workspace_name = "";
                                        dt_library = build_dt_library_from_excel(W1);
                                        fill_library_comboboxes(dt_library);
                                    }
                                }

                                attach_dt_library_to_datagridview();

                                Workbook1.Close();

                                if (Excel1.Workbooks.Count == 0)
                                {
                                    Excel1.Quit();
                                }
                                else
                                {
                                    Excel1.Visible = true;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                System.Windows.Forms.MessageBox.Show(ex.Message);
                            }
                            finally
                            {
                                if (Workbook1 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(Workbook1);

                            }

                            if (Excel1 != null && Excel1.Workbooks.Count == 0)
                            {
                                System.Runtime.InteropServices.Marshal.ReleaseComObject(Excel1);
                            }





                        }
                        catch (System.Exception ex)
                        {
                            System.Windows.Forms.MessageBox.Show(ex.Message);
                        }

                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            set_enable_true();
        }
        private void attach_dt_library_to_datagridview()
        {
            if (dt_library != null)
            {

                int cell_size = 45;
                dataGridView_library.DataSource = dt_library;
                dataGridView_library.Columns[lib_name_column].Width = 460;
                dataGridView_library.Columns[wksp_atws_left_column].Width = cell_size;
                dataGridView_library.Columns[wksp_tws_left_column].Width = cell_size;
                dataGridView_library.Columns[wksp_perm_left_column].Width = cell_size;
                dataGridView_library.Columns[wksp_cl_column].Width = 25;
                dataGridView_library.Columns[wksp_perm_right_column].Width = cell_size;
                dataGridView_library.Columns[wksp_tws_right_column].Width = cell_size;
                dataGridView_library.Columns[wksp_atws_right_column].Width = cell_size;

                dataGridView_library.Columns[lib_name_column].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
                dataGridView_library.Columns[wksp_cl_column].DefaultCellStyle.BackColor = Color.FromArgb(0, 122, 204);
                dataGridView_library.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_library.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
                dataGridView_library.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                Padding newpadding = new Padding(4, 0, 0, 0);
                dataGridView_library.ColumnHeadersDefaultCellStyle.Padding = newpadding;
                dataGridView_library.RowHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_library.DefaultCellStyle.BackColor = Color.FromArgb(51, 51, 55);
                dataGridView_library.DefaultCellStyle.ForeColor = Color.White;
                dataGridView_library.EnableHeadersVisualStyles = false;
            }
            else
            {
                dataGridView_library.DataSource = null;
            }

        }
        private System.Data.DataTable Build_workspace_library_from_excel(Microsoft.Office.Interop.Excel.Worksheet W1, int Start_row)
        {

            System.Data.DataTable dt1 = new System.Data.DataTable();

            dt1.Columns.Add(mmid_column, typeof(string));
            dt1.Columns.Add(lib_name_column, typeof(string));
            dt1.Columns.Add(wksp_atws_left_column, typeof(double));
            dt1.Columns.Add(wksp_tws_left_column, typeof(double));
            dt1.Columns.Add(wksp_perm_left_column, typeof(double));
            dt1.Columns.Add(wksp_cl_column, typeof(string));
            dt1.Columns.Add(wksp_perm_right_column, typeof(double));
            dt1.Columns.Add(wksp_tws_right_column, typeof(double));
            dt1.Columns.Add(wksp_atws_right_column, typeof(double));

            string Col1 = "B";

            Range range2 = W1.Range[Col1 + Start_row.ToString() + ":" + Col1 + "30000"];
            object[,] values2 = new object[30000, 1];
            values2 = range2.Value2;


            bool is_data = false;
            for (int i = 1; i <= values2.Length; ++i)
            {
                object Valoare2 = values2[i, 1];
                if (Valoare2 != null)
                {
                    dt1.Rows.Add();
                    is_data = true;
                }
                else
                {
                    i = values2.Length + 1;
                }
            }


            if (is_data == false)
            {
                return null;
            }

            int NrR = dt1.Rows.Count;
            int NrC = dt1.Columns.Count;



            Range range1 = W1.Range[W1.Cells[Start_row, 1], W1.Cells[NrR + Start_row - 1, NrC]];

            object[,] values = new object[NrR - 1, NrC - 1];

            values = range1.Value2;

            for (int i = 0; i < dt1.Rows.Count; ++i)
            {
                for (int j = 0; j < dt1.Columns.Count; ++j)
                {
                    object Valoare = values[i + 1, j + 1];
                    if (Valoare == null) Valoare = DBNull.Value;
                    dt1.Rows[i][j] = Valoare;
                }
            }

            dt1.Columns.Remove(mmid_column);




            client1 = W1.Range["B1"].Value2;
            project1 = W1.Range["B2"].Value2;
            textBox_project.Text = project1;
            textBox_client_name.Text = client1;

            return dt1;

        }

        private void attach_od_to_atws(List<ObjectId> lista_od_atws_object_id, List<string> lista_od_atws_justif)
        {
            if (checkBox_use_od.Checked == false) return;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
            {
                if (lista_od_atws_object_id.Count > 0)
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;



                    List<string> lista_field_name = Functions.get_object_data_table_field_names(Tables1, comboBox_atws_od_name.Text);

                    if (lista_field_name == null || lista_field_name.Count == 0 || lista_field_name.Contains(comboBox_atws_od_field.Text) == false)
                    {
                        MessageBox.Show("Issue with ATWS data table found in the drawing");
                        set_enable_true();
                        return;
                    }

                    List<Autodesk.Gis.Map.Constants.DataType> lista_types = Functions.get_object_data_table_data_types(Tables1, comboBox_atws_od_name.Text);

                    for (int i = 0; i < lista_od_atws_object_id.Count; ++i)
                    {

                        Polyline atws1 = Trans1.GetObject(lista_od_atws_object_id[i], OpenMode.ForWrite) as Polyline;

                        List<object> lista_val = new List<object>();

                        for (int k = 0; k < lista_field_name.Count; ++k)
                        {
                            if (lista_field_name[k] == comboBox_atws_od_field.Text)
                            {
                                if (lista_types[k] == Autodesk.Gis.Map.Constants.DataType.Character)
                                {
                                    lista_val.Add(lista_od_atws_justif[i]);
                                }
                                else
                                {
                                    MessageBox.Show("The Object Data field " + comboBox_atws_od_field.Text + " is not defined as character field.\r\nPlease make sure you selected the correct field.\r\nOperation aborted");
                                    Entity ent1 = Trans1.GetObject(lista_od_atws_object_id[i], OpenMode.ForWrite) as Entity;
                                    ent1.Erase();
                                    Trans1.Commit();
                                    set_enable_true();
                                    return;
                                }
                            }
                            else if (lista_field_name[k] == nume_field_handle)
                            {
                                lista_val.Add(lista_od_atws_object_id[i].Handle.Value.ToString());
                            }
                            else
                            {
                                lista_val.Add(null);
                            }
                        }
                        Functions.Populate_object_data_table_from_objectid(lista_od_atws_object_id[i], comboBox_atws_od_name.Text, lista_val, lista_types);
                    }
                }
                Trans1.Commit();
            }

        }
        private System.Data.DataTable get_dt_corridor_structure()
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(tws_sta1_column, typeof(double));
            dt1.Columns.Add(tws_sta2_column, typeof(double));
            dt1.Columns.Add(col_corridor_name, typeof(string));
            dt1.Columns.Add(tws_side_column, typeof(string));
            dt1.Columns.Add(tws_primary_column, typeof(bool));
            dt1.Columns.Add(tws_modified_column, typeof(bool));

            return dt1;

        }
        private System.Data.DataTable get_dt_library_structure()
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();

            dt1.Columns.Add(lib_name_column, typeof(string));
            dt1.Columns.Add(wksp_atws_left_column, typeof(double));
            dt1.Columns.Add(wksp_tws_left_column, typeof(double));
            dt1.Columns.Add(wksp_perm_left_column, typeof(double));
            dt1.Columns.Add(wksp_cl_column, typeof(string));
            dt1.Columns.Add(wksp_perm_right_column, typeof(double));
            dt1.Columns.Add(wksp_tws_right_column, typeof(double));
            dt1.Columns.Add(wksp_atws_right_column, typeof(double));

            return dt1;

        }
        private System.Data.DataTable get_dt_atws_structure()
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(atws_width_column, typeof(double));
            dt1.Columns.Add(atws_length_column, typeof(double));
            dt1.Columns.Add(atws_working_side_column, typeof(string));
            dt1.Columns.Add(atws_type_column, typeof(string));
            dt1.Columns.Add(atws_area_column, typeof(double));
            dt1.Columns.Add(atws_justification_column, typeof(string));
            dt1.Columns.Add(atws_sta1_column, typeof(double));
            dt1.Columns.Add(atws_sta2_column, typeof(double));
            dt1.Columns.Add(atws_sta1_orig_column, typeof(double));
            dt1.Columns.Add(atws_sta2_orig_column, typeof(double));
            dt1.Columns.Add(atws_source_column, typeof(string));
            dt1.Columns.Add(atws_handle_column, typeof(string));
            dt1.Columns.Add(atws_abutter_column, typeof(string));
            dt1.Columns.Add(atws_handle0_column, typeof(string));

            return dt1;
        }



        private System.Data.DataTable get_dt_erase_structure()
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(col_dwg, typeof(string));
            dt1.Columns.Add(col_objid, typeof(ObjectId));
            dt1.Columns.Add(col_layer, typeof(string));


            return dt1;
        }

        public void delete_existing_linework()
        {
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            string dwg1 = ThisDrawing.Database.OriginalFileName;

            if (dt_erase != null && dt_erase.Rows.Count > 0)
            {
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;
                        for (int i = dt_erase.Rows.Count - 1; i >= 0; --i)
                        {
                            if (dt_erase.Rows[i][col_dwg] != DBNull.Value)
                            {
                                string dwg2 = Convert.ToString(dt_erase.Rows[i][col_dwg]);
                                if (dwg1 == dwg2)
                                {
                                    ObjectId id1 = ObjectId.Null;

                                    if (dt_erase.Rows[i][col_objid] != DBNull.Value)
                                    {
                                        id1 = (ObjectId)dt_erase.Rows[i][col_objid];
                                    }
                                    if (id1 != ObjectId.Null && id1.IsErased == false)
                                    {
                                        Curve curve1 = Trans1.GetObject(id1, OpenMode.ForWrite) as Curve;
                                        if (curve1 != null)
                                        {
                                            curve1.Erase();
                                        }

                                    }
                                    dt_erase.Rows[i].Delete();

                                }

                            }

                        }
                        Trans1.Commit();
                    }
                }
            }



        }
        private void delete_existing_stationing()
        {

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            set_enable_false();
            using (DocumentLock lock1 = ThisDrawing.LockDocument())
            {
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;
                    foreach (ObjectId id1 in BTrecord)
                    {
                        Entity ent1 = Trans1.GetObject(id1, OpenMode.ForRead) as Entity;
                        if (ent1 != null)
                        {
                            if (ent1.Layer == layer_stationing)
                            {
                                ent1.UpgradeOpen();
                                ent1.Erase();
                            }
                        }
                    }
                    Trans1.Commit();
                }
            }

        }
        private void attach_dt_ws_to_datagridview(System.Data.DataTable dt1)
        {
            if (dt1 != null && dt1.Rows.Count > 0)
            {
                int cell_size = 75;
                dataGridView_ws_data.DataSource = dt1;
                dataGridView_ws_data.Columns[atws_sta1_column].Width = cell_size;
                dataGridView_ws_data.Columns[atws_sta2_column].Width = cell_size;
                dataGridView_ws_data.Columns[col_corridor_name].Width = 450;
                dataGridView_ws_data.Columns[tws_side_column].Width = cell_size;
                dataGridView_ws_data.Columns[tws_primary_column].Width = 2;
                dataGridView_ws_data.Columns[tws_modified_column].Width = 2;
                dataGridView_ws_data.Columns[col_corridor_name].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
                dataGridView_ws_data.Columns[tws_primary_column].DefaultCellStyle.BackColor = Color.FromArgb(0, 122, 204);
                dataGridView_ws_data.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_ws_data.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
                dataGridView_ws_data.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                Padding newpadding = new Padding(4, 0, 0, 0);
                dataGridView_ws_data.ColumnHeadersDefaultCellStyle.Padding = newpadding;
                dataGridView_ws_data.RowHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_ws_data.DefaultCellStyle.BackColor = Color.FromArgb(51, 51, 55);
                dataGridView_ws_data.DefaultCellStyle.ForeColor = Color.White;

                dataGridView_ws_data.EnableHeadersVisualStyles = false;
            }
            else
            {
                dataGridView_ws_data.DataSource = null;
            }
        }
        private void attach_dt_atws_to_datagridview(System.Data.DataTable dt1)
        {
            if (dt1 != null && dt1.Rows.Count > 0)
            {
                dataGridView_atws_data.DataSource = dt1;
                dataGridView_atws_data.Columns[atws_width_column].Width = 50;
                dataGridView_atws_data.Columns[atws_length_column].Width = 60;
                dataGridView_atws_data.Columns[atws_working_side_column].Width = 70;
                dataGridView_atws_data.Columns[atws_type_column].Width = 150;
                dataGridView_atws_data.Columns[atws_justification_column].Width = 250;
                dataGridView_atws_data.Columns[atws_justification_column].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
                dataGridView_atws_data.Columns[atws_sta1_column].Width = 80;
                dataGridView_atws_data.Columns[atws_sta2_column].Width = 80;
                dataGridView_atws_data.Columns[atws_source_column].Width = 100;
                dataGridView_atws_data.Columns[atws_handle_column].Width = 50;

                dataGridView_atws_data.Columns[atws_sta1_orig_column].Width = 50;
                dataGridView_atws_data.Columns[atws_sta2_orig_column].Width = 50;
                dataGridView_atws_data.Columns[atws_area_column].Width = 50;

                dataGridView_atws_data.Columns[atws_sta1_orig_column].DisplayIndex = dataGridView_atws_data.Columns.Count - 1;
                dataGridView_atws_data.Columns[atws_sta2_orig_column].DisplayIndex = dataGridView_atws_data.Columns.Count - 1;
                dataGridView_atws_data.Columns[atws_area_column].DisplayIndex = dataGridView_atws_data.Columns.Count - 1;

                dataGridView_atws_data.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_atws_data.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
                dataGridView_atws_data.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                Padding newpadding = new Padding(4, 0, 0, 0);
                dataGridView_atws_data.ColumnHeadersDefaultCellStyle.Padding = newpadding;
                dataGridView_atws_data.RowHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_atws_data.DefaultCellStyle.BackColor = Color.FromArgb(51, 51, 55);
                dataGridView_atws_data.DefaultCellStyle.ForeColor = Color.White;
                dataGridView_atws_data.EnableHeadersVisualStyles = false;
            }
            else
            {
                dataGridView_atws_data.DataSource = null;
            }
        }

        private void button_add_row_to_library_Click(object sender, EventArgs e)
        {

            if (dt_library == null)
            {
                dt_library = build_dt_library_structure();
            }
            else
            {
                dt_library = dataGridView_library.DataSource as System.Data.DataTable;
            }

            dt_library.Rows.Add();

            coridor_index = dt_library.Rows.Count; //combobox 1st item is ""

            attach_dt_library_to_datagridview();
        }
        private System.Data.DataTable build_dt_library_structure()
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(lib_name_column, typeof(string));
            dt1.Columns.Add(wksp_atws_left_column, typeof(double));
            dt1.Columns.Add(wksp_tws_left_column, typeof(double));
            dt1.Columns.Add(wksp_perm_left_column, typeof(double));
            dt1.Columns.Add(wksp_cl_column, typeof(string));
            dt1.Columns.Add(wksp_perm_right_column, typeof(double));
            dt1.Columns.Add(wksp_tws_right_column, typeof(double));
            dt1.Columns.Add(wksp_atws_right_column, typeof(double));
            return dt1;
        }
        private void set_label_workspace_design(string path1)
        {
            if (System.IO.File.Exists(path1) == true)
            {
                path1 = System.IO.Path.GetFileName(path1);
                label_project_data.Text = "Project Data:";
                label_workspace_design.Text = path1;
            }
            else
            {
                label_project_data.Text = "Project Data";
                label_workspace_design.Text = "";
            }

        }
        private void fill_library_comboboxes(System.Data.DataTable dt1)
        {


            if (dt1 != null && dt1.Rows.Count > 0)
            {
                int idx = -1;
                if (comboBox_current_ws.Items.Count > 0)
                {
                    idx = comboBox_current_ws.SelectedIndex;
                }

                comboBox_current_ws.Items.Clear();
                comboBox_primary.Items.Clear();

                comboBox_current_ws.Items.Add("");
                for (int i = 0; i < dt1.Rows.Count; ++i)
                {
                    if (dt1.Rows[i][lib_name_column] != DBNull.Value)
                    {
                        string wn = Convert.ToString(dt1.Rows[i][lib_name_column]);
                        comboBox_current_ws.Items.Add(wn);
                    }
                }
                if (idx > -1 && comboBox_current_ws.Items.Count >= idx + 1)
                {
                    comboBox_current_ws.SelectedIndex = idx;
                }



                for (int i = 0; i < dt1.Rows.Count; ++i)
                {
                    if (dt1.Rows[i][lib_name_column] != DBNull.Value)
                    {
                        string wn = Convert.ToString(dt1.Rows[i][lib_name_column]);
                        comboBox_primary.Items.Add(wn);
                    }
                }

                if (comboBox_primary.Items.Contains(primary_workspace_name) == true)
                {
                    comboBox_primary.SelectedIndex = comboBox_primary.Items.IndexOf(primary_workspace_name);
                }
                else
                {
                    comboBox_primary.SelectedIndex = 0;
                    primary_workspace_name = comboBox_primary.Text;
                }

            }
            else
            {
                comboBox_current_ws.Items.Clear();
                comboBox_primary.Items.Clear();
            }
        }
        private void comboBox_layer_DropDown(object sender, EventArgs e)
        {

            try
            {
                set_enable_false();
                ComboBox combo1 = sender as ComboBox;
                if (combo1 != null)
                {
                    Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

                    using (Autodesk.AutoCAD.ApplicationServices.DocumentLock Lock1 = ThisDrawing.LockDocument())
                    {
                        using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                        {
                            Functions.Incarca_existing_layers_to_combobox(combo1);
                            Trans1.Dispose();
                        }
                    }
                }

            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            set_enable_true();
        }
        private void Button_zoom_to_ws_area_Click(object sender, EventArgs e)
        {
            try
            {
                if (dt_cl != null && dt_cl.Rows.Count > 0 && dt_corridor != null && dt_corridor.Rows.Count > 0)
                {
                    set_enable_false();
                    int row_idx = dataGridView_ws_data.SelectedCells[0].RowIndex;
                    if (row_idx >= 0)
                    {
                        double sta1 = Convert.ToDouble(dt_corridor.Rows[row_idx][atws_sta1_column]);
                        double sta2 = Convert.ToDouble(dt_corridor.Rows[row_idx][atws_sta2_column]);
                        #region poly_dtcl
                        Polyline poly_dtcl = new Polyline();
                        for (int k = 0; k < dt_cl.Rows.Count; ++k)
                        {
                            if (dt_cl.Rows[k][0] == DBNull.Value || dt_cl.Rows[k][1] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_cl.Rows[k][1])) == false)
                            {
                                MessageBox.Show("issues found on centerline data\r\noperation aborted");
                                set_enable_true();
                                return;
                            }
                            poly_dtcl.AddVertexAt(k, (Point2d)dt_cl.Rows[k][0], 0, 0, 0);
                        }
                        poly_dtcl.Elevation = 0;
                        #endregion
                        Point3d pt1 = poly_dtcl.GetPointAtDist(sta1);
                        Point3d pt2 = poly_dtcl.GetPointAtDist(sta2);
                        if (pt1.X > pt2.X)
                        {
                            Point3d t = pt1;
                            pt1 = pt2;
                            pt2 = t;
                        }
                        zoom_to_selected_ws(pt1, pt2);
                    }
                }
            }
            catch (System.Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            set_enable_true();
        }
        private void zoom_to_selected_ws(Point3d point_left, Point3d point_right)
        {
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            using (Autodesk.AutoCAD.ApplicationServices.DocumentLock Lock1 = ThisDrawing.LockDocument())
            {
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.AutoCAD.DatabaseServices.BlockTable BlockTable_data1 = (BlockTable)ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead);
                    Autodesk.AutoCAD.DatabaseServices.BlockTableRecord BTrecord = (BlockTableRecord)Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForWrite);

                    using (Autodesk.AutoCAD.GraphicsSystem.Manager GraphicsManager = ThisDrawing.GraphicsManager)
                    {
                        int Cvport = Convert.ToInt32(Autodesk.AutoCAD.ApplicationServices.Application.GetSystemVariable("CVPORT"));
                        //from here 2015 dlls:
                        Autodesk.AutoCAD.GraphicsSystem.KernelDescriptor kd = new Autodesk.AutoCAD.GraphicsSystem.KernelDescriptor();
                        kd.addRequirement(Autodesk.AutoCAD.UniqueString.Intern("3D Drawing"));
                        Autodesk.AutoCAD.GraphicsSystem.View view = GraphicsManager.ObtainAcGsView(Cvport, kd);
                        // to here 2015 dlls
                        //from here 2013 dlls:
                        //Autodesk.AutoCAD.GraphicsSystem.View view = GraphicsManager.GetGsView(Cvport, true);
                        // to here 2013 dlls
                        if (view != null)
                        {
                            using (view)
                            {
                                view.ZoomExtents(point_left, point_right);
                                view.Zoom(0.95);//<--optional 
                                GraphicsManager.SetViewportFromView(Cvport, view, true, true, false);
                            }
                        }
                        Trans1.Commit();
                    }
                }
            }
        }
        private void button_load_config_Click(object sender, EventArgs e)
        {
            try
            {
                using (OpenFileDialog fbd = new OpenFileDialog())
                {
                    fbd.Multiselect = false;
                    fbd.Filter = "Excel files (*.xlsx)|*.xlsx";
                    if (fbd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        try
                        {
                            bool excel_is_opened = false;
                            Microsoft.Office.Interop.Excel.Application Excel1 = null;
                            Microsoft.Office.Interop.Excel.Workbook Workbook1 = null;
                            design_file = fbd.FileName;
                            try
                            {
                                Excel1 = (Microsoft.Office.Interop.Excel.Application)System.Runtime.InteropServices.Marshal.GetActiveObject("Excel.Application");
                                foreach (Microsoft.Office.Interop.Excel.Workbook Workbook2 in Excel1.Workbooks)
                                {
                                    if (Workbook2.FullName.ToLower() == design_file.ToLower())
                                    {
                                        Workbook1 = Workbook2;
                                        excel_is_opened = true;
                                    }
                                }
                            }
                            catch (System.Exception ex)
                            {
                                Excel1 = new Microsoft.Office.Interop.Excel.Application();
                            }

                            if (Functions.is_dan_popescu() == false)
                            {
                                if (Excel1.Workbooks.Count == 0)
                                {
                                    Excel1.Visible = false;
                                }
                                else
                                {
                                    Excel1.Visible = true;
                                }
                            }
                            else
                            {
                                Excel1.Visible = true;
                            }

                            if (Workbook1 == null)
                            {
                                Workbook1 = Excel1.Workbooks.Open(fbd.FileName);
                            }

                            try
                            {
                                for (int i = 1; i <= Workbook1.Worksheets.Count; ++i)
                                {
                                    Worksheet W1 = Workbook1.Worksheets[i];
                                    if (W1.Name == workspace_data)
                                    {
                                        dt_corridor = build_dt_ws_from_config_excel(W1);
                                    }
                                    if (W1.Name == atws_data_tab)
                                    {
                                        dt_atws = build_dt_atws_from_config_excel(W1);
                                    }
                                    if (W1.Name == ar_data_tab)
                                    {
                                        dt_ar = ar.build_dt_ar_from_config_excel(W1);
                                    }
                                    if (W1.Name == stg_data_tab)
                                    {
                                        dt_stg = build_dt_stg_from_config_excel(W1);
                                    }

                                    if (W1.Name == centerline_data)
                                    {
                                        dt_cl = build_dt_cl_from_config_excel(W1);

                                        if (dt_cl != null && dt_cl.Rows.Count > 1)
                                        {
                                            labelCL_loaded.Visible = true;
                                            labelCL_not_loaded.Visible = false;
                                        }
                                        else
                                        {
                                            labelCL_loaded.Visible = false;
                                            labelCL_not_loaded.Visible = true;
                                            dt_cl = null;
                                        }
                                    }

                                    if (W1.Name == "General")
                                    {
                                        client1 = Convert.ToString(W1.Range["B1"].Value2);
                                        project1 = Convert.ToString(W1.Range["B2"].Value2);
                                        string tabla1 = Convert.ToString(W1.Range["B3"].Value2);
                                        string field1 = Convert.ToString(W1.Range["B4"].Value2);
                                        if (client1 != null) textBox_client_name.Text = client1;
                                        if (project1 != null) textBox_project.Text = project1;
                                        if (tabla1 != null && tabla1 != "")
                                        {
                                            if (comboBox_atws_od_name.Items.Contains(tabla1) == false)
                                            {
                                                comboBox_atws_od_name.Items.Add(tabla1);
                                            }

                                            comboBox_atws_od_name.SelectedIndex = comboBox_atws_od_name.Items.IndexOf(tabla1);
                                        }
                                        if (field1 != null && field1 != "")
                                        {
                                            if (comboBox_atws_od_field.Items.Contains(field1) == false)
                                            {
                                                comboBox_atws_od_field.Items.Add(field1);
                                            }
                                            comboBox_atws_od_field.SelectedIndex = comboBox_atws_od_field.Items.IndexOf(field1);
                                        }

                                        string last_col = Functions.get_excel_column_letter(101);
                                        comboBox_atws_preset.Items.Clear();
                                        comboBox_atws_preset.Items.Add("");
                                        Range range5 = W1.Range["B5:" + last_col + "5"];
                                        object[,] values5 = new object[1, 100];
                                        values5 = range5.Value2;
                                        for (int k = 1; k <= 100; ++k)
                                        {
                                            if (values5[1, k] != null)
                                            {
                                                comboBox_atws_preset.Items.Add(Convert.ToString(values5[1, k]));
                                            }
                                            else
                                            {
                                                k = 101;
                                            }
                                        }
                                        string tabla2 = W1.Range["B6"].Value2;
                                        string field2 = W1.Range["B7"].Value2;
                                        if (tabla2 != null && tabla2 != "")
                                        {
                                            if (comboBox_ar_od_name.Items.Contains(tabla2) == false)
                                            {
                                                comboBox_ar_od_name.Items.Add(tabla2);
                                            }
                                            comboBox_ar_od_name.SelectedIndex = comboBox_ar_od_name.Items.IndexOf(tabla2);
                                        }
                                        if (field2 != null && field2 != "")
                                        {
                                            if (comboBox_ar_od_field.Items.Contains(field2) == false)
                                            {
                                                comboBox_ar_od_field.Items.Add(field2);
                                            }
                                            comboBox_ar_od_field.SelectedIndex = comboBox_ar_od_field.Items.IndexOf(field2);
                                        }

                                        string tabla3 = W1.Range["B8"].Value2;
                                        string field3 = W1.Range["B9"].Value2;
                                        if (tabla3 != null && tabla3 != "")
                                        {
                                            if (comboBox_stg_od_name.Items.Contains(tabla3) == false)
                                            {
                                                comboBox_stg_od_name.Items.Add(tabla3);
                                            }
                                            comboBox_stg_od_name.SelectedIndex = comboBox_stg_od_name.Items.IndexOf(tabla3);
                                        }
                                        if (field3 != null && field3 != "")
                                        {
                                            if (comboBox_stg_od_field.Items.Contains(field3) == false)
                                            {
                                                comboBox_stg_od_field.Items.Add(field3);
                                            }
                                            comboBox_stg_od_field.SelectedIndex = comboBox_stg_od_field.Items.IndexOf(field3);
                                        }

                                        primary_workspace_name = W1.Range["B10"].Value2;

                                        comboBox_atws_justif.Items.Clear();
                                        comboBox_atws_justif.Items.Add("");
                                        Range range11 = W1.Range["B11:" + last_col + "11"];
                                        object[,] values11 = new object[1, 100];
                                        values11 = range11.Value2;
                                        for (int k = 1; k <= 100; ++k)
                                        {
                                            if (values11[1, k] != null)
                                            {
                                                comboBox_atws_justif.Items.Add(Convert.ToString(values11[1, k]));
                                            }
                                            else
                                            {
                                                k = 101;
                                            }
                                        }
                                    }

                                    if (W1.Name == "Layers")
                                    {
                                        Range range1 = W1.Range["A2:B8"];
                                        object[,] values = new object[7, 2];
                                        values = range1.Value2;
                                        if (values[1, 1] != null && values[1, 2] != null)
                                        {
                                            if (Convert.ToString(values[1, 2]) == "PERMANENT EASEMENT")
                                            {
                                                string lay_perm = Convert.ToString(values[1, 1]);
                                                if (lay_perm == "")
                                                {
                                                    lay_perm = "0";
                                                }
                                                comboBox_layer_perm.Items.Clear();
                                                comboBox_layer_perm.Items.Add(lay_perm);
                                                comboBox_layer_perm.SelectedIndex = 0;
                                            }
                                        }
                                        if (values[2, 1] != null && values[2, 2] != null)
                                        {
                                            if (Convert.ToString(values[2, 2]) == "TEMPORARY WORKSPACE")
                                            {
                                                string lay_temp = Convert.ToString(values[2, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_tws.Items.Clear();
                                                comboBox_layer_tws.Items.Add(lay_temp);
                                                comboBox_layer_tws.SelectedIndex = 0;
                                            }
                                        }
                                        if (values[3, 1] != null && values[3, 2] != null)
                                        {
                                            if (Convert.ToString(values[3, 2]) == "ADDITIONAL TEMPORARY WORKSPACE")
                                            {
                                                string lay_temp = Convert.ToString(values[3, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_atws.Items.Clear();
                                                comboBox_layer_atws.Items.Add(lay_temp);
                                                comboBox_layer_atws.SelectedIndex = 0;
                                            }
                                        }
                                        if (values[4, 1] != null && values[4, 2] != null)
                                        {
                                            if (Convert.ToString(values[4, 2]) == "ACCESS ROADS")
                                            {
                                                string lay_temp = Convert.ToString(values[4, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_ar.Items.Clear();
                                                comboBox_layer_ar.Items.Add(lay_temp);
                                                comboBox_layer_ar.SelectedIndex = 0;
                                            }
                                        }

                                        if (values[5, 1] != null && values[5, 2] != null)
                                        {
                                            if (Convert.ToString(values[5, 2]) == "STAGING AREA")
                                            {
                                                string lay_temp = Convert.ToString(values[5, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_stg.Items.Clear();
                                                comboBox_layer_stg.Items.Add(lay_temp);
                                                comboBox_layer_stg.SelectedIndex = 0;
                                            }
                                        }

                                        if (values[6, 1] != null && values[6, 2] != null)
                                        {
                                            if (Convert.ToString(values[6, 2]) == "LOD")
                                            {
                                                string lay_temp = Convert.ToString(values[6, 1]);
                                                if (lay_temp == "")
                                                {
                                                    lay_temp = "0";
                                                }
                                                comboBox_layer_lod.Items.Clear();
                                                comboBox_layer_lod.Items.Add(lay_temp);
                                                comboBox_layer_lod.SelectedIndex = 0;
                                            }
                                        }

                                        if (values[7, 1] != null && values[7, 2] != null)
                                        {
                                            if (Convert.ToString(values[7, 2]) == "PERMANENT PROPOSED EASEMENT")
                                            {
                                                string lay_perm = Convert.ToString(values[7, 1]);
                                                if (lay_perm == "")
                                                {
                                                    lay_perm = "0";
                                                }
                                                comboBox_layer_proposed_perm.Items.Clear();
                                                comboBox_layer_proposed_perm.Items.Add(lay_perm);
                                                comboBox_layer_proposed_perm.SelectedIndex = 0;
                                            }
                                        }
                                    }
                                }

                                for (int i = 1; i <= Workbook1.Worksheets.Count; ++i)
                                {
                                    Worksheet W1 = Workbook1.Worksheets[i];
                                    if (W1.Name == atws_geometry_tab)
                                    {
                                        build_dt_manual_atws_from_config_excel(W1);
                                    }

                                    if (W1.Name == lod_atws_geometry_tab)
                                    {
                                        build_dt_lod_atws_from_config_excel(W1);
                                    }

                                    if (W1.Name == ar_perm_left_tab)
                                    {
                                        build_dt_ar_perm_left_from_config_excel(W1);
                                    }

                                    if (W1.Name == ar_perm_right_tab)
                                    {
                                        build_dt_ar_perm_right_from_config_excel(W1);
                                    }

                                    if (W1.Name == ar_temp_tab)
                                    {
                                        build_dt_ar_temp_from_config_excel(W1);
                                    }

                                    if (W1.Name == stg_geometry)
                                    {
                                        build_dt_manual_stg_from_config_excel(W1);
                                    }

                                    if (W1.Name == atws_side1_tab)
                                    {
                                        build_dt_atws_side1_from_config_excel(W1);
                                    }

                                    if (W1.Name == atws_side2_tab)
                                    {
                                        build_dt_atws_side2_from_config_excel(W1);
                                    }

                                    if (W1.Name == cor_side_tab)
                                    {
                                        build_dt_sides_from_config_excel(W1);
                                    }


                                    if (W1.Name == proposed_permanent_tab)
                                    {
                                        build_dt_proposed_perm_easement_from_config_excel(W1);
                                    }

                                    if (W1.Name == perm_poly_tab)
                                    {
                                        dt_poly_perm = build_dt_poly_perm_from_config_excel(W1);
                                    }

                                    if (W1.Name == tws_poly_tab)
                                    {
                                        dt_poly_tws = build_dt_poly_tws_from_config_excel(W1);
                                    }

                                    if (W1.Name == workspace_library)
                                    {
                                        dt_library = build_dt_library_from_excel(W1);
                                        if (primary_workspace_name == "" || primary_workspace_name == null) primary_workspace_name = "XXX";
                                        if (dt_library != null && dt_library.Rows.Count > 0)
                                        {
                                            primary_workspace_name = Convert.ToString(dt_library.Rows[0][lib_name_column]);
                                        }

                                        fill_library_comboboxes(dt_library);
                                    }
                                }

                                if (excel_is_opened == false)
                                {
                                    Workbook1.Close();
                                    if (Excel1.Workbooks.Count == 0)
                                    {
                                        Excel1.Quit();
                                    }
                                    else
                                    {
                                        Excel1.Visible = true;
                                    }
                                }

                            }
                            catch (System.Exception ex)
                            {
                                System.Windows.Forms.MessageBox.Show(ex.Message);
                            }
                            finally
                            {
                                if (Workbook1 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(Workbook1);

                            }

                            if (Excel1 != null && Excel1.Workbooks.Count == 0)
                            {
                                System.Runtime.InteropServices.Marshal.ReleaseComObject(Excel1);
                            }
                            delete_columns_not_found_in_dt_atws();
                            attach_dt_ws_to_datagridview(dt_corridor);
                            attach_dt_atws_to_datagridview(dt_atws);
                            ar.attach_dt_ar_to_datagridview(dt_ar, dataGridView_ar_data);
                            attach_dt_stg_to_datagridview(dt_stg);
                            attach_dt_library_to_datagridview();
                            set_label_workspace_design(design_file);
                            attach_dt_perm_proposed_to_datagridview(dt_prop_perm);


                            calculate_LOD();

                            build_dt_erase_from_current_dwg();


                        }
                        catch (System.Exception ex)
                        {
                            System.Windows.Forms.MessageBox.Show(ex.Message);
                        }

                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }


        private void build_dt_erase_from_current_dwg()
        {


            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            string current_dwg = ThisDrawing.Database.OriginalFileName;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();

            List<string> lista1 = new List<string>();
            lista1.Add(comboBox_layer_perm.Text);
            lista1.Add(comboBox_layer_tws.Text);
            lista1.Add(comboBox_layer_atws.Text);
            lista1.Add(comboBox_layer_ar.Text);
            lista1.Add(comboBox_layer_stg.Text);
            lista1.Add(comboBox_layer_lod.Text);
            lista1.Add(comboBox_layer_proposed_perm.Text);

            try
            {
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;
                        foreach (ObjectId id1 in BTrecord)
                        {
                            Polyline poly1 = Trans1.GetObject(id1, OpenMode.ForRead) as Polyline;
                            if (poly1 != null)
                            {
                                if (lista1.Contains(poly1.Layer) == true)
                                {
                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = id1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = poly1.Layer;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = current_dwg;
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
        }

        private System.Data.DataTable build_dt_ws_from_config_excel(Worksheet W1)
        {
            System.Data.DataTable dt1 = get_dt_corridor_structure();
            string Col1 = "A";

            Range range2 = W1.Range[Col1 + "2:" + Col1 + "30002"];
            object[,] values2 = new object[30000, 1];
            values2 = range2.Value2;

            bool is_data = false;
            for (int i = 1; i <= values2.Length; ++i)
            {
                object Valoare2 = values2[i, 1];
                if (Valoare2 != null)
                {
                    dt1.Rows.Add();
                    is_data = true;
                }
                else
                {
                    i = values2.Length + 1;
                }
            }

            if (is_data == false)
            {
                return null;
            }

            int NrR = dt1.Rows.Count;

            Range range1 = W1.Range["A2:F" + Convert.ToString(NrR + 1)];
            object[,] values = new object[NrR, 6];
            values = range1.Value2;

            for (int i = 0; i < dt1.Rows.Count; ++i)
            {
                for (int j = 0; j < dt1.Columns.Count; ++j)
                {
                    object val = values[i + 1, j + 1];
                    if (val == null) val = DBNull.Value;
                    if (j == 0 || j == 1)
                    {
                        if (val == DBNull.Value || Functions.IsNumeric(Convert.ToString(val)) == false) val = DBNull.Value;
                    }
                    if (j < 4)
                    {
                        dt1.Rows[i][j] = val;

                    }
                    if ((j == 4 || j == 5) && val != DBNull.Value)
                    {
                        if (Convert.ToString(val).ToUpper() == "TRUE" || Convert.ToString(val).ToUpper() == "YES")
                        {
                            dt1.Rows[i][j] = true;
                        }
                        else
                        {
                            dt1.Rows[i][j] = false;
                        }
                    }
                }
            }

            return dt1;
        }
        private System.Data.DataTable build_dt_atws_from_config_excel(Worksheet W1)
        {
            System.Data.DataTable dt1 = get_dt_atws_structure();
            string Col1 = "F";

            Range range2 = W1.Range[Col1 + "2:" + Col1 + "30002"];
            object[,] values2 = new object[30000, 1];
            values2 = range2.Value2;

            bool is_data = false;
            for (int i = 1; i <= values2.Length; ++i)
            {
                object Valoare2 = values2[i, 1];
                if (Valoare2 != null)
                {
                    dt1.Rows.Add();
                    is_data = true;
                }
                else
                {
                    i = values2.Length + 1;
                }
            }

            if (is_data == false)
            {
                return null;
            }

            int NrR = dt1.Rows.Count;

            Range range1 = W1.Range["A2:N" + Convert.ToString(NrR + 1)];
            object[,] values = new object[NrR, 12];
            values = range1.Value2;

            for (int i = 0; i < dt1.Rows.Count; ++i)
            {
                for (int j = 0; j < dt1.Columns.Count; ++j)
                {
                    object val = values[i + 1, j + 1];
                    if (val == null) val = DBNull.Value;

                    dt1.Rows[i][j] = val;
                }
            }

            return dt1;
        }

        private void button_save_config_Click(object sender, EventArgs e)
        {
            bool excel_is_opened = false;
            Microsoft.Office.Interop.Excel.Application Excel1 = null;
            Microsoft.Office.Interop.Excel.Workbook Workbook1 = null;
            Worksheet W3 = null;
            Worksheet W5 = null;
            Worksheet W4 = null;
            Worksheet W2 = null;
            Worksheet W1 = null;
            Worksheet W6 = null;
            Worksheet W8 = null;
            Worksheet W9 = null;
            Worksheet W10 = null;
            Worksheet W11a = null;
            Worksheet W11b = null;
            Worksheet W11c = null;
            Worksheet W12 = null;
            Worksheet W13 = null;
            Worksheet W14 = null;
            Worksheet W15 = null;
            Worksheet W16 = null;
            Worksheet W44 = null;
            Worksheet W20 = null;
            Worksheet W21 = null;

            Worksheet W99 = null;
            client1 = textBox_client_name.Text;
            project1 = textBox_project.Text;

            try
            {
                set_enable_false();

                if ((dt_library != null && dt_library.Rows.Count > 0) || (dt_corridor != null && dt_corridor.Rows.Count > 0) || (dt_cl != null && dt_cl.Rows.Count > 0) ||
                    (dt_lod_left != null && dt_lod_left.Rows.Count > 0) || (dt_lod_right != null && dt_lod_right.Rows.Count > 0) || (dt_atws_manual != null && dt_atws_manual.Rows.Count > 0) ||
                    (dt_atws_lod_manual != null && dt_atws_lod_manual.Rows.Count > 0) || (dt_poly_perm != null && dt_poly_perm.Rows.Count > 0) ||
                    (dt_ar != null && dt_ar.Rows.Count > 0) || (dt_manual_stg != null && dt_manual_stg.Rows.Count > 0) || (dt_stg != null && dt_stg.Rows.Count > 0) ||
                    (dt_sides != null && dt_sides.Rows.Count > 0) || (dt_poly_tws != null && dt_poly_tws.Rows.Count > 0) ||
                    comboBox_layer_ar.Text != "" || comboBox_layer_atws.Text != "" || comboBox_layer_perm.Text != "" || comboBox_layer_stg.Text != "" || comboBox_layer_tws.Text != "" || comboBox_layer_proposed_perm.Text != "")
                {

                    try
                    {
                        Excel1 = (Microsoft.Office.Interop.Excel.Application)System.Runtime.InteropServices.Marshal.GetActiveObject("Excel.Application");
                        foreach (Microsoft.Office.Interop.Excel.Workbook Workbook2 in Excel1.Workbooks)
                        {
                            if (Workbook2.FullName.ToLower() == design_file.ToLower())
                            {
                                Workbook1 = Workbook2;
                                excel_is_opened = true;
                            }

                        }
                    }
                    catch (System.Exception)
                    {
                        Excel1 = new Microsoft.Office.Interop.Excel.Application();
                    }
                    if (Excel1 == null)
                    {
                        set_enable_true();
                        return;
                    }

                    if (Excel1.Workbooks.Count == 0 && Functions.is_dan_popescu() == false)
                    {
                        Excel1.Visible = false;
                    }
                    else
                    {
                        Excel1.Visible = true;
                    }

                    if (design_file == "")
                    {
                        SaveFileDialog Save_dlg = new SaveFileDialog();
                        Save_dlg.Filter = "Excel file|*.xlsx";


                        if (Save_dlg.ShowDialog() == DialogResult.OK)
                        {
                            design_file = Save_dlg.FileName;
                            foreach (Microsoft.Office.Interop.Excel.Workbook Workbook2 in Excel1.Workbooks)
                            {
                                if (Workbook2.FullName.ToLower() == design_file.ToLower())
                                {
                                    Workbook1 = Workbook2;
                                    excel_is_opened = true;
                                }
                            }

                            if (System.IO.File.Exists(design_file) == false)
                            {
                                set_label_workspace_design(design_file);
                                Workbook1 = Excel1.Workbooks.Add();
                                Workbook1.SaveAs(design_file);
                            }
                            else
                            {
                                if (MessageBox.Show("are you sure you want to delete\r\n" + Save_dlg.FileName, "overwrite", buttons: MessageBoxButtons.YesNo) == DialogResult.Yes)
                                {
                                    design_file = Save_dlg.FileName;
                                    set_label_workspace_design(design_file);
                                    System.IO.File.Delete(design_file);
                                    Workbook1 = Excel1.Workbooks.Add();
                                    Workbook1.SaveAs(design_file);
                                }
                                else
                                {
                                    design_file = "";
                                    set_label_workspace_design(design_file);
                                    MessageBox.Show("operation canceled");
                                }
                            }
                        }
                    }

                    if (design_file != "" && System.IO.File.Exists(design_file) == true)
                    {
                        if (Workbook1 == null)
                        {
                            Workbook1 = Excel1.Workbooks.Open(design_file);
                        }

                        for (int i = 1; i <= Workbook1.Worksheets.Count; ++i)
                        {
                            if (Workbook1.Worksheets[i].name == "General")
                            {
                                W1 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == "Layers")
                            {
                                W2 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == workspace_library)
                            {
                                W3 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == centerline_data)
                            {
                                W4 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == workspace_data)
                            {
                                W5 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == atws_data_tab)
                            {
                                W6 = Workbook1.Worksheets[i];
                            }

                            if (Workbook1.Worksheets[i].name == atws_geometry_tab)
                            {
                                W8 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == lod_atws_geometry_tab)
                            {
                                W9 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == ar_data_tab)
                            {
                                W10 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == ar_perm_left_tab)
                            {
                                W11a = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == ar_perm_right_tab)
                            {
                                W11b = Workbook1.Worksheets[i];
                            }

                            if (Workbook1.Worksheets[i].name == ar_temp_tab)
                            {
                                W11c = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == stg_data_tab)
                            {
                                W12 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == stg_geometry)
                            {
                                W13 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == atws_side1_tab)
                            {
                                W14 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == atws_side2_tab)
                            {
                                W15 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == cor_side_tab)
                            {
                                W16 = Workbook1.Worksheets[i];
                            }
                            if (Workbook1.Worksheets[i].name == proposed_permanent_tab)
                            {
                                W44 = Workbook1.Worksheets[i];
                            }

                            if (Workbook1.Worksheets[i].name == perm_poly_tab)
                            {
                                W20 = Workbook1.Worksheets[i];
                            }

                            if (Workbook1.Worksheets[i].name == tws_poly_tab)
                            {
                                W21 = Workbook1.Worksheets[i];
                            }

                            if (Workbook1.Worksheets[i].name == "Sheet1")
                            {
                                W99 = Workbook1.Worksheets[i];
                            }
                        }

                        if (W20 == null)
                        {
                            W20 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W20.Name = perm_poly_tab;
                        }

                        if (W21 == null)
                        {
                            W21 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W21.Name = tws_poly_tab;
                        }

                        if (W44 == null)
                        {
                            W44 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W44.Name = proposed_permanent_tab;
                        }

                        if (W16 == null)
                        {
                            W16 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W16.Name = cor_side_tab;
                        }

                        if (W15 == null)
                        {
                            W15 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W15.Name = atws_side2_tab;
                        }
                        if (W14 == null)
                        {
                            W14 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W14.Name = atws_side1_tab;
                        }

                        if (W13 == null)
                        {
                            W13 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W13.Name = stg_geometry;
                        }
                        if (W12 == null)
                        {
                            W12 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W12.Name = stg_data_tab;
                        }

                        if (W11a == null)
                        {
                            W11a = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W11a.Name = ar_perm_left_tab;
                        }
                        if (W11b == null)
                        {
                            W11b = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W11b.Name = ar_perm_right_tab;
                        }
                        if (W11c == null)
                        {
                            W11c = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W11c.Name = ar_temp_tab;
                        }
                        if (W10 == null)
                        {
                            W10 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W10.Name = ar_data_tab;
                        }
                        if (W9 == null)
                        {
                            W9 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W9.Name = lod_atws_geometry_tab;
                        }
                        if (W8 == null)
                        {
                            W8 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W8.Name = atws_geometry_tab;
                        }

                        if (W6 == null)
                        {
                            W6 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W6.Name = atws_data_tab;
                        }
                        if (W5 == null)
                        {
                            W5 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W5.Name = workspace_data;
                        }
                        if (W4 == null)
                        {
                            W4 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W4.Name = centerline_data;
                        }
                        if (W3 == null)
                        {
                            W3 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W3.Name = workspace_library;
                        }
                        if (W2 == null)
                        {
                            W2 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W2.Name = "Layers";
                        }
                        if (W1 == null)
                        {
                            W1 = Workbook1.Worksheets.Add(System.Reflection.Missing.Value, Workbook1.Worksheets[1], System.Reflection.Missing.Value, System.Reflection.Missing.Value);
                            W1.Name = "General";
                        }

                        #region General
                        if (W1 != null)
                        {
                            W1.Range["A1:AX11"].ClearContents();
                            W1.Range["A1:AX11"].ClearFormats();

                            W1.Range["A:B"].ColumnWidth = 50;
                            W1.Range["A1:B9"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W1.Range["A1:B9"].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            Range range1 = W1.Range["A1:A11"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            range1 = W1.Range["B1:B11"];
                            Functions.Color_border_range_inside(range1, 44); //orange
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            W1.Range["A1"].Value2 = "CLIENT";
                            W1.Range["B1"].Value2 = client1;
                            W1.Range["A2"].Value2 = "VERSION";
                            W1.Range["B2"].Value2 = project1;
                            W1.Range["A3"].Value2 = "ATWS OBJECT DATA TABLE NAME";
                            W1.Range["B3"].Value2 = comboBox_atws_od_name.Text;
                            W1.Range["A4"].Value2 = "ATWS OBJECT DATA TABLE FIELD";
                            W1.Range["B4"].Value2 = comboBox_atws_od_field.Text;
                            W1.Range["A5"].Value2 = "ATWS Dimension PRESETS";
                            if (comboBox_atws_preset.Items.Count > 1)
                            {
                                for (int i = 1; i < comboBox_atws_preset.Items.Count; ++i)
                                {
                                    string column1 = Functions.get_excel_column_letter(i + 1);
                                    W1.Range[column1 + "5"].Value2 = comboBox_atws_preset.Items[i];
                                }
                                string last_col = Functions.get_excel_column_letter(comboBox_atws_preset.Items.Count);
                                range1 = W1.Range["B5:" + last_col + "5"];
                                Functions.Color_border_range_inside(range1, 44); //orange
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                            }
                            else
                            {
                                W1.Range["B5"].Value2 = "10x100";
                                W1.Range["C5"].Value2 = "25x100";
                                W1.Range["D5"].Value2 = "50x500";
                                range1 = W1.Range["B5:D5"];
                                Functions.Color_border_range_inside(range1, 44); //orange
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;
                            }

                            W1.Range["A6"].Value2 = "Access Roads OBJECT DATA TABLE NAME";
                            W1.Range["B6"].Value2 = comboBox_ar_od_name.Text;
                            W1.Range["A7"].Value2 = "Access Roads OBJECT DATA TABLE FIELD";
                            W1.Range["B7"].Value2 = comboBox_ar_od_field.Text;
                            W1.Range["A8"].Value2 = "Staging Area OBJECT DATA TABLE NAME";
                            W1.Range["B8"].Value2 = comboBox_stg_od_name.Text;
                            W1.Range["A9"].Value2 = "Staging Area OBJECT DATA TABLE FIELD";
                            W1.Range["B9"].Value2 = comboBox_stg_od_field.Text;
                            W1.Range["A10"].Value2 = "Primary Workspace";

                            if (primary_workspace_name == "" || primary_workspace_name == null)
                            {
                                primary_workspace_name = "XXX";
                                if (dt_library != null && dt_library.Rows.Count > 0)
                                {
                                    primary_workspace_name = Convert.ToString(dt_library.Rows[0][lib_name_column]);
                                }

                            }

                            W1.Range["B10"].Value2 = primary_workspace_name;

                            W1.Range["A11"].Value2 = "Justification PRESETS";
                            if (comboBox_atws_justif.Items.Count > 1)
                            {
                                for (int i = 1; i < comboBox_atws_justif.Items.Count; ++i)
                                {
                                    string column1 = Functions.get_excel_column_letter(i + 1);
                                    W1.Range[column1 + "11"].Value2 = comboBox_atws_justif.Items[i];
                                }
                                string last_col = Functions.get_excel_column_letter(comboBox_atws_justif.Items.Count);
                                range1 = W1.Range["B11:" + last_col + "11"];
                                Functions.Color_border_range_inside(range1, 44); //orange
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;
                            }
                        }
                        #endregion

                        #region Layers
                        if (W2 != null)
                        {
                            W2.Range["A:B"].ColumnWidth = 50;
                            W2.Range["A1:B1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W2.Range["A1:B1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W2.Range["A1:B8"].ClearContents();
                            W2.Range["A1:B8"].ClearFormats();
                            W2.Range["A2:B8"].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W2.Range["A2:B8"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            Range range1 = W2.Range["A1:B1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            range1 = W2.Range["A2:A8"];
                            Functions.Color_border_range_inside(range1, 44); //orange
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            range1 = W2.Range["B2:B8"];
                            Functions.Color_border_range_inside(range1, 43); //light green
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            W2.Range["A1"].Value2 = "LAYER NAME";
                            W2.Range["B1"].Value2 = "DESIGNATION";
                            W2.Range["A2"].Value2 = comboBox_layer_perm.Text;
                            W2.Range["B2"].Value2 = "PERMANENT EASEMENT";
                            W2.Range["A3"].Value2 = comboBox_layer_tws.Text;
                            W2.Range["B3"].Value2 = "TEMPORARY WORKSPACE";
                            W2.Range["A4"].Value2 = comboBox_layer_atws.Text;
                            W2.Range["B4"].Value2 = "ADDITIONAL TEMPORARY WORKSPACE";
                            W2.Range["A5"].Value2 = comboBox_layer_ar.Text;
                            W2.Range["B5"].Value2 = "ACCESS ROADS";
                            W2.Range["A6"].Value2 = comboBox_layer_stg.Text;
                            W2.Range["B6"].Value2 = "STAGING AREA";
                            W2.Range["A7"].Value2 = comboBox_layer_lod.Text;
                            W2.Range["B7"].Value2 = "LOD";
                            W2.Range["A8"].Value2 = comboBox_layer_proposed_perm.Text;
                            W2.Range["B8"].Value2 = "PERMANENT PROPOSED EASEMENT";
                        }
                        #endregion

                        #region Library
                        if (W3 != null && dt_library != null && dt_library.Rows.Count > 0)
                        {
                            W3.Range["A:A"].ColumnWidth = 50;
                            W3.Range["B:D"].ColumnWidth = 13;
                            W3.Range["E:E"].ColumnWidth = 3.14;
                            W3.Range["F:H"].ColumnWidth = 13;
                            W3.Range["A1:H1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W3.Range["A1:H1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W3.Range["A1:H30000"].ClearContents();
                            W3.Range["A1:H30000"].ClearFormats();
                            W3.Range["A2:H" + Convert.ToString(1 + dt_library.Rows.Count)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W3.Range["A2:H" + Convert.ToString(1 + dt_library.Rows.Count)].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            Range range1 = W3.Range["A1:H1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            Functions.Transfer_datatable_to_excel_spreadsheet(W3, dt_library, 1, true);
                            range1 = W3.Range["B2:H" + Convert.ToString(dt_library.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 44); //orange
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            range1 = W3.Range["A2:A" + Convert.ToString(dt_library.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 43); //light green
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            range1 = W3.Range["E2:E" + Convert.ToString(dt_library.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            attach_dt_library_to_datagridview();
                            fill_library_comboboxes(dt_library);
                        }
                        else
                        {
                            W3.Range["A1:H30000"].ClearContents();
                            W3.Range["A1:H30000"].ClearFormats();
                        }
                        #endregion

                        #region centerline
                        if (W4 != null && dt_cl != null && dt_cl.Rows.Count > 0)
                        {
                            W4.Range["A:B"].ColumnWidth = 40;
                            W4.Range["A1:B1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W4.Range["A1:B1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W4.Range["A1:B30000"].ClearContents();
                            W4.Range["A1:B30000"].ClearFormats();
                            W4.Range["A2:B" + Convert.ToString(1 + dt_cl.Rows.Count)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W4.Range["A2:B" + Convert.ToString(1 + dt_cl.Rows.Count)].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            Range range1 = W4.Range["A1:B1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            dt1.Columns.Add("X", typeof(double));
                            dt1.Columns.Add("Y", typeof(double));

                            for (int i = 0; i < dt_cl.Rows.Count; ++i)
                            {
                                if (dt_cl.Rows[i][0] != DBNull.Value)
                                {
                                    Point2d pt1 = (Point2d)dt_cl.Rows[i][0];
                                    dt1.Rows.Add();
                                    dt1.Rows[dt1.Rows.Count - 1][0] = pt1.X;
                                    dt1.Rows[dt1.Rows.Count - 1][1] = pt1.Y;
                                }
                            }
                            Functions.Transfer_datatable_to_excel_spreadsheet(W4, dt1, 1, true);
                            range1 = W4.Range["A2:B" + Convert.ToString(dt1.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 43); //light green
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                        }
                        else
                        {
                            W4.Range["A1:B30000"].ClearContents();
                            W4.Range["A1:B30000"].ClearFormats();
                        }
                        #endregion

                        #region WS data
                        if (W5 != null && dt_corridor != null && dt_corridor.Rows.Count > 0)
                        {
                            W5.Range["A:B"].ColumnWidth = 16;
                            W5.Range["C:C"].ColumnWidth = 40;
                            W5.Range["D:F"].ColumnWidth = 14;
                            W5.Range["A1:F1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W5.Range["A1:F1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W5.Range["A1:F30000"].ClearContents();
                            W5.Range["A1:F30000"].ClearFormats();
                            W5.Range["A2:F" + Convert.ToString(1 + dt_corridor.Rows.Count)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W5.Range["A2:F" + Convert.ToString(1 + dt_corridor.Rows.Count)].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            Range range1 = W5.Range["A1:F1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                            Functions.Transfer_datatable_to_excel_spreadsheet(W5, dt_corridor, 1, true);

                            range1 = W5.Range["A2:F" + Convert.ToString(dt_corridor.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 44); //orange
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                        }
                        else
                        {
                            W5.Range["A1:F30000"].ClearContents();
                            W5.Range["A1:F30000"].ClearFormats();
                        }
                        #endregion

                        #region atws
                        format_and_transfer_dt_atws_to_excel(W6);
                        #endregion

                        #region atws manual geometry
                        if (W8 != null && dt_atws_manual != null && dt_atws_manual.Rows.Count > 0 && dt_atws_manual.Columns.Count > 0)
                        {

                            int nr_col = dt_atws_manual.Columns.Count;
                            int nr_row = dt_atws_manual.Rows.Count;

                            string last_col = Functions.get_excel_column_letter(10000);

                            W8.Range["A:" + last_col].ColumnWidth = 16;
                            W8.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W8.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W8.Range["A1:" + last_col + "30000"].ClearContents();
                            W8.Range["A1:" + last_col + "30000"].ClearFormats();

                            W8.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W8.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_atws_manual.Columns.Count; ++k)
                            {
                                dt1.Columns.Add("X " + dt_atws_manual.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_atws_manual.Columns[k].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; ++j)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_atws_manual.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_atws_manual.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }
                                }
                                index_col += 2;
                            }

                            Range range1 = W8.Range["A1:" + Functions.get_excel_column_letter(2 * nr_col) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W8, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < 2 * nr_col; j += 2)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col2 = Functions.get_excel_column_letter(j + 2);
                                range1 = W8.Range[col1 + "2:" + col2 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W8.Range["A1:" + last_col + "30000"].ClearContents();
                            W8.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion

                        #region lod _atws manual geometry
                        if (W9 != null && dt_atws_lod_manual != null && dt_atws_lod_manual.Rows.Count > 0 && dt_atws_lod_manual.Columns.Count > 0)
                        {

                            int nr_col = dt_atws_lod_manual.Columns.Count;
                            int nr_row = dt_atws_lod_manual.Rows.Count;

                            string last_col = Functions.get_excel_column_letter(10000);

                            W9.Range["A:" + last_col].ColumnWidth = 16;
                            W9.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W9.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W9.Range["A1:" + last_col + "30000"].ClearContents();
                            W9.Range["A1:" + last_col + "30000"].ClearFormats();

                            W9.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W9.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_atws_lod_manual.Columns.Count; ++k)
                            {
                                dt1.Columns.Add("X " + dt_atws_lod_manual.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_atws_lod_manual.Columns[k].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; ++j)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_atws_lod_manual.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_atws_lod_manual.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }
                                }
                                index_col += 2;
                            }


                            Range range1 = W9.Range["A1:" + Functions.get_excel_column_letter(2 * nr_col) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W9, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < 2 * nr_col; j += 2)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col2 = Functions.get_excel_column_letter(j + 2);
                                range1 = W9.Range[col1 + "2:" + col2 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W9.Range["A1:" + last_col + "30000"].ClearContents();
                            W9.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion

                        #region ar data
                        ar.format_and_transfer_dt_ar_to_excel(W10, dt_ar);
                        #endregion

                        #region ar geometry dt_ar_side_left_p
                        if (W11a != null && dt_ar_side_left_p != null && dt_ar_side_left_p.Rows.Count > 0 && dt_ar_side_left_p.Columns.Count > 0)
                        {

                            int nr_col = dt_ar_side_left_p.Columns.Count;
                            int nr_row = dt_ar_side_left_p.Rows.Count;

                            string last_col = Functions.get_excel_column_letter((nr_col - 1) * 2 + nr_col / 3);

                            W11a.Range["A:" + last_col].ColumnWidth = 16;
                            W11a.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W11a.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W11a.Range["A1:" + last_col + "30000"].ClearContents();
                            W11a.Range["A1:" + last_col + "30000"].ClearFormats();

                            W11a.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W11a.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_ar_side_left_p.Columns.Count; k += 3)
                            {
                                dt1.Columns.Add("X " + dt_ar_side_left_p.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_ar_side_left_p.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("X " + dt_ar_side_left_p.Columns[k + 1].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_ar_side_left_p.Columns[k + 1].ColumnName, typeof(double));
                                dt1.Columns.Add(dt_ar_side_left_p.Columns[k + 2].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; j += 3)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_ar_side_left_p.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_ar_side_left_p.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }

                                    if (dt_ar_side_left_p.Rows[i][j + 1] != DBNull.Value)
                                    {
                                        Point2d pt2 = (Point2d)dt_ar_side_left_p.Rows[i][j + 1];
                                        dt1.Rows[i][index_col + 2] = pt2.X;
                                        dt1.Rows[i][index_col + 3] = pt2.Y;
                                    }

                                    if (dt_ar_side_left_p.Rows[i][j + 2] != DBNull.Value)
                                    {
                                        dt1.Rows[i][index_col + 4] = Convert.ToDouble(dt_ar_side_left_p.Rows[i][j + 2]);
                                    }
                                }
                                index_col += 5;
                            }

                            Range range1 = W11a.Range["A1:" + Functions.get_excel_column_letter(dt1.Columns.Count) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W11a, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < dt1.Columns.Count; j += 5)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col3 = Functions.get_excel_column_letter(j + 5);
                                range1 = W11a.Range[col1 + "2:" + col3 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W11a.Range["A1:" + last_col + "30000"].ClearContents();
                            W11a.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion


                        #region ar geometry dt_ar_side_right_p
                        if (W11b != null && dt_ar_side_right_p != null && dt_ar_side_right_p.Rows.Count > 0 && dt_ar_side_right_p.Columns.Count > 0)
                        {

                            int nr_col = dt_ar_side_right_p.Columns.Count;
                            int nr_row = dt_ar_side_right_p.Rows.Count;

                            string last_col = Functions.get_excel_column_letter((nr_col - 1) * 2 + nr_col / 3);

                            W11b.Range["A:" + last_col].ColumnWidth = 16;
                            W11b.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W11b.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W11b.Range["A1:" + last_col + "30000"].ClearContents();
                            W11b.Range["A1:" + last_col + "30000"].ClearFormats();

                            W11b.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W11b.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_ar_side_right_p.Columns.Count; k += 3)
                            {
                                dt1.Columns.Add("X " + dt_ar_side_right_p.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_ar_side_right_p.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("X " + dt_ar_side_right_p.Columns[k + 1].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_ar_side_right_p.Columns[k + 1].ColumnName, typeof(double));
                                dt1.Columns.Add(dt_ar_side_right_p.Columns[k + 2].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; j += 3)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_ar_side_right_p.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_ar_side_right_p.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }

                                    if (dt_ar_side_right_p.Rows[i][j + 1] != DBNull.Value)
                                    {
                                        Point2d pt2 = (Point2d)dt_ar_side_right_p.Rows[i][j + 1];
                                        dt1.Rows[i][index_col + 2] = pt2.X;
                                        dt1.Rows[i][index_col + 3] = pt2.Y;
                                    }

                                    if (dt_ar_side_right_p.Rows[i][j + 2] != DBNull.Value)
                                    {
                                        dt1.Rows[i][index_col + 4] = Convert.ToDouble(dt_ar_side_right_p.Rows[i][j + 2]);
                                    }
                                }
                                index_col += 5;
                            }

                            Range range1 = W11b.Range["A1:" + Functions.get_excel_column_letter(dt1.Columns.Count) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W11b, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < dt1.Columns.Count; j += 5)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col3 = Functions.get_excel_column_letter(j + 5);
                                range1 = W11b.Range[col1 + "2:" + col3 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W11b.Range["A1:" + last_col + "30000"].ClearContents();
                            W11b.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion

                        #region ar geometry dt_ar_temp
                        if (W11c != null && dt_ar_temp != null && dt_ar_temp.Rows.Count > 0 && dt_ar_temp.Columns.Count > 0)
                        {

                            int nr_col = dt_ar_temp.Columns.Count;
                            int nr_row = dt_ar_temp.Rows.Count;

                            string last_col = Functions.get_excel_column_letter((nr_col - 1) * 2 + nr_col / 3);

                            W11c.Range["A:" + last_col].ColumnWidth = 16;
                            W11c.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W11c.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W11c.Range["A1:" + last_col + "30000"].ClearContents();
                            W11c.Range["A1:" + last_col + "30000"].ClearFormats();

                            W11c.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W11c.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_ar_temp.Columns.Count; k += 3)
                            {
                                dt1.Columns.Add("X " + dt_ar_temp.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_ar_temp.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("X " + dt_ar_temp.Columns[k + 1].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_ar_temp.Columns[k + 1].ColumnName, typeof(double));
                                dt1.Columns.Add(dt_ar_temp.Columns[k + 2].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; j += 3)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_ar_temp.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_ar_temp.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }

                                    if (dt_ar_temp.Rows[i][j + 1] != DBNull.Value)
                                    {
                                        Point2d pt2 = (Point2d)dt_ar_temp.Rows[i][j + 1];
                                        dt1.Rows[i][index_col + 2] = pt2.X;
                                        dt1.Rows[i][index_col + 3] = pt2.Y;
                                    }

                                    if (dt_ar_temp.Rows[i][j + 2] != DBNull.Value)
                                    {
                                        dt1.Rows[i][index_col + 4] = Convert.ToDouble(dt_ar_temp.Rows[i][j + 2]);
                                    }
                                }
                                index_col += 5;
                            }

                            Range range1 = W11c.Range["A1:" + Functions.get_excel_column_letter(dt1.Columns.Count) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W11c, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < dt1.Columns.Count; j += 5)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col3 = Functions.get_excel_column_letter(j + 5);
                                range1 = W11c.Range[col1 + "2:" + col3 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W11c.Range["A1:" + last_col + "30000"].ClearContents();
                            W11c.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion

                        #region staging area data
                        format_and_transfer_dt_stg_to_excel(W12);
                        #endregion

                        #region staging area manual geometry
                        if (W13 != null && dt_manual_stg != null && dt_manual_stg.Rows.Count > 0 && dt_manual_stg.Columns.Count > 0)
                        {

                            int nr_col = dt_manual_stg.Columns.Count;
                            int nr_row = dt_manual_stg.Rows.Count;

                            string last_col = Functions.get_excel_column_letter(2 * nr_col);

                            W13.Range["A:" + last_col].ColumnWidth = 16;
                            W13.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W13.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W13.Range["A1:" + last_col + "30000"].ClearContents();
                            W13.Range["A1:" + last_col + "30000"].ClearFormats();

                            W13.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W13.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_manual_stg.Columns.Count; ++k)
                            {
                                dt1.Columns.Add("X " + dt_manual_stg.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_manual_stg.Columns[k].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; ++j)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_manual_stg.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_manual_stg.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }
                                }
                                index_col += 2;
                            }

                            Range range1 = W13.Range["A1:" + Functions.get_excel_column_letter(2 * nr_col) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W13, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < 2 * nr_col; j += 2)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col2 = Functions.get_excel_column_letter(j + 2);
                                range1 = W13.Range[col1 + "2:" + col2 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W13.Range["A1:" + last_col + "30000"].ClearContents();
                            W13.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion


                        #region side1
                        if (W14 != null && dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0 && dt_atws_side1.Columns.Count > 0)
                        {

                            int nr_col = dt_atws_side1.Columns.Count;
                            int nr_row = dt_atws_side1.Rows.Count;

                            string last_col = Functions.get_excel_column_letter(10000);

                            W14.Range["A:" + last_col].ColumnWidth = 16;
                            W14.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W14.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W14.Range["A1:" + last_col + "30000"].ClearContents();
                            W14.Range["A1:" + last_col + "30000"].ClearFormats();

                            W14.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W14.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_atws_side1.Columns.Count; ++k)
                            {
                                dt1.Columns.Add("X " + dt_atws_side1.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_atws_side1.Columns[k].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; ++j)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_atws_side1.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }
                                }
                                index_col += 2;
                            }

                            Range range1 = W14.Range["A1:" + Functions.get_excel_column_letter(2 * nr_col) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;


                            Functions.Transfer_datatable_to_excel_spreadsheet(W14, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < 2 * nr_col; j += 2)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col2 = Functions.get_excel_column_letter(j + 2);
                                range1 = W14.Range[col1 + "2:" + col2 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W14.Range["A1:" + last_col + "30000"].ClearContents();
                            W14.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion

                        #region side2
                        if (W15 != null && dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0 && dt_atws_side2.Columns.Count > 0)
                        {

                            int nr_col = dt_atws_side2.Columns.Count;
                            int nr_row = dt_atws_side2.Rows.Count;

                            string last_col = Functions.get_excel_column_letter(10000);

                            W15.Range["A:" + last_col].ColumnWidth = 16;
                            W15.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W15.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W15.Range["A1:" + last_col + "30000"].ClearContents();
                            W15.Range["A1:" + last_col + "30000"].ClearFormats();

                            W15.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W15.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_atws_side2.Columns.Count; ++k)
                            {
                                dt1.Columns.Add("X " + dt_atws_side2.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_atws_side2.Columns[k].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; ++j)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_atws_side2.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }
                                }
                                index_col += 2;
                            }

                            Range range1 = W15.Range["A1:" + Functions.get_excel_column_letter(2 * nr_col) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W15, dt1, 1, true);
                            int color_index = 43;//light green
                            for (int j = 0; j < 2 * nr_col; j += 2)
                            {
                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col2 = Functions.get_excel_column_letter(j + 2);
                                range1 = W15.Range[col1 + "2:" + col2 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W15.Range["A1:" + last_col + "30000"].ClearContents();
                            W15.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion

                        #region corridor sides
                        if (W16 != null && dt_sides != null && dt_sides.Rows.Count > 0 && dt_sides.Columns.Count > 0)
                        {

                            int nr_col = dt_sides.Columns.Count;
                            int nr_row = dt_sides.Rows.Count;

                            string last_col = Functions.get_excel_column_letter(10000);

                            W16.Range["A:" + last_col].ColumnWidth = 16;
                            W16.Range["A1:" + last_col + "1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W16.Range["A1:" + last_col + "1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W16.Range["A1:" + last_col + "30000"].ClearContents();
                            W16.Range["A1:" + last_col + "30000"].ClearFormats();

                            W16.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W16.Range["A2:" + last_col + Convert.ToString(1 + nr_row)].VerticalAlignment = XlVAlign.xlVAlignCenter;


                            System.Data.DataTable dt1 = new System.Data.DataTable();
                            for (int k = 0; k < dt_sides.Columns.Count; k += 2)
                            {
                                dt1.Columns.Add("X " + dt_sides.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_sides.Columns[k].ColumnName, typeof(double));
                                dt1.Columns.Add("X " + dt_sides.Columns[k + 1].ColumnName, typeof(double));
                                dt1.Columns.Add("Y " + dt_sides.Columns[k + 1].ColumnName, typeof(double));
                            }

                            for (int i = 0; i < nr_row; ++i)
                            {
                                dt1.Rows.Add();
                            }

                            int index_col = 0;
                            for (int j = 0; j < nr_col; j += 2)
                            {
                                for (int i = 0; i < nr_row; ++i)
                                {
                                    if (dt_sides.Rows[i][j] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_sides.Rows[i][j];
                                        dt1.Rows[i][index_col] = pt1.X;
                                        dt1.Rows[i][index_col + 1] = pt1.Y;
                                    }
                                    if (dt_sides.Rows[i][j + 1] != DBNull.Value)
                                    {
                                        Point2d pt1 = (Point2d)dt_sides.Rows[i][j + 1];
                                        dt1.Rows[i][index_col + 2] = pt1.X;
                                        dt1.Rows[i][index_col + 3] = pt1.Y;
                                    }
                                }
                                index_col += 4;
                            }

                            Functions.Transfer_datatable_to_excel_spreadsheet(W16, dt1, 1, true);

                            Range range1 = W16.Range["A1:" + Functions.get_excel_column_letter(2 * nr_col) + "1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            int color_index = 43;//light green
                            for (int j = 0; j < 2 * nr_col; j += 2)
                            {

                                string col1 = Functions.get_excel_column_letter(j + 1);
                                string col2 = Functions.get_excel_column_letter(j + 2);
                                range1 = W16.Range[col1 + "2:" + col2 + Convert.ToString(dt1.Rows.Count + 1)];
                                Functions.Color_border_range_inside(range1, color_index);
                                range1.Font.ColorIndex = 1;//black
                                range1.Font.Size = 11;
                                range1.Font.Bold = true;

                                if (color_index == 43)
                                {
                                    color_index = 44;//orange
                                }
                                else
                                {
                                    color_index = 43;//light green
                                }
                            }
                        }
                        else
                        {
                            string last_col = Functions.get_excel_column_letter(10000);
                            W16.Range["A1:" + last_col + "30000"].ClearContents();
                            W16.Range["A1:" + last_col + "30000"].ClearFormats();
                        }
                        #endregion

                        #region proposed permanent
                        format_and_transfer_dt_proposed_perm_to_excel(W44);
                        #endregion

                        #region dt_poly_perm
                        if (W20 != null && dt_poly_perm != null && dt_poly_perm.Rows.Count > 0)
                        {
                            W20.Range["A:B"].ColumnWidth = 20;
                            W20.Range["C:C"].ColumnWidth = 10;
                            W20.Range["D:E"].ColumnWidth = 15;
                            W20.Range["A1:E1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W20.Range["A1:E1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W20.Range["A1:E30000"].ClearContents();
                            W20.Range["A1:E30000"].ClearFormats();
                            W20.Range["A2:E" + Convert.ToString(1 + dt_poly_perm.Rows.Count)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W20.Range["A2:E" + Convert.ToString(1 + dt_poly_perm.Rows.Count)].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            Range range1 = W20.Range["A1:E1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;


                            Functions.Transfer_datatable_to_excel_spreadsheet(W20, dt_poly_perm, 1, true);
                            range1 = W20.Range["A2:B" + Convert.ToString(dt_poly_perm.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 43); //light green
                            range1 = W20.Range["C2:C" + Convert.ToString(dt_poly_perm.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 46); //light ORANGE
                            range1 = W20.Range["D2:E" + Convert.ToString(dt_poly_perm.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 6); //YELLOW
                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                        }
                        else
                        {
                            W20.Range["A1:E30000"].ClearContents();
                            W20.Range["A1:E30000"].ClearFormats();
                        }
                        #endregion

                        #region dt_poly_tws
                        if (W21 != null && dt_poly_tws != null && dt_poly_tws.Rows.Count > 0)
                        {
                            W21.Range["A:A"].ColumnWidth = 17;
                            W21.Range["B:C"].ColumnWidth = 20;
                            W21.Range["D:D"].ColumnWidth = 17;
                            W21.Range["E:F"].ColumnWidth = 15;
                            W21.Range["A1:F1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            W21.Range["A1:F1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                            W21.Range["A1:F30000"].ClearContents();
                            W21.Range["A1:F30000"].ClearFormats();
                            W21.Range["A2:F" + Convert.ToString(1 + dt_poly_tws.Rows.Count)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                            W21.Range["A2:F" + Convert.ToString(1 + dt_poly_tws.Rows.Count)].VerticalAlignment = XlVAlign.xlVAlignCenter;
                            Range range1 = W21.Range["A1:F1"];
                            Functions.Color_border_range_inside(range1, 41); //blue
                            range1.Font.ColorIndex = 2;
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;

                            Functions.Transfer_datatable_to_excel_spreadsheet(W21, dt_poly_tws, 1, true);

                            range1 = W21.Range["A2:A" + Convert.ToString(dt_poly_tws.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 46); //light ORANGE
                            range1 = W21.Range["B2:C" + Convert.ToString(dt_poly_tws.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 43); //light green
                            range1 = W21.Range["D2:D" + Convert.ToString(dt_poly_tws.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 46); //light ORANGE
                            range1 = W21.Range["E2:F" + Convert.ToString(dt_poly_tws.Rows.Count + 1)];
                            Functions.Color_border_range_inside(range1, 6); //YELLOW

                            range1.Font.ColorIndex = 1;//black
                            range1.Font.Size = 11;
                            range1.Font.Bold = true;
                        }
                        else
                        {
                            W21.Range["A1:F30000"].ClearContents();
                            W21.Range["A1:F30000"].ClearFormats();
                        }
                        #endregion


                        if (W99 != null)
                        {
                            W99.Delete();
                        }

                        if (W1 != null || W2 != null || W3 != null || W4 != null || W5 != null || W6 != null || W8 != null || W10 != null ||
                            W11a != null || W12 != null || W13 != null || W14 != null || W15 != null || W16 != null || W20 != null ||
                            W21 != null || W44 != null || W99 != null)
                        {
                            if (excel_is_opened == false)
                            {
                                Workbook1.Save();
                                Workbook1.Close();
                                if (Excel1.Workbooks.Count == 0)
                                {
                                    Excel1.Quit();
                                }
                                else
                                {
                                    Excel1.Visible = true;
                                }
                            }
                        }

                    }
                }
                else
                {
                    MessageBox.Show("No data displayed on the tool, nothing to save\r\noperation aborted");
                    set_enable_true();
                    return;
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                design_file = "";
                set_label_workspace_design(design_file);
            }
            finally
            {
                if (W1 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W1);
                if (W2 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W2);
                if (W3 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W3);
                if (W4 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W4);
                if (W5 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W5);
                if (W6 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W6);

                if (W8 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W8);
                if (W10 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W10);
                if (W11a != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W11a);
                if (W12 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W12);
                if (W13 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W13);
                if (W14 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W14);
                if (W15 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W15);
                if (W16 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W16);

                if (W44 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W44);

                if (W99 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(W99);
                if (Workbook1 != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(Workbook1);
                if (Excel1 != null && Excel1.Workbooks.Count == 0) System.Runtime.InteropServices.Marshal.ReleaseComObject(Excel1);
            }
            set_label_workspace_design(design_file);
            set_enable_true();
        }
        private void format_and_transfer_dt_atws_to_excel(Worksheet W6)
        {
            if (W6 != null && dt_atws != null && dt_atws.Rows.Count > 0)
            {
                W6.Range["A:C"].ColumnWidth = 15;
                W6.Range["D:E"].ColumnWidth = 12;
                W6.Range["F:F"].ColumnWidth = 85;
                W6.Range["G:N"].ColumnWidth = 12;
                W6.Range["A1:N1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                W6.Range["A1:N1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                W6.Range["A1:N30000"].ClearContents();
                W6.Range["A1:N30000"].ClearFormats();
                W6.Range["A2:N" + Convert.ToString(1 + dt_atws.Rows.Count)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                W6.Range["A2:N" + Convert.ToString(1 + dt_atws.Rows.Count)].VerticalAlignment = XlVAlign.xlVAlignCenter;
                Range range1 = W6.Range["A1:N1"];
                Functions.Color_border_range_inside(range1, 41); //blue
                range1.Font.ColorIndex = 2;
                range1.Font.Size = 11;
                range1.Font.Bold = true;

                Functions.Transfer_datatable_to_excel_spreadsheet(W6, dt_atws, 1, true);

                range1 = W6.Range["A2:E" + Convert.ToString(dt_atws.Rows.Count + 1)];
                Functions.Color_border_range_inside(range1, 44); //orange
                range1.Font.ColorIndex = 1;//black
                range1.Font.Size = 11;
                range1.Font.Bold = true;
                range1 = W6.Range["F2:F" + Convert.ToString(dt_atws.Rows.Count + 1)];
                Functions.Color_border_range_inside(range1, 43); //light green
                range1.Font.ColorIndex = 1;//black
                range1.Font.Size = 11;
                range1.Font.Bold = true;
                range1 = W6.Range["G2:H" + Convert.ToString(dt_atws.Rows.Count + 1)];
                Functions.Color_border_range_inside(range1, 44); //orange
                range1.Font.ColorIndex = 1;//black
                range1.Font.Size = 11;
                range1.Font.Bold = true;
                range1 = W6.Range["I2:J" + Convert.ToString(dt_atws.Rows.Count + 1)];
                Functions.Color_border_range_inside(range1, 43); //light green
                range1.Font.ColorIndex = 1;//black
                range1.Font.Size = 11;
                range1.Font.Bold = true;
                range1 = W6.Range["K2:L" + Convert.ToString(dt_atws.Rows.Count + 1)];
                Functions.Color_border_range_inside(range1, 44); //orange
                range1.Font.ColorIndex = 1;//black
                range1.Font.Size = 11;
                range1.Font.Bold = true;
                range1 = W6.Range["M2:N" + Convert.ToString(dt_atws.Rows.Count + 1)];
                Functions.Color_border_range_inside(range1, 43); //light green
                range1.Font.ColorIndex = 1;//black
                range1.Font.Size = 11;
                range1.Font.Bold = true;
            }
            else
            {
                W6.Range["A1:N30000"].ClearContents();
                W6.Range["A1:N30000"].ClearFormats();
            }
        }

        private System.Data.DataTable build_dt_library_from_excel(Worksheet W1)
        {
            System.Data.DataTable dt1 = get_dt_library_structure();
            string Col1 = "A";


            Range range1 = W1.Range[Col1 + "2:" + Col1 + "30002"];
            object[,] values1 = new object[30000, 1];
            values1 = range1.Value2;

            bool is_data = false;
            for (int i = 1; i <= values1.Length; ++i)
            {
                object Valoare2 = values1[i, 1];
                if (Valoare2 != null)
                {
                    dt1.Rows.Add();
                    is_data = true;
                }
                else
                {
                    i = values1.Length + 1;
                }
            }

            if (is_data == false)
            {
                return null;
            }

            int NrR = dt1.Rows.Count;

            range1 = W1.Range["A2:H" + Convert.ToString(NrR + 1)];
            object[,] values = new object[NrR, 5];
            values = range1.Value2;

            for (int i = 0; i < dt1.Rows.Count; ++i)
            {
                for (int j = 0; j < dt1.Columns.Count; ++j)
                {
                    object val = values[i + 1, j + 1];
                    if (val == null) val = DBNull.Value;
                    if (j > 0)
                    {
                        if (val == DBNull.Value || Functions.IsNumeric(Convert.ToString(val)) == false) val = DBNull.Value;
                    }

                    dt1.Rows[i][j] = val;
                }
            }

            return dt1;
        }
        private System.Data.DataTable build_dt_cl_from_config_excel(Worksheet W1)
        {

            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add("pt", typeof(Point2d));
            dt1.Columns.Add("sta", typeof(double));
            string Col1 = "A";

            Range range2 = W1.Range[Col1 + "2:" + Col1 + "30002"];
            object[,] values2 = new object[30000, 1];
            values2 = range2.Value2;

            bool is_data = false;
            for (int i = 1; i <= values2.Length; ++i)
            {
                object Valoare2 = values2[i, 1];
                if (Valoare2 != null)
                {
                    dt1.Rows.Add();
                    is_data = true;
                }
                else
                {
                    i = values2.Length + 1;
                }
            }

            if (is_data == false)
            {
                return null;
            }

            int NrR = dt1.Rows.Count;
            if (NrR > 1)
            {
                Range range1 = W1.Range["A2:B" + Convert.ToString(NrR + 1)];
                object[,] values = new object[NrR, 2];
                values = range1.Value2;
                double sta_p = 0;
                double x_p = 0;
                double y_p = 0;

                object val_p1 = values[1, 1];
                object val_p2 = values[1, 2];
                if (val_p1 != null && val_p2 != null)
                {
                    if (Functions.IsNumeric(Convert.ToString(val_p1)) == true && Functions.IsNumeric(Convert.ToString(val_p2)) == true)
                    {
                        x_p = Convert.ToDouble(val_p1);
                        y_p = Convert.ToDouble(val_p2);
                    }
                }
                dt1.Rows[0][0] = new Point2d(x_p, y_p);
                dt1.Rows[0][1] = sta_p;
                for (int i = 1; i < dt1.Rows.Count; ++i)
                {
                    object val1 = values[i + 1, 1];
                    object val2 = values[i + 1, 2];
                    if (val1 != null && val2 != null)
                    {
                        if (Functions.IsNumeric(Convert.ToString(val1)) == true && Functions.IsNumeric(Convert.ToString(val2)) == true)
                        {
                            double x1 = Convert.ToDouble(val1);
                            double y1 = Convert.ToDouble(val2);
                            dt1.Rows[i][0] = new Point2d(x1, y1);
                            double sta1 = sta_p + Math.Pow(Math.Pow(x1 - x_p, 2) + Math.Pow(y1 - y_p, 2), 0.5);
                            dt1.Rows[i][1] = sta1;
                            sta_p = sta1;
                            x_p = x1;
                            y_p = y1;
                        }
                    }
                }
                //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt1);
            }
            return dt1;

        }

        private System.Data.DataTable build_dt_poly_perm_from_config_excel(Worksheet W1)
        {

            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(col_x, typeof(double));
            dt1.Columns.Add(col_y, typeof(double));
            dt1.Columns.Add(col_side, typeof(string));
            dt1.Columns.Add(col_sta1, typeof(double));
            dt1.Columns.Add(col_sta2, typeof(double));


            Range range2 = W1.Range["A1:E30000"];
            object[,] values2 = new object[30000, 5];
            values2 = range2.Value2;


            for (int i = 2; i <= 30000; ++i)
            {
                object ValoareX = values2[i, 1];
                object ValoareY = values2[i, 2];
                object ValoareSide = values2[i, 3];
                object Valoaresta1 = values2[i, 4];
                object Valoaresta2 = values2[i, 5];
                if (ValoareX != null && Functions.IsNumeric(Convert.ToString(ValoareX)) == true &&
                    ValoareY != null && Functions.IsNumeric(Convert.ToString(ValoareY)) == true && ValoareSide != null &&
                    Valoaresta1 != null && Functions.IsNumeric(Convert.ToString(Valoaresta1)) == true &&
                    Valoaresta2 != null && Functions.IsNumeric(Convert.ToString(Valoaresta2)) == true)
                {
                    dt1.Rows.Add();
                    dt1.Rows[dt1.Rows.Count - 1][col_x] = Convert.ToDouble(ValoareX);
                    dt1.Rows[dt1.Rows.Count - 1][col_y] = Convert.ToDouble(ValoareY);
                    dt1.Rows[dt1.Rows.Count - 1][col_side] = Convert.ToString(ValoareSide);
                    dt1.Rows[dt1.Rows.Count - 1][col_sta1] = Convert.ToDouble(Valoaresta1);
                    dt1.Rows[dt1.Rows.Count - 1][col_sta2] = Convert.ToDouble(Valoaresta2);

                }
                else
                {
                    i = values2.Length + 1;
                }
            }

            return dt1;

        }

        private System.Data.DataTable build_dt_poly_tws_from_config_excel(Worksheet W1)
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(col_id, typeof(string));
            dt1.Columns.Add(col_x, typeof(double));
            dt1.Columns.Add(col_y, typeof(double));
            dt1.Columns.Add(col_side, typeof(string));
            dt1.Columns.Add(col_sta1, typeof(double));
            dt1.Columns.Add(col_sta2, typeof(double));

            Range range2 = W1.Range["A1:F30000"];
            object[,] values2 = new object[30000, 6];
            values2 = range2.Value2;


            for (int i = 2; i <= 30000; ++i)
            {
                object ValoareID = values2[i, 1];
                object ValoareX = values2[i, 2];
                object ValoareY = values2[i, 3];
                object ValoareSide = values2[i, 4];
                object Valoaresta1 = values2[i, 5];
                object Valoaresta2 = values2[i, 6];
                if (ValoareX != null && Functions.IsNumeric(Convert.ToString(ValoareX)) == true &&
                    ValoareY != null && Functions.IsNumeric(Convert.ToString(ValoareY)) == true &&
                    Valoaresta1 != null && Functions.IsNumeric(Convert.ToString(Valoaresta1)) == true &&
                    Valoaresta2 != null && Functions.IsNumeric(Convert.ToString(Valoaresta2)) == true &&
                    ValoareID != null && ValoareSide != null)
                {
                    dt1.Rows.Add();
                    dt1.Rows[dt1.Rows.Count - 1][col_x] = Convert.ToDouble(ValoareX);
                    dt1.Rows[dt1.Rows.Count - 1][col_y] = Convert.ToDouble(ValoareY);
                    dt1.Rows[dt1.Rows.Count - 1][col_side] = Convert.ToString(ValoareSide);
                    dt1.Rows[dt1.Rows.Count - 1][col_id] = Convert.ToString(ValoareID);
                    dt1.Rows[dt1.Rows.Count - 1][col_sta1] = Convert.ToString(Valoaresta1);
                    dt1.Rows[dt1.Rows.Count - 1][col_sta2] = Convert.ToString(Valoaresta2);
                }
                else
                {
                    i = values2.Length + 1;
                }
            }
            return dt1;
        }

        private void build_dt_manual_atws_from_config_excel(Worksheet W1)
        {
            if (dt_atws == null || dt_atws.Rows.Count == 0)
            {
                dt_atws_manual = null;
                return;
            }

            List<string> lista1 = new List<string>();

            for (int i = 0; i < dt_atws.Rows.Count; ++i)
            {
                if (dt_atws.Rows[i][atws_handle0_column] != DBNull.Value)
                {
                    if (lista1.Contains(Convert.ToString(dt_atws.Rows[i][atws_handle0_column])) == false)
                    {
                        lista1.Add(Convert.ToString(dt_atws.Rows[i][atws_handle0_column]));
                    }
                }
            }

            dt_atws_manual = new System.Data.DataTable();
            for (int j = 0; j < lista1.Count; ++j)
            {
                if (dt_atws_manual.Columns.Contains(lista1[j]) == false)
                {
                    dt_atws_manual.Columns.Add(lista1[j], typeof(Point2d));
                }

            }

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;


            for (int j = 1; j <= values1.Length; j += 2)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    if (dtcol1 == dtcol2 && dt_atws_manual.Columns.Contains(Convert.ToString(dtcol1)) == true)
                    {
                        string col1 = Functions.get_excel_column_letter(j);
                        string col2 = Functions.get_excel_column_letter(j + 1);

                        Range range2 = W1.Range[col1 + "2:" + col2 + "30001"];
                        object[,] values2 = new object[30000, 2];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 2; ++i)
                        {
                            object obj_x = values2[i, 1];
                            object obj_y = values2[i, 2];
                            if (obj_x != null && obj_y != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x)) == true && Functions.IsNumeric(Convert.ToString(obj_y)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x);
                                    double y1 = Convert.ToDouble(obj_y);

                                    if (dt_atws_manual.Rows.Count < i)
                                    {
                                        dt_atws_manual.Rows.Add();
                                    }


                                    dt_atws_manual.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }
                            else
                            {
                                i = values2.Length;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into atws geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2);
                        j = values1.Length + 1;
                    }




                }
                else
                {
                    j = values1.Length + 1;
                }
            }


            //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_manual_atws);

        }
        private void build_dt_lod_atws_from_config_excel(Worksheet W1)
        {
            if (dt_atws == null || dt_atws.Rows.Count == 0)
            {
                dt_atws_lod_manual = null;
                dt_atws_side1 = null;
                dt_atws_side2 = null;
                return;
            }

            List<string> lista1 = new List<string>();

            for (int i = 0; i < dt_atws.Rows.Count; ++i)
            {
                if (dt_atws.Rows[i][atws_handle0_column] != DBNull.Value)
                {
                    if (lista1.Contains(Convert.ToString(dt_atws.Rows[i][atws_handle0_column])) == false)
                    {
                        lista1.Add(Convert.ToString(dt_atws.Rows[i][atws_handle0_column]));
                    }
                }
            }
            dt_atws_lod_manual = new System.Data.DataTable();
            for (int j = 0; j < lista1.Count; ++j)
            {
                if (dt_atws_lod_manual.Columns.Contains(lista1[j]) == false)
                {
                    dt_atws_lod_manual.Columns.Add(lista1[j], typeof(Point2d));
                }

            }

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;


            for (int j = 1; j <= values1.Length; j += 2)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    if (dtcol1 == dtcol2 && dt_atws_lod_manual.Columns.Contains(Convert.ToString(dtcol1)) == true)
                    {
                        string col1 = Functions.get_excel_column_letter(j);
                        string col2 = Functions.get_excel_column_letter(j + 1);

                        Range range2 = W1.Range[col1 + "2:" + col2 + "30001"];
                        object[,] values2 = new object[30000, 2];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 2; ++i)
                        {
                            object obj_x = values2[i, 1];
                            object obj_y = values2[i, 2];
                            if (obj_x != null && obj_y != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x)) == true && Functions.IsNumeric(Convert.ToString(obj_y)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x);
                                    double y1 = Convert.ToDouble(obj_y);

                                    if (dt_atws_lod_manual.Rows.Count < i)
                                    {
                                        dt_atws_lod_manual.Rows.Add();
                                    }


                                    dt_atws_lod_manual.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }
                            else
                            {
                                i = values2.Length;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into lod atws geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2);
                        j = values1.Length + 1;
                    }




                }
                else
                {
                    j = values1.Length + 1;
                }
            }


            //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_lod_atws);

        }
        private void build_dt_atws_side1_from_config_excel(Worksheet W1)
        {
            if (dt_atws == null || dt_atws.Rows.Count == 0)
            {
                dt_atws_side1 = null;
                return;
            }

            List<string> lista1 = new List<string>();
            for (int i = 0; i < dt_atws.Rows.Count; ++i)
            {
                if (dt_atws.Rows[i][atws_handle0_column] != DBNull.Value)
                {
                    if (lista1.Contains(Convert.ToString(dt_atws.Rows[i][atws_handle0_column])) == false)
                    {
                        lista1.Add(Convert.ToString(dt_atws.Rows[i][atws_handle0_column]));
                    }
                }
            }

            dt_atws_side1 = new System.Data.DataTable();
            for (int j = 0; j < lista1.Count; ++j)
            {
                if (dt_atws_side1.Columns.Contains(lista1[j]) == false)
                {
                    dt_atws_side1.Columns.Add(lista1[j], typeof(Point2d));
                }

            }

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;


            for (int j = 1; j <= values1.Length; j += 2)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    if (dtcol1 == dtcol2 && dt_atws_side1.Columns.Contains(Convert.ToString(dtcol1)) == true)
                    {
                        string col1 = Functions.get_excel_column_letter(j);
                        string col2 = Functions.get_excel_column_letter(j + 1);

                        Range range2 = W1.Range[col1 + "2:" + col2 + "30001"];
                        object[,] values2 = new object[30000, 2];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 2; ++i)
                        {
                            object obj_x = values2[i, 1];
                            object obj_y = values2[i, 2];
                            if (obj_x != null && obj_y != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x)) == true && Functions.IsNumeric(Convert.ToString(obj_y)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x);
                                    double y1 = Convert.ToDouble(obj_y);

                                    if (dt_atws_side1.Rows.Count < i)
                                    {
                                        dt_atws_side1.Rows.Add();
                                    }


                                    dt_atws_side1.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }
                            else
                            {
                                i = values2.Length;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into side1 atws geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2);
                        j = values1.Length + 1;
                    }




                }
                else
                {
                    j = values1.Length + 1;
                }
            }


        }
        private void build_dt_atws_side2_from_config_excel(Worksheet W1)
        {
            if (dt_atws == null || dt_atws.Rows.Count == 0)
            {
                dt_atws_side2 = null;
                return;
            }

            List<string> lista1 = new List<string>();

            for (int i = 0; i < dt_atws.Rows.Count; ++i)
            {
                if (dt_atws.Rows[i][atws_handle0_column] != DBNull.Value)
                {
                    if (lista1.Contains(Convert.ToString(dt_atws.Rows[i][atws_handle0_column])) == false)
                    {
                        lista1.Add(Convert.ToString(dt_atws.Rows[i][atws_handle0_column]));
                    }
                }
            }

            dt_atws_side2 = new System.Data.DataTable();
            for (int j = 0; j < lista1.Count; ++j)
            {
                if (dt_atws_side2.Columns.Contains(lista1[j]) == false)
                {
                    dt_atws_side2.Columns.Add(lista1[j], typeof(Point2d));
                }

            }

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;


            for (int j = 1; j <= values1.Length; j += 2)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    if (dtcol1 == dtcol2 && dt_atws_side2.Columns.Contains(Convert.ToString(dtcol1)) == true)
                    {
                        string col1 = Functions.get_excel_column_letter(j);
                        string col2 = Functions.get_excel_column_letter(j + 1);

                        Range range2 = W1.Range[col1 + "2:" + col2 + "30001"];
                        object[,] values2 = new object[30000, 2];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 2; ++i)
                        {
                            object obj_x = values2[i, 1];
                            object obj_y = values2[i, 2];
                            if (obj_x != null && obj_y != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x)) == true && Functions.IsNumeric(Convert.ToString(obj_y)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x);
                                    double y1 = Convert.ToDouble(obj_y);

                                    if (dt_atws_side2.Rows.Count < i)
                                    {
                                        dt_atws_side2.Rows.Add();
                                    }


                                    dt_atws_side2.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }
                            else
                            {
                                i = values2.Length;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into side2 atws geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2);
                        j = values1.Length + 1;
                    }




                }
                else
                {
                    j = values1.Length + 1;
                }
            }


        }
        private void build_dt_sides_from_config_excel(Worksheet W1)
        {
            dt_sides = new System.Data.DataTable();

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;

            for (int j = 1; j <= values1.Length; j += 4)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                object col_name_val3 = values1[1, j + 2];
                object col_name_val4 = values1[1, j + 3];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    string dtcol3 = Convert.ToString(col_name_val3).Replace("X ", "");
                    string dtcol4 = Convert.ToString(col_name_val4).Replace("Y ", "");

                    if (dtcol1 == dtcol2 && dtcol3 == dtcol4)
                    {

                        if (dt_sides.Columns.Contains(dtcol1) == false)
                        {
                            dt_sides.Columns.Add(dtcol1, typeof(Point2d));
                        }

                        if (dt_sides.Columns.Contains(dtcol3) == false)
                        {
                            dt_sides.Columns.Add(dtcol3, typeof(Point2d));
                        }

                        string col1 = Functions.get_excel_column_letter(j);
                        string col2 = Functions.get_excel_column_letter(j + 1);

                        Range range2 = W1.Range[col1 + "2:" + col2 + "30001"];
                        object[,] values2 = new object[30000, 2];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 2; ++i)
                        {
                            object obj_x = values2[i, 1];
                            object obj_y = values2[i, 2];
                            if (obj_x != null && obj_y != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x)) == true && Functions.IsNumeric(Convert.ToString(obj_y)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x);
                                    double y1 = Convert.ToDouble(obj_y);

                                    if (dt_sides.Rows.Count < i)
                                    {
                                        dt_sides.Rows.Add();
                                    }


                                    dt_sides.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }
                            else
                            {
                                i = values2.Length;
                            }

                        }

                        string col3 = Functions.get_excel_column_letter(j + 2);
                        string col4 = Functions.get_excel_column_letter(j + 3);

                        Range range3 = W1.Range[col3 + "2:" + col4 + "2"];
                        object[,] values3 = new object[1, 2];
                        values3 = range3.Value2;

                        object obj_x0 = values3[1, 1];
                        object obj_y0 = values3[1, 2];
                        if (obj_x0 != null && obj_y0 != null)
                        {
                            if (Functions.IsNumeric(Convert.ToString(obj_x0)) == true && Functions.IsNumeric(Convert.ToString(obj_y0)) == true)
                            {
                                double x1 = Convert.ToDouble(obj_x0);
                                double y1 = Convert.ToDouble(obj_y0);

                                if (dt_sides.Rows.Count < 1)
                                {
                                    dt_sides.Rows.Add();
                                }

                                dt_sides.Rows[0][dtcol3] = new Point2d(x1, y1);
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into sides atws geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2);
                        j = values1.Length + 1;
                    }
                }
                else
                {
                    j = values1.Length + 1;
                }
            }


        }
        private void build_dt_ar_perm_left_from_config_excel(Worksheet W1)
        {
            if (dt_ar == null || dt_ar.Rows.Count == 0)
            {
                dt_ar_side_left_p = null;
                return;
            }

            dt_ar_side_left_p = new System.Data.DataTable();

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;


            for (int j = 1; j <= values1.Length; j += 5)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                object col_name_val3 = values1[1, j + 2];
                object col_name_val4 = values1[1, j + 3];
                object col_name_val5 = values1[1, j + 4];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    string dtcol3 = Convert.ToString(col_name_val3).Replace("X ", "");
                    string dtcol4 = Convert.ToString(col_name_val4).Replace("Y ", "");
                    string dtcol5 = Convert.ToString(col_name_val5);

                    if (dtcol1 == dtcol2 && dtcol3 == dtcol4)
                    {
                        dt_ar_side_left_p.Columns.Add(dtcol1, typeof(Point2d));
                        dt_ar_side_left_p.Columns.Add(dtcol3, typeof(Point2d));
                        dt_ar_side_left_p.Columns.Add(dtcol5, typeof(double));


                        string col1 = Functions.get_excel_column_letter(j);
                        string col4 = Functions.get_excel_column_letter(j + 4);

                        Range range2 = W1.Range[col1 + "2:" + col4 + "30001"];
                        object[,] values2 = new object[30000, 5];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 5; ++i)
                        {
                            object obj_x1 = values2[i, 1];
                            object obj_y1 = values2[i, 2];
                            object obj_x2 = values2[i, 3];
                            object obj_y2 = values2[i, 4];
                            object obj_lw = values2[i, 5];
                            if (obj_x1 != null && obj_y1 != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x1)) == true && Functions.IsNumeric(Convert.ToString(obj_y1)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x1);
                                    double y1 = Convert.ToDouble(obj_y1);

                                    if (dt_ar_side_left_p.Rows.Count == i - 1)
                                    {
                                        dt_ar_side_left_p.Rows.Add();
                                    }


                                    dt_ar_side_left_p.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }

                            if (obj_x2 != null && obj_y2 != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x2)) == true && Functions.IsNumeric(Convert.ToString(obj_y2)) == true)
                                {
                                    double x2 = Convert.ToDouble(obj_x2);
                                    double y2 = Convert.ToDouble(obj_y2);

                                    if (dt_ar_side_left_p.Rows.Count == i - 1)
                                    {
                                        dt_ar_side_left_p.Rows.Add();
                                    }


                                    dt_ar_side_left_p.Rows[i - 1][dtcol3] = new Point2d(x2, y2);

                                }
                            }

                            if (obj_lw != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_lw)) == true)
                                {
                                    double lw = Convert.ToDouble(obj_lw);

                                    if (dt_ar_side_left_p.Rows.Count == i - 1)
                                    {
                                        dt_ar_side_left_p.Rows.Add();
                                    }


                                    dt_ar_side_left_p.Rows[i - 1][dtcol5] = lw;

                                }
                            }


                            if (obj_x1 == null && obj_y1 == null && obj_x2 == null && obj_y2 == null)
                            {
                                i = values2.Length;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into access road permanent left geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2 + "\r\n" + dtcol3 + "\r\n" + dtcol4);
                        j = values1.Length + 1;
                    }




                }
                else
                {
                    j = values1.Length + 1;
                }
            }


            //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_manual_atws);

        }

        private void build_dt_ar_perm_right_from_config_excel(Worksheet W1)
        {
            if (dt_ar == null || dt_ar.Rows.Count == 0)
            {
                dt_ar_side_right_p = null;
                return;
            }

            dt_ar_side_right_p = new System.Data.DataTable();

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;


            for (int j = 1; j <= values1.Length; j += 5)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                object col_name_val3 = values1[1, j + 2];
                object col_name_val4 = values1[1, j + 3];
                object col_name_val5 = values1[1, j + 4];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    string dtcol3 = Convert.ToString(col_name_val3).Replace("X ", "");
                    string dtcol4 = Convert.ToString(col_name_val4).Replace("Y ", "");
                    string dtcol5 = Convert.ToString(col_name_val5);

                    if (dtcol1 == dtcol2 && dtcol3 == dtcol4)
                    {
                        dt_ar_side_right_p.Columns.Add(dtcol1, typeof(Point2d));
                        dt_ar_side_right_p.Columns.Add(dtcol3, typeof(Point2d));
                        dt_ar_side_right_p.Columns.Add(dtcol5, typeof(double));


                        string col1 = Functions.get_excel_column_letter(j);
                        string col4 = Functions.get_excel_column_letter(j + 4);

                        Range range2 = W1.Range[col1 + "2:" + col4 + "30001"];
                        object[,] values2 = new object[30000, 5];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 5; ++i)
                        {
                            object obj_x1 = values2[i, 1];
                            object obj_y1 = values2[i, 2];
                            object obj_x2 = values2[i, 3];
                            object obj_y2 = values2[i, 4];
                            object obj_lw = values2[i, 5];
                            if (obj_x1 != null && obj_y1 != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x1)) == true && Functions.IsNumeric(Convert.ToString(obj_y1)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x1);
                                    double y1 = Convert.ToDouble(obj_y1);

                                    if (dt_ar_side_right_p.Rows.Count == i - 1)
                                    {
                                        dt_ar_side_right_p.Rows.Add();
                                    }


                                    dt_ar_side_right_p.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }

                            if (obj_x2 != null && obj_y2 != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x2)) == true && Functions.IsNumeric(Convert.ToString(obj_y2)) == true)
                                {
                                    double x2 = Convert.ToDouble(obj_x2);
                                    double y2 = Convert.ToDouble(obj_y2);

                                    if (dt_ar_side_right_p.Rows.Count == i - 1)
                                    {
                                        dt_ar_side_right_p.Rows.Add();
                                    }


                                    dt_ar_side_right_p.Rows[i - 1][dtcol3] = new Point2d(x2, y2);

                                }
                            }

                            if (obj_lw != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_lw)) == true)
                                {
                                    double lw = Convert.ToDouble(obj_lw);

                                    if (dt_ar_side_right_p.Rows.Count == i - 1)
                                    {
                                        dt_ar_side_right_p.Rows.Add();
                                    }


                                    dt_ar_side_right_p.Rows[i - 1][dtcol5] = lw;

                                }
                            }


                            if (obj_x1 == null && obj_y1 == null && obj_x2 == null && obj_y2 == null)
                            {
                                i = values2.Length;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into access road permanent right geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2 + "\r\n" + dtcol3 + "\r\n" + dtcol4);
                        j = values1.Length + 1;
                    }




                }
                else
                {
                    j = values1.Length + 1;
                }
            }


            //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_manual_atws);

        }

        private void build_dt_ar_temp_from_config_excel(Worksheet W1)
        {
            if (dt_ar == null || dt_ar.Rows.Count == 0)
            {
                dt_ar_temp = null;
                return;
            }

            dt_ar_temp = new System.Data.DataTable();

            string last_col = Functions.get_excel_column_letter(10000);

            Range range1 = W1.Range["A1:" + last_col + "1"];
            object[,] values1 = new object[1, 10000];
            values1 = range1.Value2;


            for (int j = 1; j <= values1.Length; j += 5)
            {
                object col_name_val1 = values1[1, j];
                object col_name_val2 = values1[1, j + 1];
                object col_name_val3 = values1[1, j + 2];
                object col_name_val4 = values1[1, j + 3];
                object col_name_val5 = values1[1, j + 4];
                if (col_name_val1 != null && col_name_val2 != null)
                {
                    string dtcol1 = Convert.ToString(col_name_val1).Replace("X ", "");
                    string dtcol2 = Convert.ToString(col_name_val2).Replace("Y ", "");

                    string dtcol3 = Convert.ToString(col_name_val3).Replace("X ", "");
                    string dtcol4 = Convert.ToString(col_name_val4).Replace("Y ", "");
                    string dtcol5 = Convert.ToString(col_name_val5);

                    if (dtcol1 == dtcol2 && dtcol3 == dtcol4)
                    {
                        dt_ar_temp.Columns.Add(dtcol1, typeof(Point2d));
                        dt_ar_temp.Columns.Add(dtcol3, typeof(Point2d));
                        dt_ar_temp.Columns.Add(dtcol5, typeof(double));


                        string col1 = Functions.get_excel_column_letter(j);
                        string col4 = Functions.get_excel_column_letter(j + 4);

                        Range range2 = W1.Range[col1 + "2:" + col4 + "30001"];
                        object[,] values2 = new object[30000, 5];
                        values2 = range2.Value2;

                        for (int i = 1; i <= values2.Length / 5; ++i)
                        {
                            object obj_x1 = values2[i, 1];
                            object obj_y1 = values2[i, 2];
                            object obj_x2 = values2[i, 3];
                            object obj_y2 = values2[i, 4];
                            object obj_lw = values2[i, 5];
                            if (obj_x1 != null && obj_y1 != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x1)) == true && Functions.IsNumeric(Convert.ToString(obj_y1)) == true)
                                {
                                    double x1 = Convert.ToDouble(obj_x1);
                                    double y1 = Convert.ToDouble(obj_y1);

                                    if (dt_ar_temp.Rows.Count == i - 1)
                                    {
                                        dt_ar_temp.Rows.Add();
                                    }


                                    dt_ar_temp.Rows[i - 1][dtcol1] = new Point2d(x1, y1);

                                }
                            }

                            if (obj_x2 != null && obj_y2 != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_x2)) == true && Functions.IsNumeric(Convert.ToString(obj_y2)) == true)
                                {
                                    double x2 = Convert.ToDouble(obj_x2);
                                    double y2 = Convert.ToDouble(obj_y2);

                                    if (dt_ar_temp.Rows.Count == i - 1)
                                    {
                                        dt_ar_temp.Rows.Add();
                                    }


                                    dt_ar_temp.Rows[i - 1][dtcol3] = new Point2d(x2, y2);

                                }
                            }

                            if (obj_lw != null)
                            {
                                if (Functions.IsNumeric(Convert.ToString(obj_lw)) == true)
                                {
                                    double lw = Convert.ToDouble(obj_lw);

                                    if (dt_ar_temp.Rows.Count == i - 1)
                                    {
                                        dt_ar_temp.Rows.Add();
                                    }


                                    dt_ar_temp.Rows[i - 1][dtcol5] = lw;

                                }
                            }


                            if (obj_x1 == null && obj_y1 == null && obj_x2 == null && obj_y2 == null)
                            {
                                i = values2.Length;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("there are issues with column names into access road temp geometry tab\r\n" + dtcol1 + "\r\n" + dtcol2 + "\r\n" + dtcol3 + "\r\n" + dtcol4);
                        j = values1.Length + 1;
                    }




                }
                else
                {
                    j = values1.Length + 1;
                }
            }


            //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_manual_atws);

        }

        private void comboBox_atws_od_name_DropDown(object sender, EventArgs e)
        {
            try
            {
                Functions.load_object_data_table_name_to_combobox(comboBox_atws_od_name);
                if (comboBox_atws_od_name.Items.Count == 1)
                {
                    comboBox_atws_od_field.Items.Clear();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void comboBox_atws_od_name_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                Functions.load_object_data_fieds_to_combobox(comboBox_atws_od_name, comboBox_atws_od_field);
            }
            catch (System.Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        private void checkBox_atws_use_length_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox_atws_use_length.Checked == true)
            {
                textBox_atws_length.Visible = true;
            }
            else
            {
                textBox_atws_length.Visible = false;
            }
        }
        private void radioButton_atws_custom_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton_atws_custom.Checked == false)
            {
                comboBox_atws_preset.Visible = true;
                checkBox_atws_use_length.Checked = true;
                textBox_atws_length.ReadOnly = true;
                textBox_atws_width.ReadOnly = true;
                button_atws_add_dim_preset.Visible = true;

            }
            else
            {
                comboBox_atws_preset.Visible = false;
                textBox_atws_length.ReadOnly = false;
                textBox_atws_width.ReadOnly = false;
                button_atws_add_dim_preset.Visible = false;
            }
        }
        private void button_draw_custom_atws_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                MessageBox.Show("no centerline loaded\r\noperation aborted");
                return;
            }

            if (dt_lod_left == null || dt_lod_right == null || dt_lod_left.Rows.Count == 0 || dt_lod_right.Rows.Count == 0)
            {
                MessageBox.Show("no corridor outlines defined\r\ndraft first the corridor defined from workspace library\r\noperation aborted");
                return;
            }

            if (Functions.IsNumeric(textBox_atws_width.Text) == false)
            {
                MessageBox.Show("no atws width specified\r\noperation aborted");
                return;
            }

            if (checkBox_atws_use_length.Checked == true)
            {
                if (Functions.IsNumeric(textBox_atws_length.Text) == false)
                {
                    MessageBox.Show("no atws length specified\r\noperation aborted");
                    return;
                }
            }

            if (checkBox_use_od.Checked == true)
            {
                if (radioButton_justif_custom.Checked == true)
                {
                    if (textBox_atws_justification.Text == "")
                    {
                        MessageBox.Show("no justification specified\r\noperation aborted");
                        return;
                    }
                }
                else
                {
                    if (comboBox_atws_justif.Text == "")
                    {
                        MessageBox.Show("no justification specified\r\noperation aborted");
                        return;
                    }

                }
            }


            if (checkBox_use_od.Checked == true && comboBox_atws_od_name.Text == "")
            {
                MessageBox.Show("no object data table selected\r\noperation aborted");
                return;
            }
            if (checkBox_use_od.Checked == true && comboBox_atws_od_field.Text == "")
            {
                MessageBox.Show("no object data field selected\r\noperation aborted");
                return;
            }

            if (comboBox_layer_atws.Text == "")
            {
                MessageBox.Show("no atws layer specified\r\noperation aborted");
                return;
            }

            List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
            List<string> lista_od_atws_justif = new List<string>();

            col_side1 = null;
            col_side2 = null;

            if (radioButton_justif_custom.Checked == true)
            {
                lista_od_atws_justif.Add(textBox_atws_justification.Text);
            }
            else
            {
                lista_od_atws_justif.Add(comboBox_atws_justif.Text);
            }


            double width1 = Math.Abs(Convert.ToDouble(textBox_atws_width.Text));

            double length1 = 0;

            if (checkBox_atws_use_length.Checked == true)
            {
                length1 = Math.Abs(Convert.ToDouble(textBox_atws_length.Text));
            }

            string ask_for_2nd_pt = "\nSpecify ATWS end point";

            if (dt_atws == null)
            {
                dt_atws = get_dt_atws_structure();
            }


            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        Polyline lod1_left = create_lod_construction_polylines(1, "LEFT");
                        Polyline lod2_left = create_lod_construction_polylines(2, "LEFT");
                        Polyline lod4_left = create_lod_construction_polylines(4, "LEFT");


                        Polyline lod1_right = create_lod_construction_polylines(1, "RIGHT");
                        Polyline lod2_right = create_lod_construction_polylines(2, "RIGHT");
                        Polyline lod4_right = create_lod_construction_polylines(4, "RIGHT");

                        Polyline polyCL = new Polyline();
                        Polyline buffer1 = null;
                        Polyline buffer2 = null;
                        Polyline feature1 = null;
                        Polyline feature2 = null;
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                        }

                        this.WindowState = FormWindowState.Minimized;
                        string atws_layer = comboBox_layer_atws.Text;
                        Functions.Creaza_layer(atws_layer, 3, true);


                        if (dt_atws == null)
                        {
                            dt_atws = get_dt_atws_structure();
                        }

                        Point3d pt_start = new Point3d();
                        Point3d pt_end = new Point3d();
                        Polyline edge1 = null;
                        bool edge_at_start = true;
                        bool is_left = true;
                        bool is_middle = false;
                        bool is_buffer1 = false;
                        bool is_buffer2 = false;
                        bool is_feature1 = false;
                        bool is_feature2 = false;
                        bool is_increasing_feat1 = true;
                        bool is_increasing_feat2 = false;

                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res1;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions pp1;
                        pp1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("");
                        pp1.Message = "\nSpecify ATWS starting point";
                        //pp1.Keywords.Add("Edge");
                        if (checkBox_atws_use_length.Checked == true && Functions.IsNumeric(textBox_atws_length.Text) == true)
                        {
                            pp1.Keywords.Add("Middle");
                        }
                        pp1.Keywords.Add("Buffer");
                        pp1.Keywords.Add("Feature");



                        pp1.AllowNone = false;

                        Point_res1 = Editor1.GetPoint(pp1);


                        if (Point_res1.Status != PromptStatus.OK && Point_res1.Status != PromptStatus.Keyword)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        Point3d pt1 = new Point3d();
                        Point3d pt_e2 = new Point3d();

                        PromptPointOptions ppb;
                        ppb = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nEdge first point:");
                        ppb.AllowNone = false;
                        PromptPointOptions ppc;
                        ppc = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nEdge second point:");
                        ppc.AllowNone = false;
                        PromptPointOptions ppm;
                        ppm = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify mid point:");
                        ppm.AllowNone = false;
                        if (Point_res1.Status == PromptStatus.Keyword)
                        {
                            #region keyword edge
                            if (Point_res1.StringResult.ToLower() == "edge")
                            {
                                PromptPointResult Point_resb = Editor1.GetPoint(ppb);

                                if (Point_resb.Status != PromptStatus.OK)
                                {
                                    this.WindowState = FormWindowState.Normal;
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }

                                pt1 = Point_resb.Value;
                                ppc.UseBasePoint = true;
                                ppc.BasePoint = pt1;

                                PromptPointResult Point_resc = Editor1.GetPoint(ppc);
                                if (Point_resc.Status != PromptStatus.OK)
                                {
                                    this.WindowState = FormWindowState.Normal;
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }
                                pt_e2 = Point_resc.Value;

                                edge1 = new Polyline();
                                edge1.AddVertexAt(0, new Point2d(pt1.X, pt1.Y), 0, 0, 0);
                                edge1.AddVertexAt(1, new Point2d(pt_e2.X, pt_e2.Y), 0, 0, 0);


                                Point3dCollection col_edge_left_int = new Point3dCollection();
                                lod4_left.IntersectWith(edge1, Intersect.ExtendArgument, col_edge_left_int, IntPtr.Zero, IntPtr.Zero);

                                if (col_edge_left_int.Count == 0)
                                {
                                    this.WindowState = FormWindowState.Normal;
                                    MessageBox.Show("the edge does not intersect the boundary");
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }

                                double d_edge1 = -1;
                                double min_dist = 100000;

                                int index_int_left = 0;
                                if (col_edge_left_int.Count > 0)
                                {
                                    Point3d p_left = edge1.GetClosestPointTo(col_edge_left_int[0], Vector3d.ZAxis, false);
                                    d_edge1 = Math.Pow(Math.Pow(p_left.X - col_edge_left_int[0].X, 2) + Math.Pow(p_left.Y - col_edge_left_int[0].Y, 2), 0.5);
                                    min_dist = Math.Pow(Math.Pow(pt1.X - col_edge_left_int[0].X, 2) + Math.Pow(pt1.Y - col_edge_left_int[0].Y, 2), 0.5);

                                }

                                if (col_edge_left_int.Count > 1)
                                {
                                    for (int k = 1; k < col_edge_left_int.Count; ++k)
                                    {

                                        Point3d p_left = edge1.GetClosestPointTo(col_edge_left_int[k], Vector3d.ZAxis, false);
                                        double d_edge3 = Math.Pow(Math.Pow(p_left.X - col_edge_left_int[k].X, 2) + Math.Pow(p_left.Y - col_edge_left_int[k].Y, 2), 0.5);
                                        double d_pt1 = Math.Pow(Math.Pow(pt1.X - col_edge_left_int[k].X, 2) + Math.Pow(pt1.Y - col_edge_left_int[k].Y, 2), 0.5);
                                        if (d_pt1 < min_dist)
                                        {
                                            min_dist = d_pt1;
                                            index_int_left = k;
                                            d_edge1 = d_edge3;
                                        }
                                    }
                                }




                                Point3dCollection col_edge_right_int = new Point3dCollection();
                                lod4_right.IntersectWith(edge1, Intersect.ExtendArgument, col_edge_right_int, IntPtr.Zero, IntPtr.Zero);

                                if (col_edge_right_int.Count == 0)
                                {
                                    this.WindowState = FormWindowState.Normal;
                                    MessageBox.Show("the edge does not intersect the boundary");
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }

                                double d_edge2 = -1;
                                min_dist = 100000;

                                int index_int_right = 0;
                                if (col_edge_right_int.Count > 0)
                                {
                                    Point3d p_right = edge1.GetClosestPointTo(col_edge_right_int[0], Vector3d.ZAxis, false);
                                    d_edge2 = Math.Pow(Math.Pow(p_right.X - col_edge_right_int[0].X, 2) + Math.Pow(p_right.Y - col_edge_right_int[0].Y, 2), 0.5);
                                    min_dist = Math.Pow(Math.Pow(pt1.X - col_edge_right_int[0].X, 2) + Math.Pow(pt1.Y - col_edge_right_int[0].Y, 2), 0.5);
                                }

                                if (col_edge_right_int.Count > 1)
                                {
                                    for (int k = 1; k < col_edge_right_int.Count; ++k)
                                    {
                                        Point3d p_right = edge1.GetClosestPointTo(col_edge_right_int[k], Vector3d.ZAxis, false);
                                        double d_edge3 = Math.Pow(Math.Pow(p_right.X - col_edge_right_int[k].X, 2) + Math.Pow(p_right.Y - col_edge_right_int[k].Y, 2), 0.5);
                                        double d_pt1 = Math.Pow(Math.Pow(pt1.X - col_edge_right_int[k].X, 2) + Math.Pow(pt1.Y - col_edge_right_int[k].Y, 2), 0.5);
                                        if (d_pt1 < min_dist)
                                        {
                                            min_dist = d_pt1;
                                            index_int_right = k;
                                            d_edge2 = d_edge3;
                                        }
                                    }
                                }
                                if (col_edge_left_int.Count > 0 && d_edge1 < d_edge2)
                                {
                                    pt1 = col_edge_left_int[index_int_left];
                                }
                                else if (col_edge_right_int.Count > 0 && d_edge2 < d_edge1)
                                {
                                    pt1 = col_edge_right_int[index_int_right];
                                }
                            }
                            #endregion

                            #region keyword middle
                            if (Point_res1.StringResult.ToLower() == "middle")
                            {
                                PromptPointResult Point_resm = Editor1.GetPoint(ppm);
                                if (Point_resm.Status != PromptStatus.OK)
                                {
                                    this.WindowState = FormWindowState.Normal;
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }
                                pt1 = Point_resm.Value;
                                is_middle = true;
                            }
                            #endregion

                            #region Buffer
                            if (Point_res1.StringResult.ToLower() == "buffer")
                            {
                                ask_for_2nd_pt = "\nSpecify ATWS end point";
                                if (checkBox_atws_use_length.Checked == true)
                                {
                                    ask_for_2nd_pt = "\nSpecify ATWS direction";
                                }
                                Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_buffer;
                                Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_buffer;
                                Prompt_buffer = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the buffer polyline:");
                                Prompt_buffer.SetRejectMessage("\nSelect a polyline!");
                                Prompt_buffer.AllowNone = true;
                                Prompt_buffer.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                                Rezultat_buffer = ThisDrawing.Editor.GetEntity(Prompt_buffer);

                                if (Rezultat_buffer.Status != PromptStatus.OK)
                                {
                                    this.WindowState = FormWindowState.Normal;
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }

                                buffer1 = Trans1.GetObject(Rezultat_buffer.ObjectId, OpenMode.ForWrite) as Polyline;
                                if (buffer1 != null)
                                {
                                    buffer1.Elevation = 0;
                                    Point3d pickedpt = Rezultat_buffer.PickedPoint;
                                    Point3d pt_on_left_buff = lod4_left.GetClosestPointTo(pickedpt, Vector3d.ZAxis, false);
                                    Point3d pt_on_right_buff = lod4_right.GetClosestPointTo(pickedpt, Vector3d.ZAxis, false);
                                    double d_left_buffer = Math.Pow(Math.Pow(pickedpt.X - pt_on_left_buff.X, 2) + Math.Pow(pickedpt.Y - pt_on_left_buff.Y, 2), 0.5);
                                    double d_right_buffer = Math.Pow(Math.Pow(pickedpt.X - pt_on_right_buff.X, 2) + Math.Pow(pickedpt.Y - pt_on_right_buff.Y, 2), 0.5);

                                    if (d_left_buffer > d_right_buffer)
                                    {
                                        is_left = false;
                                    }

                                    if (is_left == true)
                                    {
                                        Point3dCollection col_int_l = Functions.Intersect_on_both_operands(lod4_left, buffer1);


                                        if (col_int_l.Count == 1)
                                        {
                                            pt_start = col_int_l[0];
                                            is_buffer1 = true;
                                        }
                                        else
                                        {
                                            if (col_int_l.Count > 0)
                                            {
                                                is_buffer1 = true;
                                                Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_buff1;
                                                Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                                                PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the buffer start point");
                                                PP1.AllowNone = false;
                                                Point_res_buff1 = Editor1.GetPoint(PP1);

                                                if (Point_res_buff1.Status != PromptStatus.OK)
                                                {
                                                    this.WindowState = FormWindowState.Normal;
                                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                    set_enable_true();
                                                    return;
                                                }
                                                Point3d pp1_buff = Point_res_buff1.Value;
                                                double d1 = 1000;
                                                for (int n = 0; n < col_int_l.Count; ++n)
                                                {
                                                    Point3d pp2 = col_int_l[n];
                                                    double d2 = Math.Pow(Math.Pow(pp1_buff.X - pp2.X, 2) + Math.Pow(pp1_buff.Y - pp2.Y, 2), 0.5);
                                                    if (d2 < d1)
                                                    {
                                                        d1 = d2;
                                                        pt_start = pp2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (is_left == false)
                                    {
                                        Point3dCollection col_int_r = Functions.Intersect_on_both_operands(lod4_right, buffer1);

                                        if (col_int_r.Count == 1)
                                        {
                                            pt_start = col_int_r[0];
                                            is_buffer1 = true;
                                        }
                                        else
                                        {
                                            if (col_int_r.Count > 0)
                                            {
                                                is_buffer1 = true;

                                                Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_buff1;
                                                Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                                                PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the buffer start point");
                                                PP1.AllowNone = false;
                                                Point_res_buff1 = Editor1.GetPoint(PP1);
                                                if (Point_res_buff1.Status != PromptStatus.OK)
                                                {
                                                    this.WindowState = FormWindowState.Normal;
                                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                    set_enable_true();
                                                    return;
                                                }
                                                Point3d pp1_buff = Point_res_buff1.Value;
                                                double d1 = 1000;
                                                for (int n = 0; n < col_int_r.Count; ++n)
                                                {
                                                    Point3d pp2 = col_int_r[n];
                                                    double d2 = Math.Pow(Math.Pow(pp1_buff.X - pp2.X, 2) + Math.Pow(pp1_buff.Y - pp2.Y, 2), 0.5);
                                                    if (d2 < d1)
                                                    {
                                                        d1 = d2;
                                                        pt_start = pp2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Feature
                            if (Point_res1.StringResult.ToLower() == "feature")
                            {
                                ask_for_2nd_pt = "\nSpecify ATWS end point";
                                if (checkBox_atws_use_length.Checked == true)
                                {
                                    ask_for_2nd_pt = "\nSpecify ATWS direction";
                                }
                                Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_feat1;
                                Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_feat1;
                                Prompt_feat1 = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the feature polyline:");
                                Prompt_feat1.SetRejectMessage("\nSelect a polyline!");
                                Prompt_feat1.AllowNone = true;
                                Prompt_feat1.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                                Rezultat_feat1 = ThisDrawing.Editor.GetEntity(Prompt_feat1);

                                if (Rezultat_feat1.Status != PromptStatus.OK)
                                {
                                    this.WindowState = FormWindowState.Normal;
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }

                                feature1 = Trans1.GetObject(Rezultat_feat1.ObjectId, OpenMode.ForWrite) as Polyline;
                                if (feature1 != null)
                                {
                                    feature1.Elevation = 0;



                                    Point3d pickedpt = Rezultat_feat1.PickedPoint;
                                    Point3d pt_on_left_feat1 = lod4_left.GetClosestPointTo(pickedpt, Vector3d.ZAxis, false);
                                    Point3d pt_on_right_feat1 = lod4_right.GetClosestPointTo(pickedpt, Vector3d.ZAxis, false);
                                    double d_left_feat1 = Math.Pow(Math.Pow(pickedpt.X - pt_on_left_feat1.X, 2) + Math.Pow(pickedpt.Y - pt_on_left_feat1.Y, 2), 0.5);
                                    double d_right_feat1 = Math.Pow(Math.Pow(pickedpt.X - pt_on_right_feat1.X, 2) + Math.Pow(pickedpt.Y - pt_on_right_feat1.Y, 2), 0.5);

                                    if (d_left_feat1 > d_right_feat1)
                                    {
                                        is_left = false;
                                    }

                                    if (is_left == true)
                                    {

                                        Polyline lod4_left_offset = get_offset_polyline(lod4_left, -width1);
                                        feature1 = make_polyline_start_point_outside_corridor(lod4_left, lod4_left_offset, feature1);
                                        Point3dCollection col_int_l = Functions.Intersect_on_both_operands(lod4_left, feature1);


                                        if (col_int_l.Count == 1)
                                        {
                                            pt_start = col_int_l[0];
                                            is_feature1 = true;

                                        }
                                        else
                                        {
                                            if (col_int_l.Count > 0)
                                            {
                                                is_feature1 = true;

                                                Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_feat1;
                                                Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                                                PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the feature point");
                                                PP1.AllowNone = false;
                                                Point_res_feat1 = Editor1.GetPoint(PP1);

                                                if (Point_res_feat1.Status != PromptStatus.OK)
                                                {
                                                    this.WindowState = FormWindowState.Normal;
                                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                    set_enable_true();
                                                    return;
                                                }
                                                Point3d pp1_feat = Point_res_feat1.Value;
                                                double d1 = 1000;
                                                for (int n = 0; n < col_int_l.Count; ++n)
                                                {
                                                    Point3d pp2 = col_int_l[n];
                                                    double d2 = Math.Pow(Math.Pow(pp1_feat.X - pp2.X, 2) + Math.Pow(pp1_feat.Y - pp2.Y, 2), 0.5);
                                                    if (d2 < d1)
                                                    {
                                                        d1 = d2;
                                                        pt_start = pp2;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (is_left == false)
                                    {
                                        Polyline lod4_right_offset = get_offset_polyline(lod4_left, width1);
                                        feature1 = make_polyline_start_point_outside_corridor(lod4_right, lod4_right_offset, feature1);
                                        Point3dCollection col_int_r = Functions.Intersect_on_both_operands(lod4_right, feature1);


                                        if (col_int_r.Count == 1)
                                        {
                                            pt_start = col_int_r[0];
                                            is_feature1 = true;
                                        }
                                        else
                                        {
                                            if (col_int_r.Count > 0)
                                            {
                                                is_feature1 = true;

                                                Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_feat1;
                                                Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                                                PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the feature point");
                                                PP1.AllowNone = false;
                                                Point_res_feat1 = Editor1.GetPoint(PP1);
                                                if (Point_res_feat1.Status != PromptStatus.OK)
                                                {
                                                    this.WindowState = FormWindowState.Normal;
                                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                    set_enable_true();
                                                    return;
                                                }
                                                Point3d pp1_feat1 = Point_res_feat1.Value;
                                                double d1 = 1000;
                                                for (int n = 0; n < col_int_r.Count; ++n)
                                                {
                                                    Point3d pp2 = col_int_r[n];
                                                    double d2 = Math.Pow(Math.Pow(pp1_feat1.X - pp2.X, 2) + Math.Pow(pp1_feat1.Y - pp2.Y, 2), 0.5);
                                                    if (d2 < d1)
                                                    {
                                                        d1 = d2;
                                                        pt_start = pp2;
                                                    }
                                                }
                                            }
                                        }
                                    }




                                }
                            }
                            #endregion
                        }
                        else
                        {
                            pt1 = Point_res1.Value;
                        }

                        if (is_buffer1 == false && is_feature1 == false)
                        {
                            Point3d pt_on_left = lod4_left.GetClosestPointTo(pt1, Vector3d.ZAxis, false);
                            Point3d pt_on_right = lod4_right.GetClosestPointTo(pt1, Vector3d.ZAxis, false);
                            double d_left = Math.Pow(Math.Pow(pt1.X - pt_on_left.X, 2) + Math.Pow(pt1.Y - pt_on_left.Y, 2), 0.5);
                            double d_right = Math.Pow(Math.Pow(pt1.X - pt_on_right.X, 2) + Math.Pow(pt1.Y - pt_on_right.Y, 2), 0.5);
                            if (d_left < d_right)
                            {
                                pt_start = pt_on_left;
                            }
                            else
                            {
                                pt_start = pt_on_right;
                                is_left = false;
                            }
                            if (is_middle == true)
                            {
                                if (is_left == true)
                                {
                                    double Sta_m = lod4_left.GetDistAtPoint(pt_on_left);
                                    double len1 = Math.Abs(Convert.ToDouble(textBox_atws_length.Text));
                                    double Sta_start = Sta_m - len1 / 2;
                                    double Sta_end = Sta_m + len1 / 2;
                                    if (Sta_start < 0) Sta_start = 0;
                                    if (Sta_end > lod4_left.Length) Sta_end = lod4_left.Length - 0.001;
                                    pt_start = lod4_left.GetPointAtDist(Sta_start);
                                    pt_end = lod4_left.GetPointAtDist(Sta_end);
                                }
                                else if (is_left == false)
                                {
                                    double Sta_m = lod4_right.GetDistAtPoint(pt_on_right);
                                    double len1 = Math.Abs(Convert.ToDouble(textBox_atws_length.Text));
                                    double Sta_start = Sta_m - len1 / 2;
                                    double Sta_end = Sta_m + len1 / 2;
                                    if (Sta_start < 0) Sta_start = 0;
                                    if (Sta_end > lod4_right.Length) Sta_end = lod4_right.Length - 0.001;
                                    pt_start = lod4_right.GetPointAtDist(Sta_start);
                                    pt_end = lod4_right.GetPointAtDist(Sta_end);
                                }
                            }
                        }


                        if (is_middle == false)
                        {
                            if (checkBox_atws_use_length.Checked == true)
                            {
                                ask_for_2nd_pt = "\nSpecify ATWS direction";
                            }

                            Point3d pt2 = new Point3d();


                            Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res2;
                            Autodesk.AutoCAD.EditorInput.PromptPointOptions pp2;
                            pp2 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions(ask_for_2nd_pt);
                            pp2.AllowNone = false;
                            pp2.UseBasePoint = true;
                            pp2.BasePoint = pt_start;
                            pp2.Keywords.Add("Feature");
                            if (checkBox_atws_use_length.Checked == false) pp2.Keywords.Add("Buffer");
                            Point_res2 = Editor1.GetPoint(pp2);


                            if (Point_res2.Status != PromptStatus.OK && Point_res2.Status != PromptStatus.Keyword)
                            {
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            if (Point_res2.Status == PromptStatus.Keyword)
                            {

                                #region Feature
                                if (Point_res2.StringResult.ToLower() == "feature")
                                {

                                    Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_feat2;
                                    Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_feat2;
                                    Prompt_feat2 = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the feature polyline:");
                                    Prompt_feat2.SetRejectMessage("\nSelect a polyline!");
                                    Prompt_feat2.AllowNone = true;
                                    Prompt_feat2.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                                    Rezultat_feat2 = ThisDrawing.Editor.GetEntity(Prompt_feat2);

                                    if (Rezultat_feat2.Status != PromptStatus.OK)
                                    {
                                        this.WindowState = FormWindowState.Normal;
                                        ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                        set_enable_true();
                                        return;
                                    }

                                    feature2 = Trans1.GetObject(Rezultat_feat2.ObjectId, OpenMode.ForWrite) as Polyline;
                                    if (feature2 != null)
                                    {
                                        feature2.Elevation = 0;


                                        if (is_left == true)
                                        {
                                            Point3dCollection col_int_l = Functions.Intersect_on_both_operands(lod4_left, feature2);


                                            if (col_int_l.Count == 1)
                                            {
                                                pt_end = col_int_l[0];
                                                is_feature2 = true;

                                            }
                                            else
                                            {
                                                if (col_int_l.Count > 0)
                                                {
                                                    is_feature2 = true;

                                                    Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_feat2;
                                                    Autodesk.AutoCAD.EditorInput.PromptPointOptions pp2lf;
                                                    pp2lf = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the feature point");
                                                    pp2lf.AllowNone = false;
                                                    Point_res_feat2 = Editor1.GetPoint(pp2lf);

                                                    if (Point_res_feat2.Status != PromptStatus.OK)
                                                    {
                                                        this.WindowState = FormWindowState.Normal;
                                                        ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                        set_enable_true();
                                                        return;
                                                    }
                                                    Point3d pp1_feat = Point_res_feat2.Value;
                                                    double d1 = 1000;
                                                    for (int n = 0; n < col_int_l.Count; ++n)
                                                    {
                                                        Point3d pp2f = col_int_l[n];
                                                        double d2 = Math.Pow(Math.Pow(pp1_feat.X - pp2f.X, 2) + Math.Pow(pp1_feat.Y - pp2f.Y, 2), 0.5);
                                                        if (d2 < d1)
                                                        {
                                                            d1 = d2;
                                                            pt_end = pp2f;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (is_left == false)
                                        {
                                            Point3dCollection col_int_r = Functions.Intersect_on_both_operands(lod4_right, feature2);

                                            if (col_int_r.Count == 1)
                                            {
                                                pt_end = col_int_r[0];
                                                is_feature2 = true;
                                            }
                                            else
                                            {
                                                if (col_int_r.Count > 0)
                                                {
                                                    is_feature2 = true;

                                                    Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_feat2;
                                                    Autodesk.AutoCAD.EditorInput.PromptPointOptions pp2f;
                                                    pp2f = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the feature point");
                                                    pp2f.AllowNone = false;
                                                    Point_res_feat2 = Editor1.GetPoint(pp2f);
                                                    if (Point_res_feat2.Status != PromptStatus.OK)
                                                    {
                                                        this.WindowState = FormWindowState.Normal;
                                                        ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                        set_enable_true();
                                                        return;
                                                    }
                                                    Point3d pp1_feat2 = Point_res_feat2.Value;
                                                    double d1 = 1000;
                                                    for (int n = 0; n < col_int_r.Count; ++n)
                                                    {
                                                        Point3d ppf2 = col_int_r[n];
                                                        double d2 = Math.Pow(Math.Pow(pp1_feat2.X - ppf2.X, 2) + Math.Pow(pp1_feat2.Y - ppf2.Y, 2), 0.5);
                                                        if (d2 < d1)
                                                        {
                                                            d1 = d2;
                                                            pt_end = ppf2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Buffer
                                if (Point_res2.StringResult.ToLower() == "buffer")
                                {
                                    Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_buffer;
                                    Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_buffer;
                                    Prompt_buffer = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the buffer polyline:");
                                    Prompt_buffer.SetRejectMessage("\nSelect a polyline!");
                                    Prompt_buffer.AllowNone = true;
                                    Prompt_buffer.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                                    Rezultat_buffer = ThisDrawing.Editor.GetEntity(Prompt_buffer);

                                    if (Rezultat_buffer.Status != PromptStatus.OK)
                                    {
                                        this.WindowState = FormWindowState.Normal;
                                        ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                        set_enable_true();
                                        return;
                                    }


                                    buffer2 = Trans1.GetObject(Rezultat_buffer.ObjectId, OpenMode.ForWrite) as Polyline;
                                    if (buffer2 != null)
                                    {
                                        buffer2.Elevation = 0;
                                        Point3d pickedpt = Rezultat_buffer.PickedPoint;
                                        Point3d pt_on_left_buff = lod4_left.GetClosestPointTo(pickedpt, Vector3d.ZAxis, false);
                                        Point3d pt_on_right_buff = lod4_right.GetClosestPointTo(pickedpt, Vector3d.ZAxis, false);
                                        double d_left_buffer = Math.Pow(Math.Pow(pickedpt.X - pt_on_left_buff.X, 2) + Math.Pow(pickedpt.Y - pt_on_left_buff.Y, 2), 0.5);
                                        double d_right_buffer = Math.Pow(Math.Pow(pickedpt.X - pt_on_right_buff.X, 2) + Math.Pow(pickedpt.Y - pt_on_right_buff.Y, 2), 0.5);

                                        if (d_left_buffer > d_right_buffer)
                                        {
                                            is_left = false;
                                        }

                                        if (is_left == true)
                                        {
                                            Point3dCollection col_int_l = Functions.Intersect_on_both_operands(lod4_left, buffer2);


                                            if (col_int_l.Count == 1)
                                            {
                                                pt_end = col_int_l[0];
                                                is_buffer2 = true;
                                            }
                                            else
                                            {
                                                if (col_int_l.Count > 0)
                                                {
                                                    is_buffer2 = true;
                                                    Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_buff1;
                                                    Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                                                    PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the buffer end point");
                                                    PP1.AllowNone = false;
                                                    Point_res_buff1 = Editor1.GetPoint(PP1);

                                                    if (Point_res_buff1.Status != PromptStatus.OK)
                                                    {
                                                        this.WindowState = FormWindowState.Normal;
                                                        ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                        set_enable_true();
                                                        return;
                                                    }
                                                    Point3d pp1_buff = Point_res_buff1.Value;
                                                    double d1 = 1000;
                                                    for (int n = 0; n < col_int_l.Count; ++n)
                                                    {
                                                        Point3d ppt2 = col_int_l[n];
                                                        double d2 = Math.Pow(Math.Pow(pp1_buff.X - ppt2.X, 2) + Math.Pow(pp1_buff.Y - ppt2.Y, 2), 0.5);
                                                        if (d2 < d1)
                                                        {
                                                            d1 = d2;
                                                            pt_end = ppt2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else if (is_left == false)
                                        {
                                            Point3dCollection col_int_r = Functions.Intersect_on_both_operands(lod4_right, buffer2);

                                            if (col_int_r.Count == 1)
                                            {
                                                pt_end = col_int_r[0];
                                                is_buffer2 = true;
                                            }
                                            else
                                            {
                                                if (col_int_r.Count > 0)
                                                {
                                                    is_buffer2 = true;

                                                    Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_buff1;
                                                    Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                                                    PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the buffer end point");
                                                    PP1.AllowNone = false;
                                                    Point_res_buff1 = Editor1.GetPoint(PP1);
                                                    if (Point_res_buff1.Status != PromptStatus.OK)
                                                    {
                                                        this.WindowState = FormWindowState.Normal;
                                                        ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                        set_enable_true();
                                                        return;
                                                    }
                                                    Point3d pp1_buff = Point_res_buff1.Value;
                                                    double d1 = 1000;
                                                    for (int n = 0; n < col_int_r.Count; ++n)
                                                    {
                                                        Point3d ppt2 = col_int_r[n];
                                                        double d2 = Math.Pow(Math.Pow(pp1_buff.X - ppt2.X, 2) + Math.Pow(pp1_buff.Y - ppt2.Y, 2), 0.5);
                                                        if (d2 < d1)
                                                        {
                                                            d1 = d2;
                                                            pt_end = ppt2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                pt2 = Point_res2.Value;
                            }


                            if (checkBox_atws_use_length.Checked == false)
                            {
                                if (is_feature2 == false && is_buffer2 == false)
                                {
                                    if (is_left == true)
                                    {
                                        pt_end = lod4_left.GetClosestPointTo(pt2, Vector3d.ZAxis, false);
                                    }
                                    else
                                    {
                                        pt_end = lod4_right.GetClosestPointTo(pt2, Vector3d.ZAxis, false);
                                    }
                                }
                            }
                            else
                            {
                                if (is_feature2 == false)
                                {
                                    if (is_left == true)
                                    {
                                        double sta_start = lod4_left.GetDistAtPoint(pt_start);
                                        Point3d pt_2 = lod4_left.GetClosestPointTo(pt2, Vector3d.ZAxis, false);
                                        double sta_at_2 = lod4_left.GetDistAtPoint(pt_2);
                                        if (sta_at_2 > sta_start)
                                        {
                                            pt_end = lod4_left.GetPointAtDist(sta_start + length1);
                                        }
                                        else
                                        {
                                            pt_end = lod4_left.GetPointAtDist(sta_start - length1);
                                        }
                                    }
                                    else
                                    {
                                        double sta_start = lod4_right.GetDistAtPoint(pt_start);
                                        Point3d pt_2 = lod4_right.GetClosestPointTo(pt2, Vector3d.ZAxis, false);
                                        double sta_at_2 = lod4_right.GetDistAtPoint(pt_2);
                                        if (sta_at_2 > sta_start)
                                        {
                                            pt_end = lod4_right.GetPointAtDist(sta_start + length1);
                                        }
                                        else
                                        {
                                            pt_end = lod4_right.GetPointAtDist(sta_start - length1);
                                        }
                                    }
                                }
                            }
                        }

                        if (is_left == true)
                        {
                            #region Left Side

                            #region buffer calcs
                            if (is_buffer1 == true)
                            {
                                Point3dCollection col_int_buffer_left_bottom = Functions.Intersect_on_both_operands(lod4_left, buffer1);

                                Polyline atws_left_top = get_offset_polyline(lod4_left, -width1);

                                Point3dCollection col_int_buffer_left_top = Functions.Intersect_on_both_operands(atws_left_top, buffer1);

                                if (col_int_buffer_left_top.Count > 0 && col_int_buffer_left_bottom.Count > 0)
                                {

                                    int index_int_bottom = 0;
                                    if (col_int_buffer_left_bottom.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_left_bottom[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_start.X, 2) + Math.Pow(p1.Y - pt_start.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_left_bottom.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_left_bottom[n];
                                            double d22 = Math.Pow(Math.Pow(pt_start.X - p2.X, 2) + Math.Pow(pt_start.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_bottom = n;
                                            }

                                        }
                                    }

                                    int index_int_top = 0;
                                    if (col_int_buffer_left_top.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_left_top[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_start.X, 2) + Math.Pow(p1.Y - pt_start.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_left_top.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_left_top[n];
                                            double d22 = Math.Pow(Math.Pow(pt_start.X - p2.X, 2) + Math.Pow(pt_start.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_top = n;
                                            }
                                        }
                                    }

                                    Point3d pt_from_top = lod4_left.GetClosestPointTo(col_int_buffer_left_top[index_int_top], Vector3d.ZAxis, false);
                                    Point3d pt_from_bottom = lod4_left.GetClosestPointTo(col_int_buffer_left_bottom[index_int_bottom], Vector3d.ZAxis, false);

                                    double sta_from_top = lod4_left.GetDistAtPoint(pt_from_top);
                                    double sta_from_bottom = lod4_left.GetDistAtPoint(pt_from_bottom);
                                    double sta_from_end = lod4_left.GetDistAtPoint(pt_end);

                                    double sta_closest_to_end = sta_from_top;
                                    if (Math.Abs(sta_from_end - sta_from_top) > Math.Abs(sta_from_end - sta_from_bottom))
                                    {
                                        sta_closest_to_end = sta_from_bottom;
                                    }

                                    double param_buff_bottom = buffer1.GetParameterAtPoint(col_int_buffer_left_bottom[index_int_bottom]);
                                    double param_buff_top = buffer1.GetParameterAtPoint(col_int_buffer_left_top[index_int_top]);

                                    double par1 = param_buff_bottom;
                                    double par2 = param_buff_top;

                                    if (param_buff_top < param_buff_bottom)
                                    {
                                        par1 = param_buff_top;
                                        par2 = param_buff_bottom;
                                    }
                                    //par1 <par2 all the time

                                    for (int k = Convert.ToInt32(Math.Ceiling(par1)); k < par2; ++k)
                                    {
                                        Point3d pt_3 = lod4_left.GetClosestPointTo(buffer1.GetPointAtParameter(k), Vector3d.ZAxis, false);

                                        double d3 = lod4_left.GetDistAtPoint(pt_3);
                                        if (Math.Abs(sta_from_end - d3) < Math.Abs(sta_from_end - sta_closest_to_end))
                                        {
                                            sta_closest_to_end = d3;
                                        }
                                    }
                                    pt_start = lod4_left.GetPointAtDist(sta_closest_to_end);
                                }
                            }

                            if (is_buffer2 == true)
                            {
                                Point3dCollection col_int_buffer_left_bottom = Functions.Intersect_on_both_operands(lod4_left, buffer2);

                                Polyline atws_left_top = get_offset_polyline(lod4_left, -width1);

                                Point3dCollection col_int_buffer_left_top = Functions.Intersect_on_both_operands(atws_left_top, buffer2);

                                if (col_int_buffer_left_top.Count > 0 && col_int_buffer_left_bottom.Count > 0)
                                {

                                    int index_int_bottom = 0;
                                    if (col_int_buffer_left_bottom.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_left_bottom[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_end.X, 2) + Math.Pow(p1.Y - pt_end.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_left_bottom.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_left_bottom[n];
                                            double d22 = Math.Pow(Math.Pow(pt_end.X - p2.X, 2) + Math.Pow(pt_end.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_bottom = n;
                                            }

                                        }
                                    }

                                    int index_int_top = 0;
                                    if (col_int_buffer_left_top.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_left_top[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_end.X, 2) + Math.Pow(p1.Y - pt_end.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_left_top.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_left_top[n];
                                            double d22 = Math.Pow(Math.Pow(pt_end.X - p2.X, 2) + Math.Pow(pt_end.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_top = n;
                                            }
                                        }
                                    }

                                    Point3d pt_from_top = lod4_left.GetClosestPointTo(col_int_buffer_left_top[index_int_top], Vector3d.ZAxis, false);
                                    Point3d pt_from_bottom = lod4_left.GetClosestPointTo(col_int_buffer_left_bottom[index_int_bottom], Vector3d.ZAxis, false);

                                    double sta_from_top = lod4_left.GetDistAtPoint(pt_from_top);
                                    double sta_from_bottom = lod4_left.GetDistAtPoint(pt_from_bottom);
                                    double sta_from_start = lod4_left.GetDistAtPoint(pt_start);

                                    double sta_closest_to_start = sta_from_top;
                                    if (Math.Abs(sta_from_start - sta_from_top) > Math.Abs(sta_from_start - sta_from_bottom))
                                    {
                                        sta_closest_to_start = sta_from_bottom;
                                    }

                                    double param_buff_bottom = buffer1.GetParameterAtPoint(col_int_buffer_left_bottom[index_int_bottom]);
                                    double param_buff_top = buffer1.GetParameterAtPoint(col_int_buffer_left_top[index_int_top]);

                                    double par1 = param_buff_bottom;
                                    double par2 = param_buff_top;

                                    if (param_buff_top < param_buff_bottom)
                                    {
                                        par1 = param_buff_top;
                                        par2 = param_buff_bottom;
                                    }
                                    //par1 <par2 all the time

                                    for (int k = Convert.ToInt32(Math.Ceiling(par1)); k < par2; ++k)
                                    {
                                        Point3d pt_3 = lod4_left.GetClosestPointTo(buffer1.GetPointAtParameter(k), Vector3d.ZAxis, false);

                                        double d3 = lod4_left.GetDistAtPoint(pt_3);
                                        if (Math.Abs(sta_from_start - d3) < Math.Abs(sta_from_start - sta_closest_to_start))
                                        {
                                            sta_closest_to_start = d3;
                                        }
                                    }
                                    pt_end = lod4_left.GetPointAtDist(sta_closest_to_start);
                                }
                            }


                            #endregion

                            double sta1 = lod4_left.GetDistAtPoint(pt_start);
                            double sta2 = 0;
                            double sta3 = lod4_left.GetDistAtPoint(pt_end);
                            if (checkBox_atws_use_length.Checked == false)
                            {
                                if (sta3 < sta1)
                                {
                                    sta2 = sta1;
                                    sta1 = sta3;
                                    Point3d ptt = pt_start;
                                    pt_start = pt_end;
                                    pt_end = ptt;
                                    edge_at_start = false;
                                    is_increasing_feat1 = false;
                                    is_increasing_feat2 = true;
                                }
                                else
                                {
                                    sta2 = sta3;
                                }
                            }

                            if (checkBox_atws_use_length.Checked == true)
                            {
                                if (sta3 < sta1)
                                {
                                    double t = sta1;
                                    sta1 = sta1 - length1;
                                    sta2 = t;
                                    pt_end = pt_start;
                                    pt_start = lod4_left.GetPointAtDist(sta1);
                                    is_increasing_feat1 = false;
                                    is_increasing_feat2 = true;


                                }
                                else
                                {
                                    sta2 = sta1 + length1;
                                    pt_end = lod4_left.GetPointAtDist(sta2);

                                }

                                if (sta2 > lod4_left.Length)
                                {
                                    sta2 = lod4_left.Length - 0.001;
                                }

                            }

                            if (is_feature1 == true)
                            {
                                build_col_side_1_and_2(feature1, lod4_left, pt_start, pt_end, -width1, is_increasing_feat1, 1);
                            }
                            if (is_feature2 == true)
                            {
                                build_col_side_1_and_2(feature2, lod4_left, pt_start, pt_end, -width1, is_increasing_feat2, 2);
                            }

                            Polyline poly_new_atws_left = draw_manual_atws(polyCL, lod2_left, lod4_left, pt_start, pt_end, -width1, "LEFT", -1, -1, lista_od_atws_justif[0], edge1, edge_at_start);

                            if (poly_new_atws_left == null || poly_new_atws_left.Length == 0)
                            {
                                Trans1.Commit();
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            //lista_od_atws_object_id.Add(poly_new_atws_left.ObjectId);

                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_right, lod2_right);

                            //dt_lod_left = build_lod3_and_lod4_columns(dt_atws_sorted, dt_lod_left);

                            #endregion
                        }

                        if (is_left == false)
                        {
                            #region Right Side

                            #region buffer calcs calculez point start
                            if (is_buffer1 == true)
                            {
                                Point3dCollection col_int_buffer_right_bottom = Functions.Intersect_on_both_operands(lod4_right, buffer1);

                                Polyline atws_right_top = get_offset_polyline(lod4_right, width1);

                                Point3dCollection col_int_buffer_right_top = Functions.Intersect_on_both_operands(atws_right_top, buffer1);

                                if (col_int_buffer_right_top.Count > 0 && col_int_buffer_right_bottom.Count > 0)
                                {



                                    int index_int_bottom = 0;
                                    if (col_int_buffer_right_bottom.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_right_bottom[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_start.X, 2) + Math.Pow(p1.Y - pt_start.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_right_bottom.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_right_bottom[n];
                                            double d22 = Math.Pow(Math.Pow(pt_start.X - p2.X, 2) + Math.Pow(pt_start.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_bottom = n;
                                            }

                                        }
                                    }

                                    int index_int_top = 0;
                                    if (col_int_buffer_right_top.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_right_top[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_start.X, 2) + Math.Pow(p1.Y - pt_start.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_right_top.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_right_top[n];
                                            double d22 = Math.Pow(Math.Pow(pt_start.X - p2.X, 2) + Math.Pow(pt_start.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_top = n;
                                            }
                                        }
                                    }

                                    Point3d pt_from_top = lod4_right.GetClosestPointTo(col_int_buffer_right_top[index_int_top], Vector3d.ZAxis, false);
                                    Point3d pt_from_bottom = lod4_right.GetClosestPointTo(col_int_buffer_right_bottom[index_int_bottom], Vector3d.ZAxis, false);

                                    double sta_from_top = lod4_right.GetDistAtPoint(pt_from_top);
                                    double sta_from_bottom = lod4_right.GetDistAtPoint(pt_from_bottom);
                                    double sta_from_end = lod4_right.GetDistAtPoint(pt_end);

                                    double sta_closest_to_end = sta_from_top;
                                    if (Math.Abs(sta_from_end - sta_from_top) > Math.Abs(sta_from_end - sta_from_bottom))
                                    {
                                        sta_closest_to_end = sta_from_bottom;
                                    }


                                    double param_buff_bottom = buffer1.GetParameterAtPoint(col_int_buffer_right_bottom[index_int_bottom]);
                                    double param_buff_top = buffer1.GetParameterAtPoint(col_int_buffer_right_top[index_int_top]);

                                    double par1 = param_buff_bottom;
                                    double par2 = param_buff_top;

                                    if (param_buff_top < param_buff_bottom)
                                    {
                                        par1 = param_buff_top;
                                        par2 = param_buff_bottom;
                                    }
                                    //par1 <par2 all the time

                                    for (int k = Convert.ToInt32(Math.Ceiling(par1)); k < par2; ++k)
                                    {
                                        Point3d pt_3 = lod4_right.GetClosestPointTo(buffer1.GetPointAtParameter(k), Vector3d.ZAxis, false);

                                        double d3 = lod4_right.GetDistAtPoint(pt_3);
                                        if (Math.Abs(sta_from_end - d3) < Math.Abs(sta_from_end - sta_closest_to_end))
                                        {
                                            sta_closest_to_end = d3;
                                        }
                                    }


                                    pt_start = lod4_right.GetPointAtDist(sta_closest_to_end);

                                }


                            }

                            if (is_buffer2 == true)
                            {
                                Point3dCollection col_int_buffer_right_bottom = Functions.Intersect_on_both_operands(lod4_right, buffer2);

                                Polyline atws_right_top = get_offset_polyline(lod4_right, width1);

                                Point3dCollection col_int_buffer_right_top = Functions.Intersect_on_both_operands(atws_right_top, buffer2);

                                if (col_int_buffer_right_top.Count > 0 && col_int_buffer_right_bottom.Count > 0)
                                {
                                    int index_int_bottom = 0;
                                    if (col_int_buffer_right_bottom.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_right_bottom[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_end.X, 2) + Math.Pow(p1.Y - pt_end.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_right_bottom.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_right_bottom[n];
                                            double d22 = Math.Pow(Math.Pow(pt_end.X - p2.X, 2) + Math.Pow(pt_end.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_bottom = n;
                                            }
                                        }
                                    }

                                    int index_int_top = 0;
                                    if (col_int_buffer_right_top.Count > 1)
                                    {
                                        Point3d p1 = col_int_buffer_right_top[0];
                                        double d11 = Math.Pow(Math.Pow(p1.X - pt_end.X, 2) + Math.Pow(p1.Y - pt_end.Y, 2), 0.5);
                                        for (int n = 1; n < col_int_buffer_right_top.Count; ++n)
                                        {
                                            Point3d p2 = col_int_buffer_right_top[n];
                                            double d22 = Math.Pow(Math.Pow(pt_end.X - p2.X, 2) + Math.Pow(pt_end.Y - p2.Y, 2), 0.5);
                                            if (d22 < d11)
                                            {
                                                d11 = d22;
                                                index_int_top = n;
                                            }
                                        }
                                    }

                                    Point3d pt_from_top = lod4_right.GetClosestPointTo(col_int_buffer_right_top[index_int_top], Vector3d.ZAxis, false);
                                    Point3d pt_from_bottom = lod4_right.GetClosestPointTo(col_int_buffer_right_bottom[index_int_bottom], Vector3d.ZAxis, false);

                                    double sta_from_top = lod4_right.GetDistAtPoint(pt_from_top);
                                    double sta_from_bottom = lod4_right.GetDistAtPoint(pt_from_bottom);
                                    double sta_from_start = lod4_right.GetDistAtPoint(pt_start);

                                    double sta_closest_to_start = sta_from_top;
                                    if (Math.Abs(sta_from_start - sta_from_top) > Math.Abs(sta_from_start - sta_from_bottom))
                                    {
                                        sta_closest_to_start = sta_from_bottom;
                                    }

                                    double param_buff_bottom = buffer1.GetParameterAtPoint(col_int_buffer_right_bottom[index_int_bottom]);
                                    double param_buff_top = buffer1.GetParameterAtPoint(col_int_buffer_right_top[index_int_top]);

                                    double par1 = param_buff_bottom;
                                    double par2 = param_buff_top;

                                    if (param_buff_top < param_buff_bottom)
                                    {
                                        par1 = param_buff_top;
                                        par2 = param_buff_bottom;
                                    }
                                    //par1 <par2 all the time

                                    for (int k = Convert.ToInt32(Math.Ceiling(par1)); k < par2; ++k)
                                    {
                                        Point3d pt_3 = lod4_right.GetClosestPointTo(buffer1.GetPointAtParameter(k), Vector3d.ZAxis, false);

                                        double d3 = lod4_right.GetDistAtPoint(pt_3);
                                        if (Math.Abs(sta_from_start - d3) < Math.Abs(sta_from_start - sta_closest_to_start))
                                        {
                                            sta_closest_to_start = d3;
                                        }
                                    }
                                    pt_end = lod4_right.GetPointAtDist(sta_closest_to_start);
                                }
                            }


                            #endregion

                            double sta1 = lod4_right.GetDistAtPoint(pt_start);
                            double sta2 = 0;
                            double sta3 = lod4_right.GetDistAtPoint(pt_end);
                            if (checkBox_atws_use_length.Checked == false)
                            {
                                if (sta3 < sta1)
                                {
                                    sta2 = sta1;
                                    sta1 = sta3;
                                    Point3d ptt = pt_start;
                                    pt_start = pt_end;
                                    pt_end = ptt;
                                    edge_at_start = false;
                                    is_increasing_feat1 = false;
                                    is_increasing_feat2 = true;
                                }
                                else
                                {
                                    sta2 = sta3;
                                }
                            }

                            if (checkBox_atws_use_length.Checked == true)
                            {
                                if (sta3 < sta1)
                                {
                                    double t = sta1;
                                    sta1 = sta1 - length1;
                                    sta2 = t;
                                    pt_end = pt_start;
                                    pt_start = lod4_right.GetPointAtDist(sta1);
                                    is_increasing_feat1 = false;
                                    is_increasing_feat2 = true;

                                }
                                else
                                {
                                    sta2 = sta1 + length1;
                                    pt_end = lod4_right.GetPointAtDist(sta2);
                                }
                            }

                            if (is_feature1 == true)
                            {
                                build_col_side_1_and_2(feature1, lod4_right, pt_start, pt_end, width1, is_increasing_feat1, 1);
                            }
                            if (is_feature2 == true)
                            {
                                build_col_side_1_and_2(feature2, lod4_right, pt_start, pt_end, width1, is_increasing_feat2, 2);
                            }

                            Polyline poly_new_atws_right = draw_manual_atws(polyCL, lod2_right, lod4_right, pt_start, pt_end, width1, "RIGHT", -1, -1, lista_od_atws_justif[0], edge1, edge_at_start);



                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);

                            #endregion
                        }
                        Trans1.Commit();
                    }

                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


            this.WindowState = FormWindowState.Normal;
            delete_existing_linework();
            draw_all_corridors();

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();

        }
        private void comboBox_atws_preset_SelectedValueChanged(object sender, EventArgs e)
        {
            string val = comboBox_atws_preset.Text.ToLower().Replace(" ", "");
            if (val.Contains("x") == true)
            {
                int idx = val.IndexOf("x");
                string width_string = val.Substring(0, idx);
                string length_string = val.Substring(idx + 1, val.Length - (idx + 1));
                if (Functions.IsNumeric(width_string) == true && Functions.IsNumeric(length_string) == true)
                {
                    textBox_atws_width.Text = width_string;
                    textBox_atws_length.Text = length_string;
                    textBox_atws_length.ReadOnly = true;
                    textBox_atws_width.ReadOnly = true;
                }



            }

        }
        private void button_atws_select_drafted_Click(object sender, EventArgs e)
        {
            if (checkBox_use_od.Checked == true)
            {
                if (radioButton_justif_custom.Checked == true)
                {
                    if (textBox_atws_justification.Text == "")
                    {
                        MessageBox.Show("no justification specified\r\noperation aborted");
                        return;
                    }
                }
                else
                {
                    if (comboBox_atws_justif.Text == "")
                    {
                        MessageBox.Show("no justification specified\r\noperation aborted");
                        return;
                    }
                }
            }
            if (dt_corridor == null || dt_corridor.Rows.Count == 0)
            {
                MessageBox.Show("no tws data found\r\noperation aborted");
                return;
            }

            ObjectId[] Empty_array = null;
            System.Data.DataTable dt1 = new System.Data.DataTable();
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    this.WindowState = FormWindowState.Minimized;

                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;

                        Autodesk.AutoCAD.EditorInput.PromptEntityResult rezultat_atws;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions prompt_atws;
                        prompt_atws = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the atws:");
                        prompt_atws.SetRejectMessage("\nSelect a polyline!");
                        prompt_atws.AllowNone = true;
                        prompt_atws.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        rezultat_atws = ThisDrawing.Editor.GetEntity(prompt_atws);

                        if (rezultat_atws.Status != PromptStatus.OK)
                        {
                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;

                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            return;
                        }

                        Polyline poly1 = null;
                        try
                        {
                            poly1 = Trans1.GetObject(rezultat_atws.ObjectId, OpenMode.ForRead) as Polyline;
                            dt1 = build_data_table_from_poly(poly1);

                        }
                        catch (Autodesk.AutoCAD.Runtime.Exception)
                        {


                        }




                        Trans1.Commit();
                    }

                    if (dt1 != null && dt1.Rows.Count > 0 && comboBox_layer_atws.Text != "")
                    {
                        using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                        {
                            BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                            BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;


                            Polyline lod_left = create_lod_construction_polylines(3, "LEFT");
                            Polyline lod_right = create_lod_construction_polylines(3, "RIGHT");

                            Polyline polyCL = new Polyline();
                            if (dt_cl != null && dt_cl.Rows.Count > 0)
                            {
                                for (int i = 0; i < dt_cl.Rows.Count; ++i)
                                {
                                    polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                                }
                            }


                            Functions.Creaza_layer(comboBox_layer_atws.Text, 3, true);
                            List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
                            List<string> lista_od_atws_justif = new List<string>();



                            Polyline poly_atws = new Polyline();
                            if (dt1 != null && dt1.Rows.Count > 0)
                            {
                                for (int i = 0; i < dt1.Rows.Count; ++i)
                                {
                                    poly_atws.AddVertexAt(i, (Point2d)dt1.Rows[i][0], 0, 0, 0);
                                }
                            }

                            if (poly_atws.Length > 0.01)
                            {
                                poly_atws.Layer = comboBox_layer_atws.Text;
                                poly_atws.ColorIndex = 256;
                                poly_atws.Linetype = "ByLayer";
                                poly_atws.Closed = true;
                                BTrecord.AppendEntity(poly_atws);
                                Trans1.AddNewlyCreatedDBObject(poly_atws, true);

                                using (DrawOrderTable DrawOrderTable1 = Trans1.GetObject(BTrecord.DrawOrderTableId, OpenMode.ForWrite) as DrawOrderTable)
                                {
                                    ObjectIdCollection col1 = new ObjectIdCollection();
                                    col1.Add(poly_atws.ObjectId);
                                    DrawOrderTable1.MoveToTop(col1);
                                }

                                string handle1 = poly_atws.ObjectId.Handle.Value.ToString();

                                if (dt_atws == null)
                                {
                                    dt_atws = get_dt_atws_structure();
                                }

                                bool is_found = false;
                                int index1 = -1;
                                for (int k = 0; k < dt_atws.Rows.Count; ++k)
                                {
                                    if (dt_atws.Rows[k][atws_handle_column] != DBNull.Value)
                                    {
                                        string handle2 = Convert.ToString(dt_atws.Rows[k][atws_handle_column]);
                                        if (handle1.ToLower() == handle2.ToLower())
                                        {
                                            is_found = true;
                                            index1 = k;
                                        }
                                    }
                                }



                                if (dt_atws_manual == null)
                                {
                                    dt_atws_manual = new System.Data.DataTable();
                                }

                                if (dt_atws_manual.Columns.Contains(handle1) == false)
                                {
                                    dt_atws_manual.Columns.Add(handle1, typeof(Point2d));
                                }
                                else
                                {
                                    if (dt_atws_manual.Rows.Count > 0)
                                    {
                                        for (int n = 0; n < dt_atws_manual.Rows.Count; ++n)
                                        {
                                            dt_atws_manual.Rows[n][handle1] = DBNull.Value;
                                        }
                                    }
                                }


                                for (int n = 0; n < poly_atws.NumberOfVertices; ++n)
                                {
                                    if (dt_atws_manual.Rows.Count < n + 1)
                                    {
                                        dt_atws_manual.Rows.Add();
                                    }
                                    dt_atws_manual.Rows[n][handle1] = poly_atws.GetPoint2dAt(n);
                                }

                                lista_od_atws_object_id.Add(poly_atws.ObjectId);
                                if (radioButton_justif_custom.Checked == true)
                                {
                                    lista_od_atws_justif.Add(textBox_atws_justification.Text);
                                }
                                else
                                {
                                    lista_od_atws_justif.Add(comboBox_atws_justif.Text);
                                }
                                if (is_found == false)
                                {
                                    dt_atws.Rows.Add();
                                    index1 = dt_atws.Rows.Count - 1;
                                }

                                if (radioButton_justif_custom.Checked == true)
                                {
                                    dt_atws.Rows[index1][atws_justification_column] = textBox_atws_justification.Text;
                                }
                                else
                                {
                                    dt_atws.Rows[index1][atws_justification_column] = comboBox_atws_justif.Text;
                                }

                                dt_atws.Rows[index1][atws_area_column] = poly_atws.Area;
                                dt_atws.Rows[index1][atws_handle_column] = handle1;

                                if (is_found == false)
                                {
                                    dt_atws.Rows[index1][atws_type_column] = atws_irregular;
                                    dt_atws.Rows[index1][atws_source_column] = atws_source_manual;
                                }

                                if (lod_left.NumberOfVertices > 1 && lod_right.NumberOfVertices > 1)
                                {
                                    string lr = "LEFT";
                                    double sta_min = -1;
                                    double sta_max = -1;
                                    for (int k = 0; k < poly_atws.NumberOfVertices; ++k)
                                    {
                                        Point3d pt1 = poly_atws.GetPoint3dAt(k);

                                        Point3d pt_left = lod_left.GetClosestPointTo(pt1, Vector3d.ZAxis, false);
                                        double sta_left = lod_left.GetDistAtPoint(lod_left.GetClosestPointTo(pt1, Vector3d.ZAxis, false));
                                        double dist_left = Math.Pow(Math.Pow(pt1.X - pt_left.X, 2) + Math.Pow(pt1.Y - pt_left.Y, 2), 0.5);

                                        double sta_calc = sta_left;
                                        double dist_calc = dist_left;

                                        Point3d pt_right = lod_right.GetClosestPointTo(pt1, Vector3d.ZAxis, false);
                                        double sta_right = lod_right.GetDistAtPoint(lod_right.GetClosestPointTo(pt1, Vector3d.ZAxis, false));
                                        double dist_right = Math.Pow(Math.Pow(pt1.X - pt_right.X, 2) + Math.Pow(pt1.Y - pt_right.Y, 2), 0.5);

                                        if (k == 0 && dist_right < dist_left)
                                        {
                                            lr = "RIGHT";
                                        }

                                        if (lr == "RIGHT")
                                        {
                                            dist_calc = dist_right;
                                            sta_calc = sta_right;
                                        }

                                        if (Math.Round(dist_calc, 3) == 0)
                                        {
                                            if (sta_min == -1)
                                            {
                                                sta_min = sta_calc;
                                            }
                                            if (sta_max == -1)
                                            {
                                                sta_max = sta_calc;
                                            }
                                            if (sta_calc < sta_min)
                                            {
                                                sta_min = sta_calc;
                                            }
                                            if (sta_calc > sta_max)
                                            {
                                                sta_max = sta_calc;
                                            }
                                        }
                                    }

                                    dt_atws.Rows[index1][atws_working_side_column] = lr;

                                    if (sta_min > -1 && sta_max > -1)
                                    {
                                        Point3d pt_min = new Point3d();
                                        Point3d pt_max = new Point3d();

                                        if (lr == "RIGHT")
                                        {
                                            pt_min = lod_right.GetPointAtDist(sta_min);
                                            pt_max = lod_right.GetPointAtDist(sta_max);
                                            //dt_lod_right = build_lod_data_table(poly_atws, lod_right, dt_lod_right);
                                        }
                                        else
                                        {
                                            pt_min = lod_left.GetPointAtDist(sta_min);
                                            pt_max = lod_left.GetPointAtDist(sta_max);
                                            //dt_lod_left = build_lod_data_table(poly_atws, lod_left, dt_lod_left);
                                        }

                                        double sta1 = Math.Round(polyCL.GetDistAtPoint(polyCL.GetClosestPointTo(pt_min, Vector3d.ZAxis, false)), 2);
                                        double sta2 = Math.Round(polyCL.GetDistAtPoint(polyCL.GetClosestPointTo(pt_max, Vector3d.ZAxis, false)), 2);

                                        dt_atws.Rows[index1][atws_sta1_column] = sta1;
                                        dt_atws.Rows[index1][atws_sta2_column] = sta2;
                                        dt_atws.Rows[index1][atws_sta1_orig_column] = sta1;
                                        dt_atws.Rows[index1][atws_sta2_orig_column] = sta2;
                                        dt_atws.Rows[index1][atws_length_column] = Math.Round(sta2 - sta1, 2);
                                    }
                                }
                            }


                            attach_od_to_atws(lista_od_atws_object_id, lista_od_atws_justif);
                            attach_dt_atws_to_datagridview(dt_atws);

                            draw_lod_polylines(Trans1, BTrecord);


                            Trans1.Commit();
                        }
                    }



                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
            this.WindowState = FormWindowState.Normal;

        }
        private void button_atws_out_Click(object sender, EventArgs e)
        {

            if (dt_atws == null || dt_atws.Rows.Count == 0)
            {
                MessageBox.Show("no atws data present\r\noperation abborted");
                return;
            }

            set_enable_false();
            try
            {
                if (dt_atws != null && dt_atws.Rows.Count > 0)
                {
                    Worksheet W1 = Functions.get_worksheet_W1(true, atws_data_tab);
                    format_and_transfer_dt_atws_to_excel(W1);
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            set_enable_true();
        }
        private void button_atws_in_Click(object sender, EventArgs e)
        {
            try
            {

                Microsoft.Office.Interop.Excel.Application Excel1 = null;
                bool is_found = false;
                try
                {
                    Excel1 = (Microsoft.Office.Interop.Excel.Application)System.Runtime.InteropServices.Marshal.GetActiveObject("Excel.Application");

                    if (Excel1 != null)
                    {

                        foreach (Workbook workbook1 in Excel1.Workbooks)
                        {
                            if (is_found == false)
                            {
                                foreach (Worksheet W1 in workbook1.Worksheets)
                                {
                                    if (is_found == false && W1.Name == atws_data_tab)
                                    {
                                        is_found = true;
                                        dt_atws = build_dt_atws_from_config_excel(W1);
                                        attach_dt_atws_to_datagridview(dt_atws);
                                    }
                                }
                            }

                        }
                    }



                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("no excel found");

                }


            }
            catch (System.Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        private void button_update_justification_Click(object sender, EventArgs e)
        {
            if (dt_atws == null || dt_atws.Rows.Count == 0)
            {
                MessageBox.Show("no atws data present\r\noperation abborted");
                return;
            }

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
                        List<string> lista_od_atws_justif = new List<string>();



                        for (int i = 0; i < dt_atws.Rows.Count; ++i)
                        {
                            if (dt_atws.Rows[i][atws_handle_column] != DBNull.Value && dt_atws.Rows[i][atws_justification_column] != DBNull.Value)
                            {
                                string handle1 = Convert.ToString(dt_atws.Rows[i][atws_handle_column]);
                                string justif1 = Convert.ToString(dt_atws.Rows[i][atws_justification_column]);

                                ObjectId id1 = Functions.GetObjectId(ThisDrawing.Database, handle1);

                                if (id1 != ObjectId.Null)
                                {
                                    lista_od_atws_justif.Add(justif1);
                                    lista_od_atws_object_id.Add(id1);
                                }
                            }
                        }

                        attach_od_to_atws(lista_od_atws_object_id, lista_od_atws_justif);

                        Trans1.Commit();
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();

        }
        private void button_zoom_to_atws_Click(object sender, EventArgs e)
        {
            try
            {
                if (dt_atws != null && dt_atws.Rows.Count > 0)
                {
                    set_enable_false();
                    int row_idx = dataGridView_atws_data.SelectedCells[0].RowIndex;
                    if (row_idx >= 0)
                    {
                        string handle1 = Convert.ToString(dataGridView_atws_data.Rows[row_idx].Cells[atws_handle_column].Value);

                        Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                        Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
                        using (DocumentLock lock1 = ThisDrawing.LockDocument())
                        {
                            using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                            {
                                ObjectId id1 = Functions.GetObjectId(ThisDrawing.Database, handle1);
                                if (id1 != ObjectId.Null)
                                {
                                    Functions.zoom_to_object(id1);
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            set_enable_true();
        }
        public void button_combine_atws_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                MessageBox.Show("no centerline loaded\r\noperation aborted");
                return;
            }

            if (dt_lod_left == null || dt_lod_right == null || dt_lod_left.Rows.Count == 0 || dt_lod_right.Rows.Count == 0)
            {
                MessageBox.Show("no corridor outlines defined\r\ndraft first the corridor defined from workspace library\r\noperation aborted");
                return;
            }

            if (checkBox_use_od.Checked == true && comboBox_atws_od_name.Text == "")
            {
                MessageBox.Show("no object data table selected\r\noperation aborted");
                return;
            }
            if (checkBox_use_od.Checked == true && comboBox_atws_od_field.Text == "")
            {
                MessageBox.Show("no object data field selected\r\noperation aborted");
                return;
            }

            if (comboBox_layer_atws.Text == "")
            {
                MessageBox.Show("no atws layer specified\r\noperation aborted");
                return;
            }

            List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
            List<string> lista_justif = new List<string>();




            if (dt_atws_manual == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }

            if (dt_atws == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }

            List<string> listaod_justif = new List<string>();

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        Polyline polyCL = new Polyline();
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                        }

                        this.WindowState = FormWindowState.Minimized;
                        string atws_layer = comboBox_layer_atws.Text;
                        Functions.Creaza_layer(atws_layer, 3, true);
                        string lod_layer = comboBox_layer_lod.Text;
                        Functions.Creaza_layer(lod_layer, 6, true);


                        Autodesk.AutoCAD.EditorInput.PromptSelectionResult Rezultat_atws;
                        Autodesk.AutoCAD.EditorInput.PromptSelectionOptions Prompt_rez = new Autodesk.AutoCAD.EditorInput.PromptSelectionOptions();
                        Prompt_rez.MessageForAdding = "\nSelect atws polylines you want to join\r\nthe atws has to have the same width";
                        Prompt_rez.SingleOnly = false;
                        Rezultat_atws = ThisDrawing.Editor.GetSelection(Prompt_rez);

                        if (Rezultat_atws.Status != PromptStatus.OK)
                        {

                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        double width1 = 0;
                        double sta1 = -1;
                        double sta2 = -1;
                        double orig_sta1 = -1;
                        double orig_sta2 = -1;
                        string LR = "";
                        string abutter1 = "";

                        double new_sta1 = -1;
                        double new_sta2 = -1;

                        string source1 = atws_source_manual;

                        if (Rezultat_atws.Value.Count < 2)
                        {
                            MessageBox.Show("required at least 2 atws polylines\r\noperation aborted");
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }


                        List<ObjectId> lista_objectid_delete = new List<ObjectId>();
                        List<string> lista_handle1_existent = new List<string>();
                        List<string> lista_handle0_existent = new List<string>();

                        List<int> lista_index_tws = new List<int>();

                        string handle1_start = "";
                        string handle1_end = "";

                        string handle0_start = "";
                        string handle0_end = "";

                        #region picked atws


                        Polyline atws0 = Trans1.GetObject(Rezultat_atws.Value[0].ObjectId, OpenMode.ForWrite) as Polyline;

                        if (atws0 == null)
                        {
                            MessageBox.Show("no polyline\r\noperation aborted");
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }
                        if (atws0 != null)
                        {
                            if (atws0.Layer != comboBox_layer_atws.Text)
                            {
                                MessageBox.Show("the layer of the atws does not match the combobox value\r\noperation aborted");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }



                            string handle1 = atws0.ObjectId.Handle.Value.ToString();
                            string handle0 = "";
                            handle1_start = handle1;
                            handle1_end = handle1;

                            for (int n = 0; n < dt_atws.Rows.Count; ++n)
                            {
                                if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value)
                                {
                                    string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);
                                    if (handle1.ToLower() == handle2.ToLower())
                                    {
                                        handle0 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);
                                        lista_handle0_existent.Add(handle0);
                                        handle0_start = handle0;
                                        handle0_end = handle0;
                                        n = dt_atws.Rows.Count;
                                    }
                                }
                            }

                            for (int n = 0; n < dt_atws.Rows.Count; ++n)
                            {
                                if (handle0 != "" && dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value &&
                                    dt_atws.Rows[n][atws_width_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_handle_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_working_side_column] != DBNull.Value && dt_atws.Rows[n][atws_justification_column] != DBNull.Value && dt_atws.Rows[n][atws_abutter_column] != DBNull.Value)
                                {
                                    string justif1 = "";
                                    string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);

                                    if (handle1 == handle2)
                                    {
                                        width1 = Convert.ToDouble(dt_atws.Rows[n][atws_width_column]);
                                        sta1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_column]);
                                        sta2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_column]);
                                        orig_sta1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_orig_column]);
                                        orig_sta2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_orig_column]);
                                        LR = Convert.ToString(dt_atws.Rows[n][atws_working_side_column]);
                                        justif1 = Convert.ToString(dt_atws.Rows[n][atws_justification_column]);
                                        abutter1 = Convert.ToString(dt_atws.Rows[n][atws_abutter_column]);
                                        if (lista_handle1_existent.Contains(handle1) == false) lista_handle1_existent.Add(handle1);

                                        lista_objectid_delete.Add(atws0.ObjectId);
                                        lista_justif.Add(justif1);
                                        new_sta1 = sta1;
                                        new_sta2 = sta2;

                                        if (dt_atws.Rows[n][atws_source_column] != DBNull.Value)
                                        {
                                            source1 = Convert.ToString(dt_atws.Rows[n][atws_source_column]);
                                        }

                                        if (source1 == atws_source_library)
                                        {
                                            for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                                            {
                                                double ws_sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                                double ws_sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                                if (Math.Round(ws_sta1, 2) == Math.Round(sta1, 2) && Math.Round(ws_sta2, 2) == Math.Round(sta2, 2))
                                                {
                                                    lista_index_tws.Add(i);
                                                    i = dt_corridor.Rows.Count;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }



                        for (int k = 1; k < Rezultat_atws.Value.Count; ++k)
                        {
                            Polyline atws1 = Trans1.GetObject(Rezultat_atws.Value[k].ObjectId, OpenMode.ForWrite) as Polyline;



                            if (atws1 == null)
                            {
                                MessageBox.Show("no polyline\r\noperation aborted");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }
                            if (atws1 != null)
                            {
                                if (atws1.Layer != comboBox_layer_atws.Text)
                                {
                                    MessageBox.Show("the layer of the atws does not match the combobox value\r\noperation aborted");
                                    this.WindowState = FormWindowState.Normal;
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    set_enable_true();
                                    return;
                                }

                                string handle1 = atws1.ObjectId.Handle.Value.ToString();
                                for (int n = 0; n < dt_atws.Rows.Count; ++n)
                                {
                                    if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value &&
                                        dt_atws.Rows[n][atws_width_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_handle_column])) == true &&
                                        dt_atws.Rows[n][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_column])) == true &&
                                        dt_atws.Rows[n][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_column])) == true &&
                                        dt_atws.Rows[n][atws_working_side_column] != DBNull.Value &&
                                        dt_atws.Rows[n][atws_justification_column] != DBNull.Value &&
                                        dt_atws.Rows[n][atws_abutter_column] != DBNull.Value)
                                    {
                                        string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);
                                        string handle3 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);
                                        if (handle1 == handle2)
                                        {
                                            double width2 = Convert.ToDouble(dt_atws.Rows[n][atws_width_column]);
                                            double sta12 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_column]);
                                            double sta22 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_column]);
                                            string LR2 = Convert.ToString(dt_atws.Rows[n][atws_working_side_column]);
                                            string justif2 = Convert.ToString(dt_atws.Rows[n][atws_justification_column]);
                                            string abutter2 = Convert.ToString(dt_atws.Rows[n][atws_abutter_column]);

                                            if (width1 != width2 || LR != LR2 || abutter1 != abutter2)
                                            {
                                                MessageBox.Show("the atws you selected does not have the same parameters\r\nWidth, Working side or Abbutter\r\noperation aborted");
                                                this.WindowState = FormWindowState.Normal;
                                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                                set_enable_true();
                                                return;
                                            }

                                            if (sta1 > sta12)
                                            {
                                                sta1 = sta12;
                                                new_sta1 = sta12;
                                                handle1_start = handle2;
                                                handle0_start = handle3;
                                            }

                                            if (sta2 < sta22)
                                            {
                                                sta2 = sta22;
                                                new_sta2 = sta22;
                                                handle1_end = handle2;
                                                handle0_end = handle3;
                                            }
                                            lista_objectid_delete.Add(atws1.ObjectId);
                                            lista_handle1_existent.Add(handle1.ToLower());
                                            if (lista_handle0_existent.Contains(handle3) == false) lista_handle0_existent.Add(handle3);
                                            if (lista_justif.Contains(justif2) == false) lista_justif.Add(justif2);

                                            if (dt_atws.Rows[n][atws_source_column] != DBNull.Value)
                                            {
                                                source1 = Convert.ToString(dt_atws.Rows[n][atws_source_column]);
                                            }

                                            if (source1 == atws_source_library)
                                            {
                                                for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                                                {
                                                    double ws_sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                                    double ws_sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                                    if (Math.Round(ws_sta1, 2) == Math.Round(sta1, 2) && Math.Round(ws_sta2, 2) == Math.Round(sta2, 2))
                                                    {
                                                        lista_index_tws.Add(i);
                                                        i = dt_corridor.Rows.Count;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        for (int n = 0; n < dt_atws.Rows.Count; ++n)
                        {
                            if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value &&
                                dt_atws.Rows[n][atws_width_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_handle_column])) == true &&
                                dt_atws.Rows[n][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_column])) == true &&
                                dt_atws.Rows[n][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_column])) == true &&
                                dt_atws.Rows[n][atws_working_side_column] != DBNull.Value &&
                                dt_atws.Rows[n][atws_justification_column] != DBNull.Value &&
                                dt_atws.Rows[n][atws_abutter_column] != DBNull.Value)
                            {
                                string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);
                                string handle3 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);
                                if (lista_handle1_existent.Contains(handle2) == false && lista_handle0_existent.Contains(handle3) == true)
                                {
                                    double width2 = Convert.ToDouble(dt_atws.Rows[n][atws_width_column]);
                                    double sta12 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_column]);
                                    double sta22 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_column]);
                                    string LR2 = Convert.ToString(dt_atws.Rows[n][atws_working_side_column]);
                                    string justif2 = Convert.ToString(dt_atws.Rows[n][atws_justification_column]);
                                    string abutter2 = Convert.ToString(dt_atws.Rows[n][atws_abutter_column]);

                                    if (width1 != width2 || LR != LR2 || abutter1 != abutter2)
                                    {
                                        MessageBox.Show("the atws you selected does not have the same parameters\r\nWidth, Working side or Abbutter\r\noperation aborted");
                                        this.WindowState = FormWindowState.Normal;
                                        ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                        set_enable_true();
                                        return;
                                    }

                                    ObjectId id2 = Functions.GetObjectId(ThisDrawing.Database, handle2);
                                    if (id2 != ObjectId.Null)
                                    {
                                        if (sta1 > sta12)
                                        {
                                            sta1 = sta12;
                                            new_sta1 = sta12;
                                            handle1_start = handle2;
                                            handle0_start = handle3;
                                        }

                                        if (sta2 < sta22)
                                        {
                                            sta2 = sta22;
                                            new_sta2 = sta22;
                                            handle1_end = handle2;
                                            handle0_end = handle3;
                                        }



                                        lista_objectid_delete.Add(id2);
                                        lista_handle1_existent.Add(handle2);
                                    }


                                }
                            }
                        }


                        if (lista_index_tws.Count > 0)
                        {
                            for (int i = 0; i < lista_index_tws.Count; ++i)
                            {
                                dt_corridor.Rows[lista_index_tws[i]][tws_modified_column] = true;
                            }
                        }

                        #endregion



                        if (lista_objectid_delete.Count > 0)
                        {
                            for (int k = 0; k < lista_objectid_delete.Count; ++k)
                            {
                                ObjectId id1 = lista_objectid_delete[k];
                                Entity entity1 = Trans1.GetObject(id1, OpenMode.ForWrite) as Entity;
                                entity1.Erase();

                            }

                            for (int n = dt_atws.Rows.Count - 1; n >= 0; --n)
                            {
                                if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value)
                                {
                                    string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]).ToLower();
                                    if (lista_handle1_existent.Contains(handle2) == true)
                                    {
                                        dt_atws.Rows[n].Delete();
                                    }
                                }
                            }

                            for (int n = dt_atws_lod_manual.Columns.Count - 1; n >= 0; --n)
                            {
                                if (lista_handle0_existent.Contains(dt_atws_lod_manual.Columns[n].ColumnName) == true)
                                {
                                    dt_atws_lod_manual.Columns.Remove(dt_atws_lod_manual.Columns[n].ColumnName);
                                }
                            }

                        }




                        Point3d pt_on_cl1 = polyCL.GetPointAtDist(new_sta1);
                        Point3d pt_on_cl2 = polyCL.GetPointAtDist(new_sta2);

                        #region left
                        if (LR.ToUpper() == "LEFT")
                        {

                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }
                            Polyline lod1_left = create_lod_construction_polylines(1, "LEFT");
                            Polyline lod2_left = create_lod_construction_polylines(2, "LEFT");

                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);
                            Polyline lod4_left = create_lod_construction_polylines(4, "LEFT");

                            #region zigzag and start-end points
                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();
                            bool assigned_start = false;

                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();
                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0_start) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0_start] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0_start];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod4_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0_end) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0_end] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0_end];
                                            pt_end = lod4_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0_end] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0_end];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion

                            string new_justif1 = lista_justif[0];

                            if (lista_justif.Count > 1)
                            {
                                for (int i = 1; i < lista_justif.Count; ++i)
                                {
                                    new_justif1 = new_justif1 + " & " + lista_justif[i];
                                }
                            }

                            Polyline poly_new_atws_left = draw_manual_atws(polyCL, lod2_left, lod4_left, pt_start, pt_end, -width1, "LEFT", orig_sta1, orig_sta2, new_justif1, null, false);
                            lista_od_atws_object_id.Add(poly_new_atws_left.ObjectId);
                            listaod_justif.Add(new_justif1);

                            dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }
                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);
                        }
                        #endregion

                        #region right
                        if (LR.ToUpper() == "RIGHT")
                        {
                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            Polyline lod1_right = create_lod_construction_polylines(1, "RIGHT");
                            Polyline lod2_right = create_lod_construction_polylines(2, "RIGHT");
                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);
                            Polyline lod4_right = create_lod_construction_polylines(4, "RIGHT");

                            #region zigzag and start-end points
                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();
                            bool assigned_start = false;

                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();
                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0_start) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0_start] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0_start];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod4_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0_end) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0_end] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0_end];
                                            pt_end = lod4_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0_end] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0_end];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion


                            string new_justif1 = lista_justif[0];

                            if (lista_justif.Count > 1)
                            {
                                for (int i = 1; i < lista_justif.Count; ++i)
                                {
                                    new_justif1 = new_justif1 + " & " + lista_justif[i];
                                }
                            }

                            Polyline poly_new_atws_right = draw_manual_atws(polyCL, lod2_right, lod4_right, pt_start, pt_end, width1, "RIGHT", orig_sta1, orig_sta2, new_justif1, null, false);

                            lista_od_atws_object_id.Add(poly_new_atws_right.ObjectId);
                            listaod_justif.Add(new_justif1);
                            dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);
                        }
                        #endregion
                        //sync_handles_dt_manual_atws_dt_ws();
                        //draw_lod_polylines(Trans1, BTrecord);
                        Trans1.Commit();
                    }


                    //attach_od_to_atws(lista_od_atws_object_id, listaod_justif);
                    //attach_dt_atws_to_datagridview(dt_atws);
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            delete_existing_linework();
            draw_all_corridors();

            this.WindowState = FormWindowState.Normal;


            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();

        }
        private void delete_columns_not_found_in_dt_atws()
        {
            if (dt_atws_manual != null && dt_atws_manual.Rows.Count > 0 && dt_atws != null && dt_atws.Rows.Count > 0)
            {
                List<string> colectie_handles = new List<string>();
                for (int i = 0; i < dt_atws.Rows.Count; ++i)
                {
                    if (dt_atws.Rows[i][atws_handle0_column] != DBNull.Value)
                    {
                        string h1 = Convert.ToString(dt_atws.Rows[i][atws_handle0_column]).ToLower();
                        if (colectie_handles.Contains(h1) == false)
                        {
                            colectie_handles.Add(h1);
                        }

                    }
                }

                if (colectie_handles.Count == 0) return;
                for (int j = dt_atws_manual.Columns.Count - 1; j >= 0; --j)
                {
                    string col1 = dt_atws_manual.Columns[j].ColumnName.ToLower();

                    if (colectie_handles.Contains(col1) == false)
                    {
                        dt_atws_manual.Columns.RemoveAt(j);
                    }
                }
                if (dt_atws_lod_manual != null)
                {
                    for (int j = dt_atws_lod_manual.Columns.Count - 1; j >= 0; --j)
                    {
                        string col1 = dt_atws_lod_manual.Columns[j].ColumnName.ToLower();

                        if (colectie_handles.Contains(col1) == false)
                        {
                            dt_atws_lod_manual.Columns.RemoveAt(j);
                        }
                    }
                }
                if (dt_atws_side1 != null)
                {
                    for (int j = dt_atws_side1.Columns.Count - 1; j >= 0; --j)
                    {
                        string col1 = dt_atws_side1.Columns[j].ColumnName.ToLower();

                        if (colectie_handles.Contains(col1) == false)
                        {
                            dt_atws_side1.Columns.RemoveAt(j);
                        }
                    }
                }

                if (dt_atws_side2 != null)
                {
                    for (int j = dt_atws_side2.Columns.Count - 1; j >= 0; --j)
                    {
                        string col1 = dt_atws_side2.Columns[j].ColumnName.ToLower();

                        if (colectie_handles.Contains(col1) == false)
                        {
                            dt_atws_side2.Columns.RemoveAt(j);
                        }
                    }
                }

            }
            if (dt_atws != null && dt_atws.Rows.Count == 0) dt_atws = null;

            if (dt_atws == null)
            {
                dt_atws_manual = null;
                dt_atws_lod_manual = null;
                dt_atws_side1 = null;
                dt_atws_side2 = null;
            }
        }


        private void sync_handles_dt_manual_ar()
        {
            List<string> colectie_handles = new List<string>();
            if (dt_ar != null && dt_ar.Rows.Count > 0)
            {
                for (int i = 0; i < dt_ar.Rows.Count; ++i)
                {
                    if (dt_ar.Rows[i][ar_handle_column] != DBNull.Value)
                    {
                        colectie_handles.Add(Convert.ToString(dt_ar.Rows[i][ar_handle_column]));
                    }
                }
            }

            if (dt_ar_side_left_p != null && dt_ar_side_left_p.Rows.Count > 0)
            {
                for (int j = dt_ar_side_left_p.Columns.Count - 1; j >= 0; --j)
                {
                    string col1 = dt_ar_side_left_p.Columns[j].ColumnName.ToLower();

                    if (colectie_handles.Contains(col1.Replace("a", "").Replace("b", "").Replace("wdth_len", "")) == false)
                    {
                        dt_ar_side_left_p.Columns.RemoveAt(j);
                    }
                }
            }

            if (dt_ar_side_right_p != null && dt_ar_side_right_p.Rows.Count > 0)
            {
                for (int j = dt_ar_side_right_p.Columns.Count - 1; j >= 0; --j)
                {
                    string col1 = dt_ar_side_right_p.Columns[j].ColumnName.ToLower();

                    if (colectie_handles.Contains(col1.Replace("a", "").Replace("b", "").Replace("wdth_len", "")) == false)
                    {
                        dt_ar_side_right_p.Columns.RemoveAt(j);
                    }
                }
            }



            if (dt_ar_temp != null && dt_ar_temp.Rows.Count > 0)
            {
                for (int j = dt_ar_temp.Columns.Count - 1; j >= 0; --j)
                {
                    string col1 = dt_ar_temp.Columns[j].ColumnName.ToLower();

                    if (colectie_handles.Contains(col1.Replace("a", "").Replace("b", "").Replace("wdth_len", "")) == false)
                    {
                        dt_ar_temp.Columns.RemoveAt(j);
                    }
                }
            }

            if (dt_ar_temp != null && dt_ar_temp.Rows.Count > 0)
            {
                for (int j = dt_ar_temp.Columns.Count - 1; j >= 0; --j)
                {
                    string col1 = dt_ar_temp.Columns[j].ColumnName.ToLower();

                    if (colectie_handles.Contains(col1.Replace("a", "").Replace("b", "").Replace("wdth_len", "")) == false)
                    {
                        dt_ar_temp.Columns.RemoveAt(j);
                    }
                }
            }


            if (dt_ar != null && dt_ar.Rows.Count == 0) dt_ar = null;

            if (dt_ar == null)
            {
                dt_ar_side_left_p = null;
                dt_ar_temp = null;
                dt_ar_side_right_p = null;
                dt_ar_temp = null;
            }
        }
        private void sync_handles_dt_manual_stg()
        {
            if (dt_manual_stg != null && dt_manual_stg.Rows.Count > 0 && dt_stg != null && dt_stg.Rows.Count > 0)
            {
                List<string> colectie_handles = new List<string>();
                for (int i = 0; i < dt_stg.Rows.Count; ++i)
                {
                    if (dt_stg.Rows[i][stg_handle_column] != DBNull.Value)
                    {
                        colectie_handles.Add(Convert.ToString(dt_stg.Rows[i][stg_handle_column]).ToLower());
                    }
                }

                for (int j = dt_manual_stg.Columns.Count - 1; j >= 0; --j)
                {
                    string col1 = dt_manual_stg.Columns[j].ColumnName.ToLower();

                    if (colectie_handles.Contains(col1) == false)
                    {
                        dt_manual_stg.Columns.RemoveAt(j);
                    }
                }

            }
            if (dt_stg != null && dt_stg.Rows.Count == 0) dt_stg = null;

            if (dt_stg == null)
            {
                dt_manual_stg = null;
            }
        }
        private void button_atws_extend_atws_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                MessageBox.Show("no centerline loaded\r\noperation aborted");
                return;
            }

            if (dt_lod_left == null || dt_lod_right == null || dt_lod_left.Rows.Count == 0 || dt_lod_right.Rows.Count == 0)
            {
                MessageBox.Show("no corridor outlines defined\r\ndraft first the corridor defined from workspace library\r\noperation aborted");
                return;
            }

            if (checkBox_use_od.Checked == true && comboBox_atws_od_name.Text == "")
            {
                MessageBox.Show("no object data table selected\r\noperation aborted");
                return;
            }
            if (checkBox_use_od.Checked == true && comboBox_atws_od_field.Text == "")
            {
                MessageBox.Show("no object data field selected\r\noperation aborted");
                return;
            }

            if (comboBox_layer_atws.Text == "")
            {
                MessageBox.Show("no atws layer specified\r\noperation aborted");
                return;
            }

            List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
            List<string> lista_justif = new List<string>();
            string justif1 = "";



            if (dt_atws_manual == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }

            if (dt_atws == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }


            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;




                        Polyline polyCL = new Polyline();
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                        }

                        this.WindowState = FormWindowState.Minimized;

                        string atws_layer = comboBox_layer_atws.Text;
                        Functions.Creaza_layer(atws_layer, 3, true);
                        string lod_layer = comboBox_layer_lod.Text;
                        Functions.Creaza_layer(lod_layer, 6, true);



                        Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_atws;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_atws;
                        Prompt_atws = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect atws polyline:");
                        Prompt_atws.SetRejectMessage("\nSelect a polyline!");
                        Prompt_atws.AllowNone = true;
                        Prompt_atws.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        Rezultat_atws = ThisDrawing.Editor.GetEntity(Prompt_atws);


                        if (Rezultat_atws.Status != PromptStatus.OK)
                        {

                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        double width1 = 0;
                        double sta1 = -1;
                        double sta2 = -1;
                        double orig_sta1 = -1;
                        double orig_sta2 = -1;
                        string LR = "";
                        string abutter1 = "";

                        double new_sta1 = -1;
                        double new_sta2 = -1;

                        string source1 = atws_source_manual;


                        List<ObjectId> lista_objectid_delete = new List<ObjectId>();
                        List<string> lista_handle_existent = new List<string>();
                        string handle1 = "";
                        string handle0 = "";
                        Polyline atws1 = Trans1.GetObject(Rezultat_atws.ObjectId, OpenMode.ForWrite) as Polyline;
                        if (atws1 == null)
                        {
                            MessageBox.Show("no polyline\r\noperation aborted");
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }
                        if (atws1 != null)
                        {
                            if (atws1.Layer != comboBox_layer_atws.Text)
                            {
                                MessageBox.Show("the layer of the atws does not match the combobox value\r\noperation aborted");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }


                            handle1 = atws1.ObjectId.Handle.Value.ToString();

                            for (int n = 0; n < dt_atws.Rows.Count; ++n)
                            {
                                if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value &&
                                    dt_atws.Rows[n][atws_width_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_handle_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_working_side_column] != DBNull.Value && dt_atws.Rows[n][atws_justification_column] != DBNull.Value && dt_atws.Rows[n][atws_abutter_column] != DBNull.Value)
                                {
                                    string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);

                                    if (handle1.ToLower() == handle2.ToLower())
                                    {
                                        handle0 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);
                                        width1 = Convert.ToDouble(dt_atws.Rows[n][atws_width_column]);
                                        sta1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_column]);
                                        sta2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_column]);
                                        orig_sta1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_orig_column]);
                                        orig_sta2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_orig_column]);
                                        LR = Convert.ToString(dt_atws.Rows[n][atws_working_side_column]);
                                        justif1 = Convert.ToString(dt_atws.Rows[n][atws_justification_column]);
                                        abutter1 = Convert.ToString(dt_atws.Rows[n][atws_abutter_column]);
                                        lista_objectid_delete.Add(atws1.ObjectId);
                                        lista_handle_existent.Add(handle0);
                                        lista_justif.Add(justif1);

                                        if (dt_atws.Rows[n][atws_source_column] != DBNull.Value)
                                        {
                                            source1 = Convert.ToString(dt_atws.Rows[n][atws_source_column]);
                                        }

                                        if (source1 == atws_source_library)
                                        {
                                            for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                                            {
                                                double ws_sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                                double ws_sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                                if (Math.Round(ws_sta1, 2) == Math.Round(sta1, 2) && Math.Round(ws_sta2, 2) == Math.Round(sta2, 2))
                                                {
                                                    dt_corridor.Rows[i][tws_modified_column] = true;
                                                    i = dt_corridor.Rows.Count;
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            if (handle0 != "" && handle0 != handle1)
                            {
                                for (int n = 0; n < dt_atws.Rows.Count; ++n)
                                {
                                    if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value)
                                    {
                                        string handle3 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);
                                        string handle4 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);

                                        if (handle4 == handle0)
                                        {
                                            ObjectId id3 = Functions.GetObjectId(ThisDrawing.Database, handle3);
                                            if (id3 != ObjectId.Null && lista_objectid_delete.Contains(id3) == false)
                                            {
                                                lista_objectid_delete.Add(id3);
                                            }


                                        }

                                    }
                                }
                            }


                        }



                        Point3d pt_on_cl1 = polyCL.GetPointAtDist(sta1);
                        Point3d pt_on_cl2 = polyCL.GetPointAtDist(sta2);


                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res3;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions PP3;
                        PP3 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify side to extend:");
                        PP3.AllowNone = false;
                        Point_res3 = Editor1.GetPoint(PP3);

                        if (Point_res3.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        Point3d pt3 = Point_res3.Value;


                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res4;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions PP4;
                        PP4 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the point to extend to:");
                        PP4.AllowNone = false;
                        PP4.UseBasePoint = true;
                        PP4.BasePoint = pt3;
                        Point_res4 = Editor1.GetPoint(PP4);

                        if (Point_res4.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        Point3d pt4 = Point_res4.Value;

                        if (lista_objectid_delete.Count > 0)
                        {

                            for (int n = dt_atws.Rows.Count - 1; n >= 0; --n)
                            {
                                if (dt_atws.Rows[n][atws_handle0_column] != DBNull.Value)
                                {
                                    string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]).ToLower();
                                    if (lista_handle_existent.Contains(handle2) == true)
                                    {
                                        dt_atws.Rows[n].Delete();
                                    }
                                }
                            }


                            for (int n = dt_atws_lod_manual.Columns.Count - 1; n >= 0; --n)
                            {
                                if (dt_atws_lod_manual.Columns[n].ColumnName == handle0)
                                {
                                    dt_atws_lod_manual.Columns.Remove(handle0);
                                }
                            }



                        }



                        col_side1 = new Point2dCollection();
                        col_side2 = new Point2dCollection();

                        #region left
                        if (LR.ToUpper() == "LEFT")
                        {

                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }


                            Polyline lod1_left = create_lod_construction_polylines(1, "LEFT");
                            Polyline lod2_left = create_lod_construction_polylines(2, "LEFT");

                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);


                            Polyline lod4_left = create_lod_construction_polylines(4, "LEFT");




                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();

                            double sta_lod3 = lod4_left.GetDistAtPoint(lod4_left.GetClosestPointTo(pt3, Vector3d.ZAxis, false));
                            double sta_lod4 = lod4_left.GetDistAtPoint(lod4_left.GetClosestPointTo(pt4, Vector3d.ZAxis, false));
                            double sta_lod1 = -1;
                            double sta_lod2 = -1;


                            #region zigzag and start-end points

                            bool assigned_start = false;

                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();

                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod4_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                sta_lod1 = lod4_left.GetDistAtPoint(pt_start);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            pt_end = lod4_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            sta_lod2 = lod4_left.GetDistAtPoint(pt_end);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion

                            if (sta_lod1 == -1 || sta_lod2 == -1)
                            {
                                MessageBox.Show("data table error no5, no match on handles");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            if (Math.Abs(sta_lod3 - sta_lod1) < Math.Abs(sta_lod3 - sta_lod2))
                            {
                                pt_start = lod4_left.GetPointAtDist(sta_lod4);
                                col_side1 = new Point2dCollection();
                            }
                            else
                            {
                                pt_end = lod4_left.GetPointAtDist(sta_lod4);
                                col_side2 = new Point2dCollection();
                            }


                            Polyline poly_new_atws_left = draw_manual_atws(polyCL, lod2_left, lod4_left, pt_start, pt_end, -width1, "LEFT", orig_sta1, orig_sta2, justif1, null, false);

                            dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);
                        }
                        #endregion

                        #region right
                        if (LR.ToUpper() == "RIGHT")
                        {
                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            Polyline lod1_right = create_lod_construction_polylines(1, "RIGHT");
                            Polyline lod2_right = create_lod_construction_polylines(2, "RIGHT");
                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);

                            Polyline lod4_right = create_lod_construction_polylines(4, "RIGHT");


                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();

                            double sta_lod3 = lod4_right.GetDistAtPoint(lod4_right.GetClosestPointTo(pt3, Vector3d.ZAxis, false));

                            double sta_lod4 = lod4_right.GetDistAtPoint(lod4_right.GetClosestPointTo(pt4, Vector3d.ZAxis, false));
                            double sta_lod1 = -1;
                            double sta_lod2 = -1;


                            #region zigzag and start-end points

                            bool assigned_start = false;

                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();

                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod4_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                sta_lod1 = lod4_right.GetDistAtPoint(pt_start);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            pt_end = lod4_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            sta_lod2 = lod4_right.GetDistAtPoint(pt_end);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion

                            if (sta_lod1 == -1 || sta_lod2 == -1)
                            {
                                MessageBox.Show("data table error no5, no match on handles");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }



                            if (Math.Abs(sta_lod3 - sta_lod1) < Math.Abs(sta_lod3 - sta_lod2))
                            {
                                pt_start = lod4_right.GetPointAtDist(sta_lod4);
                                col_side1 = new Point2dCollection();
                            }
                            else
                            {
                                pt_end = lod4_right.GetPointAtDist(sta_lod4);
                                col_side2 = new Point2dCollection();
                            }

                            Polyline poly_new_atws_right = draw_manual_atws(polyCL, lod2_right, lod4_right, pt_start, pt_end, width1, "RIGHT", orig_sta1, orig_sta2, justif1, null, false);
                            lista_od_atws_object_id.Add(poly_new_atws_right.ObjectId);

                            dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }
                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);
                        }
                        #endregion


                        if (lista_objectid_delete.Count > 0)
                        {
                            for (int k = 0; k < lista_objectid_delete.Count; ++k)
                            {
                                ObjectId id1 = lista_objectid_delete[k];
                                Entity entity1 = Trans1.GetObject(id1, OpenMode.ForWrite) as Entity;
                                entity1.Erase();

                            }
                        }

                        Trans1.Commit();
                    }

                    delete_existing_linework();
                    draw_all_corridors();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            this.WindowState = FormWindowState.Normal;
            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }

        private void button_atws_to_feature_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                MessageBox.Show("no centerline loaded\r\noperation aborted");
                return;
            }

            if (dt_lod_left == null || dt_lod_right == null || dt_lod_left.Rows.Count == 0 || dt_lod_right.Rows.Count == 0)
            {
                MessageBox.Show("no corridor outlines defined\r\ndraft first the corridor defined from workspace library\r\noperation aborted");
                return;
            }

            if (checkBox_use_od.Checked == true && comboBox_atws_od_name.Text == "")
            {
                MessageBox.Show("no object data table selected\r\noperation aborted");
                return;
            }
            if (checkBox_use_od.Checked == true && comboBox_atws_od_field.Text == "")
            {
                MessageBox.Show("no object data field selected\r\noperation aborted");
                return;
            }

            if (comboBox_layer_atws.Text == "")
            {
                MessageBox.Show("no atws layer specified\r\noperation aborted");
                return;
            }

            List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
            List<string> lista_justif = new List<string>();
            string justif1 = "";



            if (dt_atws_manual == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }

            if (dt_atws == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }


            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        Polyline polyCL = new Polyline();
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                        }


                        WindowState = FormWindowState.Minimized;
                        string atws_layer = comboBox_layer_atws.Text;
                        Functions.Creaza_layer(atws_layer, 3, true);
                        string lod_layer = comboBox_layer_lod.Text;
                        Functions.Creaza_layer(lod_layer, 6, true);

                        Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_feat;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_feat;
                        Prompt_feat = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the feature polyline:");
                        Prompt_feat.SetRejectMessage("\nSelect a polyline!");
                        Prompt_feat.AllowNone = true;
                        Prompt_feat.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        Rezultat_feat = ThisDrawing.Editor.GetEntity(Prompt_feat);

                        if (Rezultat_feat.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        string source1 = atws_source_manual;

                        Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_atws;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_atws;
                        Prompt_atws = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect atws polyline:");
                        Prompt_atws.SetRejectMessage("\nSelect a polyline!");
                        Prompt_atws.AllowNone = true;
                        Prompt_atws.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        Rezultat_atws = ThisDrawing.Editor.GetEntity(Prompt_atws);

                        if (Rezultat_atws.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res_side;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                        PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify atws side:");
                        PP1.AllowNone = false;
                        Point_res_side = Editor1.GetPoint(PP1);

                        if (Point_res_side.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        double width1 = 0;
                        double sta1 = -1;
                        double sta2 = -1;
                        double orig_sta1 = -1;
                        double orig_sta2 = -1;
                        string LR = "";
                        string abutter1 = "";


                        List<ObjectId> lista_objectid_delete = new List<ObjectId>();

                        Polyline atws1 = Trans1.GetObject(Rezultat_atws.ObjectId, OpenMode.ForWrite) as Polyline;
                        Polyline feature1 = Trans1.GetObject(Rezultat_feat.ObjectId, OpenMode.ForWrite) as Polyline;

                        string handle0 = "";
                        string handle1 = "";

                        if (atws1 != null)
                        {
                            if (atws1.Layer != comboBox_layer_atws.Text)
                            {
                                MessageBox.Show("the layer of the atws does not match the combobox value\r\noperation aborted");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            handle1 = atws1.ObjectId.Handle.Value.ToString();
                            for (int n = 0; n < dt_atws.Rows.Count; ++n)
                            {
                                if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value &&
                                    dt_atws.Rows[n][atws_width_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_handle_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_working_side_column] != DBNull.Value && dt_atws.Rows[n][atws_justification_column] != DBNull.Value && dt_atws.Rows[n][atws_abutter_column] != DBNull.Value)
                                {
                                    string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);
                                    if (handle1.ToLower() == handle2.ToLower())
                                    {
                                        width1 = Convert.ToDouble(dt_atws.Rows[n][atws_width_column]);
                                        sta1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_column]);
                                        sta2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_column]);
                                        orig_sta1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_orig_column]);
                                        orig_sta2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_orig_column]);
                                        LR = Convert.ToString(dt_atws.Rows[n][atws_working_side_column]);
                                        justif1 = Convert.ToString(dt_atws.Rows[n][atws_justification_column]);
                                        abutter1 = Convert.ToString(dt_atws.Rows[n][atws_abutter_column]);
                                        lista_objectid_delete.Add(atws1.ObjectId);
                                        lista_justif.Add(justif1);
                                        handle0 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);


                                        if (dt_atws.Rows[n][atws_source_column] != DBNull.Value)
                                        {
                                            source1 = Convert.ToString(dt_atws.Rows[n][atws_source_column]);
                                        }

                                        if (source1 == atws_source_library)
                                        {
                                            for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                                            {
                                                double ws_sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                                double ws_sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                                if (Math.Round(ws_sta1, 2) == Math.Round(sta1, 2) && Math.Round(ws_sta2, 2) == Math.Round(sta2, 2))
                                                {
                                                    dt_corridor.Rows[i][tws_modified_column] = true;
                                                    i = dt_corridor.Rows.Count;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (sta1 == -1 && sta2 == -1)
                        {
                            MessageBox.Show("the handles for the atws in the current drawing don't match the handle from the workspace design file" +
                                            "\r\nyou should redraw the workspace" +
                                            "\r\nthen hit save for handle updates" +
                                            "\r\noperation aborted");

                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        Point3d pt_on_cl1 = polyCL.GetPointAtDist(sta1);
                        Point3d pt_on_cl2 = polyCL.GetPointAtDist(sta2);

                        for (int n = dt_atws.Rows.Count - 1; n >= 0; --n)
                        {
                            if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value)
                            {
                                string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]).ToLower();
                                if (handle1 == handle2)
                                {
                                    dt_atws.Rows[n].Delete();
                                }
                            }
                        }

                        for (int n = dt_atws.Rows.Count - 1; n >= 0; --n)
                        {
                            if (dt_atws.Rows[n][atws_handle0_column] != DBNull.Value)
                            {
                                string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]).ToLower();
                                string handle3 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]).ToLower();
                                if (handle0 == handle3)
                                {
                                    dt_atws.Rows[n].Delete();
                                    ObjectId id2 = Functions.GetObjectId(ThisDrawing.Database, handle2);
                                    if (id2 != ObjectId.Null)
                                    {
                                        lista_objectid_delete.Add(id2);

                                    }
                                }
                            }
                        }

                        for (int n = dt_atws_lod_manual.Columns.Count - 1; n >= 0; --n)
                        {
                            if (dt_atws_lod_manual.Columns[n].ColumnName == handle0)
                            {
                                dt_atws_lod_manual.Columns.Remove(handle0);
                            }
                        }



                        col_side1 = new Point2dCollection();
                        col_side2 = new Point2dCollection();

                        #region left atws
                        if (LR.ToUpper() == "LEFT")
                        {

                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            Polyline lod1_left = create_lod_construction_polylines(1, "LEFT");
                            Polyline lod_bottom_left = create_lod_construction_polylines(2, "LEFT");



                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod_bottom_left);

                            Polyline lod_top_left = create_lod_construction_polylines(3, "LEFT");

                            if (abutter1 == "ATWS")
                            {
                                lod_top_left = create_lod_construction_polylines(4, "LEFT");
                                lod_bottom_left = create_lod_construction_polylines(3, "LEFT");
                            }

                            Polyline lod_left_offset = get_offset_polyline(lod_top_left, -width1);

                            //add_poly_to_btrecord(Trans1, BTrecord, lod_top_left,1);
                            //add_poly_to_btrecord(Trans1, BTrecord, lod_bottom_left,2);
                            //Trans1.Commit();
                            //return;


                            feature1 = make_polyline_start_point_outside_corridor(lod_top_left, lod_left_offset, feature1);

                            Point3d pt_side = feature1.GetClosestPointTo(Point_res_side.Value, Vector3d.ZAxis, false);
                            double sta_sidef = feature1.GetDistAtPoint(pt_side);

                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();

                            feature1.Elevation = lod_top_left.Elevation;
                            Point3dCollection col_int_feat_bottom = Functions.Intersect_on_both_operands(lod_top_left, feature1);



                            if (col_int_feat_bottom.Count == 0)
                            {
                                MessageBox.Show("feature polyline does not intersect the boundary");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            int idx_int_bottom = 0;
                            if (col_int_feat_bottom.Count > 1)
                            {
                                double d1 = 1000;
                                for (int n = 0; n < col_int_feat_bottom.Count; ++n)
                                {
                                    Point3d pt_int = col_int_feat_bottom[n];

                                    double sta2_feat = feature1.GetDistAtPoint(feature1.GetClosestPointTo(pt_int, Vector3d.ZAxis, false));
                                    double d2 = Math.Abs(sta_sidef - sta2_feat);

                                    if (d2 < d1)
                                    {
                                        idx_int_bottom = n;
                                        d1 = d2;
                                    }
                                }
                            }

                            double sta_lod3 = lod_top_left.GetDistAtPoint(lod_top_left.GetClosestPointTo(col_int_feat_bottom[idx_int_bottom], Vector3d.ZAxis, false));
                            double sta_lod1 = -1;
                            double sta_lod2 = -1;


                            #region zigzag and start-end points

                            bool assigned_start = false;

                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();

                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod_top_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                sta_lod1 = lod_top_left.GetDistAtPoint(pt_start);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            pt_end = lod_top_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            sta_lod2 = lod_top_left.GetDistAtPoint(pt_end);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion

                            if (sta_lod1 == -1 || sta_lod2 == -1)
                            {
                                MessageBox.Show("data table error, atws2feature, line #9028, no match on handles");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }



                            Point3dCollection col_int_feat_top = Functions.Intersect_on_both_operands(lod_left_offset, feature1);
                            if (col_int_feat_top.Count == 0)
                            {
                                MessageBox.Show("feature offset polyline does not intersect the boundary");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            int idx_int_top = 0;


                            if (col_int_feat_top.Count > 1)
                            {
                                double d1 = 1000;
                                for (int n = 0; n < col_int_feat_top.Count; ++n)
                                {
                                    Point3d pt_int = col_int_feat_top[n];
                                    double sta2_feat = feature1.GetDistAtPoint(feature1.GetClosestPointTo(pt_int, Vector3d.ZAxis, false));
                                    double d2 = Math.Abs(sta_sidef - sta2_feat);

                                    if (d2 < d1)
                                    {
                                        idx_int_top = n;
                                        d1 = d2;
                                    }
                                }
                            }

                            double param_feat_bottom = feature1.GetParameterAtPoint(col_int_feat_bottom[idx_int_bottom]);
                            double param_feat_top = feature1.GetParameterAtPoint(col_int_feat_top[idx_int_top]);


                            Polyline part_feat = get_part_of_poly(feature1, param_feat_bottom, param_feat_top);
                            double d_f = Math.Pow(Math.Pow(part_feat.StartPoint.X - col_int_feat_top[idx_int_top].X, 2) + Math.Pow(part_feat.StartPoint.Y - col_int_feat_top[idx_int_top].Y, 2), 0.5);

                            if (Math.Round(d_f, 3) > 0)
                            {
                                part_feat = reverse_poly(part_feat);
                            }


                            if (Math.Abs(sta_lod3 - sta_lod1) < Math.Abs(sta_lod3 - sta_lod2))
                            {
                                pt_start = lod_top_left.GetPointAtDist(sta_lod3);
                                col_side1 = new Point2dCollection();
                                for (int k = part_feat.NumberOfVertices - 1; k >= 0; --k)
                                {
                                    col_side1.Add(part_feat.GetPoint2dAt(k));
                                }
                            }
                            else
                            {
                                pt_end = lod_top_left.GetPointAtDist(sta_lod3);
                                col_side2 = new Point2dCollection();
                                for (int k = 0; k < part_feat.NumberOfVertices; ++k)
                                {
                                    col_side2.Add(part_feat.GetPoint2dAt(k));
                                }
                            }


                            Polyline poly_new_atws_left = draw_manual_atws(polyCL, lod_bottom_left, lod_top_left, pt_start, pt_end, -width1, "LEFT", orig_sta1, orig_sta2, justif1, null, false);
                            //lista_od_atws_object_id.Add(poly_new_atws_left.ObjectId);
                            handle1 = "temp1";
                        }
                        #endregion

                        #region right atws
                        if (LR.ToUpper() == "RIGHT")
                        {
                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            Polyline lod1_right = create_lod_construction_polylines(1, "RIGHT");
                            Polyline lod_bottom_right = create_lod_construction_polylines(2, "RIGHT");



                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod_bottom_right);

                            Polyline lod_top_right = create_lod_construction_polylines(3, "RIGHT");

                            if (abutter1 == "ATWS")
                            {
                                lod_top_right = create_lod_construction_polylines(4, "RIGHT");
                                lod_bottom_right = create_lod_construction_polylines(3, "RIGHT");
                            }

                            Polyline lod_right_offset = get_offset_polyline(lod_top_right, width1);

                            //add_poly_to_btrecord(Trans1, BTrecord, lod_top_right,1);
                            //add_poly_to_btrecord(Trans1, BTrecord, lod_bottom_right,2);
                            //Trans1.Commit();
                            //return;


                            feature1 = make_polyline_start_point_outside_corridor(lod_top_right, lod_right_offset, feature1);

                            Point3d pt_side = feature1.GetClosestPointTo(Point_res_side.Value, Vector3d.ZAxis, false);
                            double sta_sidef = feature1.GetDistAtPoint(pt_side);

                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();

                            feature1.Elevation = lod_top_right.Elevation;
                            Point3dCollection col_int_feat_bottom = Functions.Intersect_on_both_operands(lod_top_right, feature1);



                            if (col_int_feat_bottom.Count == 0)
                            {
                                MessageBox.Show("feature polyline does not intersect the boundary");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            int idx_int_bottom = 0;
                            if (col_int_feat_bottom.Count > 1)
                            {
                                double d1 = 1000;
                                for (int n = 0; n < col_int_feat_bottom.Count; ++n)
                                {
                                    Point3d pt_int = col_int_feat_bottom[n];

                                    double sta2_feat = feature1.GetDistAtPoint(feature1.GetClosestPointTo(pt_int, Vector3d.ZAxis, false));
                                    double d2 = Math.Abs(sta_sidef - sta2_feat);

                                    if (d2 < d1)
                                    {
                                        idx_int_bottom = n;
                                        d1 = d2;
                                    }
                                }
                            }

                            double sta_lod3 = lod_top_right.GetDistAtPoint(lod_top_right.GetClosestPointTo(col_int_feat_bottom[idx_int_bottom], Vector3d.ZAxis, false));
                            double sta_lod1 = -1;
                            double sta_lod2 = -1;

                            #region zigzag and start-end points
                            bool assigned_start = false;
                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();
                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod_top_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                sta_lod1 = lod_top_right.GetDistAtPoint(pt_start);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            pt_end = lod_top_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            sta_lod2 = lod_top_right.GetDistAtPoint(pt_end);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion

                            if (sta_lod1 == -1 || sta_lod2 == -1)
                            {
                                MessageBox.Show("data table error, atws2feature, line #9028, no match on handles");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }



                            Point3dCollection col_int_feat_top = Functions.Intersect_on_both_operands(lod_right_offset, feature1);
                            if (col_int_feat_top.Count == 0)
                            {
                                MessageBox.Show("feature offset polyline does not intersect the boundary");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }

                            int idx_int_top = 0;


                            if (col_int_feat_top.Count > 1)
                            {
                                double d1 = 1000;
                                for (int n = 0; n < col_int_feat_top.Count; ++n)
                                {
                                    Point3d pt_int = col_int_feat_top[n];
                                    double sta2_feat = feature1.GetDistAtPoint(feature1.GetClosestPointTo(pt_int, Vector3d.ZAxis, false));
                                    double d2 = Math.Abs(sta_sidef - sta2_feat);
                                    if (d2 < d1)
                                    {
                                        idx_int_top = n;
                                        d1 = d2;
                                    }
                                }
                            }

                            double param_feat_bottom = feature1.GetParameterAtPoint(col_int_feat_bottom[idx_int_bottom]);
                            double param_feat_top = feature1.GetParameterAtPoint(col_int_feat_top[idx_int_top]);

                            Polyline part_feat = get_part_of_poly(feature1, param_feat_bottom, param_feat_top);
                            double d_f = Math.Pow(Math.Pow(part_feat.StartPoint.X - col_int_feat_top[idx_int_top].X, 2) + Math.Pow(part_feat.StartPoint.Y - col_int_feat_top[idx_int_top].Y, 2), 0.5);

                            if (Math.Round(d_f, 3) > 0)
                            {
                                part_feat = reverse_poly(part_feat);
                            }

                            if (Math.Abs(sta_lod3 - sta_lod1) < Math.Abs(sta_lod3 - sta_lod2))
                            {
                                pt_start = lod_top_right.GetPointAtDist(sta_lod3);
                                col_side1 = new Point2dCollection();
                                for (int k = part_feat.NumberOfVertices - 1; k >= 0; --k)
                                {
                                    col_side1.Add(part_feat.GetPoint2dAt(k));
                                }
                            }
                            else
                            {
                                pt_end = lod_top_right.GetPointAtDist(sta_lod3);
                                col_side2 = new Point2dCollection();
                                for (int k = 0; k < part_feat.NumberOfVertices; ++k)
                                {
                                    col_side2.Add(part_feat.GetPoint2dAt(k));
                                }
                            }



                            Polyline poly_new_atws_right = draw_manual_atws(polyCL, lod_bottom_right, lod_top_right, pt_start, pt_end, width1, "RIGHT", orig_sta1, orig_sta2, justif1, null, false);
                            //lista_od_atws_object_id.Add(poly_new_atws_right.ObjectId);
                            handle1 = "temp1";
                        }
                        #endregion


                        if (lista_objectid_delete.Count > 0)
                        {
                            for (int k = 0; k < lista_objectid_delete.Count; ++k)
                            {
                                ObjectId id1 = lista_objectid_delete[k];
                                Entity entity1 = Trans1.GetObject(id1, OpenMode.ForWrite) as Entity;
                                entity1.Erase();
                            }
                            delete_columns_not_found_in_dt_atws();
                        }

                        #region LOD polyline
                        if (dt_atws_manual != null && dt_atws_manual.Rows.Count > 0 && dt_atws != null && dt_atws.Rows.Count > 0)
                        {
                            if (LR.ToUpper() == "LEFT")
                            {
                                System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                                dt_atws_sorted = dt_atws.Clone();
                                for (int i = 0; i < dt_atws.Rows.Count; ++i)
                                {
                                    System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                    row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                    if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                    {
                                        dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                    }
                                }

                                Polyline lod1_left = create_lod_construction_polylines(1, "LEFT");
                                Polyline lod2_left = create_lod_construction_polylines(2, "LEFT");

                                dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);
                            }
                            if (LR.ToUpper() == "RIGHT")
                            {
                                System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                                dt_atws_sorted = dt_atws.Clone();
                                for (int i = 0; i < dt_atws.Rows.Count; ++i)
                                {
                                    System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                    row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                    if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                    {
                                        dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                    }
                                }

                                Polyline lod1_right = create_lod_construction_polylines(1, "RIGHT");
                                Polyline lod2_right = create_lod_construction_polylines(2, "RIGHT");

                                dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);
                            }
                        }
                        //draw_lod_polylines(Trans1, BTrecord);
                        #endregion
                        Trans1.Commit();
                    }

                    //attach_od_to_atws(lista_od_atws_object_id, new List<string> { justif1 });
                    // attach_dt_atws_to_datagridview(dt_atws);
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            delete_existing_linework();
            draw_all_corridors();

            this.WindowState = FormWindowState.Normal;
            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }
        private void dataGridView_library_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {

            }
            catch (System.ArgumentOutOfRangeException)
            {
            }
        }
        private void dataGridView_library_MouseClick(object sender, MouseEventArgs e)
        {

        }
        private void dataGridView_library_CellClick(object sender, DataGridViewCellEventArgs e)
        {

        }
        #region make checkbox column to work as a radio button and display flipped
        private void dataGridView_library_CellMouseUp(object sender, DataGridViewCellMouseEventArgs e)
        {


        }
        #endregion



        private void button_draw_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                MessageBox.Show("no centerline data found");
                return;
            }

            if (dt_library == null || dt_library.Rows.Count == 0)
            {
                MessageBox.Show("no worekspace library data found");
                return;
            }



            primary_workspace_name = comboBox_primary.Text;

            if (primary_workspace_name == "")
            {
                MessageBox.Show("specify primary workspace");
                return;
            }
            try
            {


                delete_existing_linework();

                build_dt_pcn();
                Polyline poly_cl = new Polyline();
                #region poly_cl
                for (int k = 0; k < dt_cl.Rows.Count; ++k)
                {
                    if (dt_cl.Rows[k][0] == DBNull.Value || dt_cl.Rows[k][1] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_cl.Rows[k][1])) == false)
                    {
                        MessageBox.Show("issues found on centerline data\r\noperation aborted");
                        set_enable_true();
                        return;
                    }
                    poly_cl.AddVertexAt(k, (Point2d)dt_cl.Rows[k][0], 0, 0, 0);
                }
                poly_cl.Elevation = 0;
                #endregion





                draw_permanent(poly_cl);

                Polyline poly_p_left = new Polyline();
                Polyline poly_p_right = new Polyline();


                if (dt_poly_perm != null && dt_poly_perm.Rows.Count > 0)
                {
                    #region build left and right perm polylines
                    int idx = 0;
                    for (int k = 0; k < dt_poly_perm.Rows.Count; ++k)
                    {
                        if (dt_poly_perm.Rows[k][col_x] == DBNull.Value || dt_poly_perm.Rows[k][col_y] == DBNull.Value ||
                            dt_poly_perm.Rows[k][col_side] == DBNull.Value ||
                            Functions.IsNumeric(Convert.ToString(dt_poly_perm.Rows[k][col_x])) == false ||
                             Functions.IsNumeric(Convert.ToString(dt_poly_perm.Rows[k][col_y])) == false)
                        {
                            MessageBox.Show("issues found on permanent easement data\r\noperation aborted");
                            set_enable_true();
                            return;
                        }

                        if (Convert.ToString(dt_poly_perm.Rows[k][col_side]) == "LEFT")
                        {
                            double x = Convert.ToDouble(dt_poly_perm.Rows[k][col_x]);
                            double y = Convert.ToDouble(dt_poly_perm.Rows[k][col_y]);

                            poly_p_left.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                            ++idx;
                        }
                        else
                        {
                            k = dt_poly_perm.Rows.Count;
                        }
                    }
                    poly_p_left.Elevation = 0;

                    idx = 0;
                    for (int k = dt_poly_perm.Rows.Count - 1; k >= 0; --k)
                    {
                        if (dt_poly_perm.Rows[k][col_x] == DBNull.Value || dt_poly_perm.Rows[k][col_y] == DBNull.Value ||
                            dt_poly_perm.Rows[k][col_side] == DBNull.Value ||
                            Functions.IsNumeric(Convert.ToString(dt_poly_perm.Rows[k][col_x])) == false ||
                             Functions.IsNumeric(Convert.ToString(dt_poly_perm.Rows[k][col_y])) == false)
                        {
                            MessageBox.Show("issues found on permanent easement data\r\noperation aborted");
                            set_enable_true();
                            return;
                        }

                        if (Convert.ToString(dt_poly_perm.Rows[k][col_side]) == "RIGHT")
                        {
                            double x = Convert.ToDouble(dt_poly_perm.Rows[k][col_x]);
                            double y = Convert.ToDouble(dt_poly_perm.Rows[k][col_y]);

                            poly_p_right.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                            ++idx;
                        }
                        else
                        {
                            k = -1;
                        }
                    }
                    poly_p_right.Elevation = 0;
                    #endregion

                    draw_tws(poly_cl, poly_p_left, poly_p_right);

                    Polyline lod_left = new Polyline();
                    lod_left = poly_p_left.Clone() as Polyline;

                    Polyline lod_right = new Polyline();
                    lod_right = poly_p_right.Clone() as Polyline;

                    if (lod_left != null && lod_right != null)
                    {
                        #region lift lod to top of tws
                        string id_left = "";
                        string id_right = "";
                        Polyline left_up = null;
                        Polyline left_down = null;
                        Polyline right_up = null;
                        Polyline right_down = null;
                        int il1 = 0;
                        int il2 = 0;
                        int ir1 = 0;
                        int ir2 = 0;

                        if (dt_poly_tws != null && dt_poly_tws.Rows.Count > 0)
                        {
                            for (int k = 0; k < dt_poly_tws.Rows.Count; ++k)
                            {
                                if (dt_poly_tws.Rows[k][col_x] != DBNull.Value || dt_poly_tws.Rows[k][col_y] != DBNull.Value ||
                                    dt_poly_tws.Rows[k][col_side] != DBNull.Value || dt_poly_tws.Rows[k][col_id] != DBNull.Value ||
                                    dt_poly_tws.Rows[k][col_sta1] != DBNull.Value || dt_poly_tws.Rows[k][col_sta2] != DBNull.Value)
                                {
                                    string id1 = Convert.ToString(dt_poly_tws.Rows[k][col_id]);
                                    string side1 = Convert.ToString(dt_poly_tws.Rows[k][col_side]);
                                    double x = Convert.ToDouble(dt_poly_tws.Rows[k][col_x]);
                                    double y = Convert.ToDouble(dt_poly_tws.Rows[k][col_y]);
                                    double sta1 = Convert.ToDouble(dt_poly_tws.Rows[k][col_sta1]);
                                    double sta2 = Convert.ToDouble(dt_poly_tws.Rows[k][col_sta2]);

                                    #region left side
                                    if (id_left != id1)
                                    {
                                        id_left = id1;
                                        il1 = 0;
                                        il2 = 0;
                                        if (left_up != null)
                                        {
                                            Point3d pt_on_perm1 = lod_left.GetClosestPointTo(left_down.StartPoint, Vector3d.ZAxis, false);
                                            double param1 = lod_left.GetParameterAtPoint(pt_on_perm1);
                                            Point3d pt_on_perm2 = lod_left.GetClosestPointTo(left_down.EndPoint, Vector3d.ZAxis, false);
                                            double param2 = lod_left.GetParameterAtPoint(pt_on_perm2);

                                            int ceil = Convert.ToInt32(Math.Ceiling(param1));
                                            int flr = Convert.ToInt32(Math.Floor(param2));

                                            if (flr > ceil)
                                            {
                                                for (int i = flr; i >= ceil; --i)
                                                {
                                                    lod_left.RemoveVertexAt(i);
                                                }
                                            }

                                            lod_left.AddVertexAt(ceil, new Point2d(pt_on_perm2.X, pt_on_perm2.Y), 0, 0, 0);

                                            for (int i = left_up.NumberOfVertices - 1; i >= 0; --i)
                                            {
                                                lod_left.AddVertexAt(ceil, left_up.GetPoint2dAt(i), 0, 0, 0);
                                            }
                                            lod_left.AddVertexAt(ceil, new Point2d(pt_on_perm1.X, pt_on_perm1.Y), 0, 0, 0);
                                        }

                                        if (side1 == "LEFT_UP")
                                        {
                                            left_up = new Polyline();
                                            left_up.AddVertexAt(il1, new Point2d(x, y), 0, 0, 0);
                                            ++il1;
                                        }
                                    }
                                    else
                                    {
                                        if (side1 == "LEFT_UP")
                                        {
                                            left_up.AddVertexAt(il1, new Point2d(x, y), 0, 0, 0);
                                            ++il1;
                                        }
                                        if (side1 == "LEFT_DOWN")
                                        {
                                            if (il2 == 0)
                                            {
                                                left_down = new Polyline();
                                            }
                                            left_down.AddVertexAt(0, new Point2d(x, y), 0, 0, 0);
                                            ++il2;
                                        }

                                    }

                                    if (k == dt_poly_tws.Rows.Count - 1)
                                    {
                                        if (left_up != null)
                                        {
                                            Point3d pt_on_perm1 = lod_left.GetClosestPointTo(left_down.StartPoint, Vector3d.ZAxis, false);
                                            double param1 = lod_left.GetParameterAtPoint(pt_on_perm1);
                                            Point3d pt_on_perm2 = lod_left.GetClosestPointTo(left_down.EndPoint, Vector3d.ZAxis, false);
                                            double param2 = lod_left.GetParameterAtPoint(pt_on_perm2);

                                            int ceil = Convert.ToInt32(Math.Ceiling(param1));
                                            int flr = Convert.ToInt32(Math.Floor(param2));

                                            if (flr > ceil)
                                            {
                                                for (int i = flr; i >= ceil; --i)
                                                {
                                                    lod_left.RemoveVertexAt(i);
                                                }
                                            }

                                            //lod_left.AddVertexAt(ceil, new Point2d(pt_on_perm2.X, pt_on_perm2.Y), 0, 0, 0);

                                            for (int i = left_up.NumberOfVertices - 1; i >= 0; --i)
                                            {
                                                lod_left.AddVertexAt(ceil, left_up.GetPoint2dAt(i), 0, 0, 0);
                                            }
                                            lod_left.AddVertexAt(ceil, new Point2d(pt_on_perm1.X, pt_on_perm1.Y), 0, 0, 0);
                                        }
                                    }
                                    #endregion

                                    #region right side
                                    if (id_right != id1)
                                    {
                                        id_right = id1;
                                        ir1 = 0;
                                        ir2 = 0;
                                        if (right_up != null)
                                        {
                                            Point3d pt_on_perm1 = lod_right.GetClosestPointTo(right_down.StartPoint, Vector3d.ZAxis, false);
                                            double param1 = lod_right.GetParameterAtPoint(pt_on_perm1);
                                            Point3d pt_on_perm2 = lod_right.GetClosestPointTo(right_down.EndPoint, Vector3d.ZAxis, false);
                                            double param2 = lod_right.GetParameterAtPoint(pt_on_perm2);

                                            int ceil = Convert.ToInt32(Math.Ceiling(param1));
                                            int flr = Convert.ToInt32(Math.Floor(param2));

                                            if (flr > ceil)
                                            {
                                                for (int i = flr; i >= ceil; --i)
                                                {
                                                    lod_right.RemoveVertexAt(i);
                                                }
                                            }

                                            lod_right.AddVertexAt(ceil, new Point2d(pt_on_perm2.X, pt_on_perm2.Y), 0, 0, 0);

                                            for (int i = right_up.NumberOfVertices - 1; i >= 0; --i)
                                            {
                                                lod_right.AddVertexAt(ceil, right_up.GetPoint2dAt(i), 0, 0, 0);
                                            }
                                            lod_right.AddVertexAt(ceil, new Point2d(pt_on_perm1.X, pt_on_perm1.Y), 0, 0, 0);
                                        }

                                        if (side1 == "RIGHT_UP")
                                        {
                                            right_up = new Polyline();
                                            right_up.AddVertexAt(ir1, new Point2d(x, y), 0, 0, 0);
                                            ++ir1;
                                        }
                                    }
                                    else
                                    {
                                        if (side1 == "RIGHT_UP")
                                        {
                                            right_up.AddVertexAt(ir1, new Point2d(x, y), 0, 0, 0);
                                            ++ir1;
                                        }
                                        if (side1 == "RIGHT_DOWN")
                                        {
                                            if (ir2 == 0)
                                            {
                                                right_down = new Polyline();
                                            }
                                            right_down.AddVertexAt(0, new Point2d(x, y), 0, 0, 0);
                                            ++ir2;
                                        }

                                    }

                                    if (k == dt_poly_tws.Rows.Count - 1)
                                    {
                                        if (right_up != null)
                                        {
                                            Point3d pt_on_perm1 = lod_right.GetClosestPointTo(right_down.StartPoint, Vector3d.ZAxis, false);
                                            double param1 = lod_right.GetParameterAtPoint(pt_on_perm1);
                                            Point3d pt_on_perm2 = lod_right.GetClosestPointTo(right_down.EndPoint, Vector3d.ZAxis, false);
                                            double param2 = lod_right.GetParameterAtPoint(pt_on_perm2);

                                            int ceil = Convert.ToInt32(Math.Ceiling(param1));
                                            int flr = Convert.ToInt32(Math.Floor(param2));

                                            if (flr > ceil)
                                            {
                                                for (int i = flr; i >= ceil; --i)
                                                {
                                                    lod_right.RemoveVertexAt(i);
                                                }
                                            }

                                            //lod_right.AddVertexAt(ceil, new Point2d(pt_on_perm2.X, pt_on_perm2.Y), 0, 0, 0);

                                            for (int i = right_up.NumberOfVertices - 1; i >= 0; --i)
                                            {
                                                lod_right.AddVertexAt(ceil, right_up.GetPoint2dAt(i), 0, 0, 0);
                                            }
                                            lod_right.AddVertexAt(ceil, new Point2d(pt_on_perm1.X, pt_on_perm1.Y), 0, 0, 0);
                                        }
                                    }
                                    #endregion
                                }
                            }
                        }
                        #endregion

                        draw_atws(poly_cl, lod_left, lod_right);

                        Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                        try
                        {
                            using (DocumentLock lock1 = ThisDrawing.LockDocument())
                            {
                                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                                {
                                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;


                                    //BTrecord.AppendEntity(lod_left);
                                    //Trans1.AddNewlyCreatedDBObject(lod_left, true);

                                    //BTrecord.AppendEntity(lod_right);
                                    //Trans1.AddNewlyCreatedDBObject(lod_right, true);

                                    //Trans1.Commit();
                                }
                            }
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }




                }







                //attach_dt_ws_to_datagridview(dt_corridor);
                //attach_dt_atws_to_datagridview(dt_atws);
                //attach_dt_perm_proposed_to_datagridview(dt_prop_perm);
                //attach_dt_perm_proposed_to_datagridview(dt_prop_perm);

                fill_library_comboboxes(dt_library);
                //corr_sta_start = -1;
                //corr_sta_end = -1;

            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            set_enable_true();

        }

        public void draw_permanent(Polyline poly_cl)
        {
            set_enable_false();
            string perm_layer = comboBox_layer_perm.Text;

            ObjectId[] Empty_array = null;

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            if (ThisDrawing == null)
            {
                MessageBox.Show("you are trying to run outside of a drawing\r\nopen or create a drawing\r\noperation aborted");
                set_enable_true();
                return;
            }

            string dwg1 = ThisDrawing.Database.OriginalFileName;

            using (DocumentLock lock1 = ThisDrawing.LockDocument())
            {
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                    Autodesk.AutoCAD.ApplicationServices.Application.SetSystemVariable("OFFSETGAPTYPE", 0);

                    Functions.Creaza_layer(perm_layer, 1, true);

                    if (dt_poly_perm == null)
                    {
                        dt_poly_perm = new System.Data.DataTable();
                        dt_poly_perm.Columns.Add(col_x, typeof(double));
                        dt_poly_perm.Columns.Add(col_y, typeof(double));
                        dt_poly_perm.Columns.Add(col_side, typeof(string));
                        dt_poly_perm.Columns.Add(col_sta1, typeof(double));
                        dt_poly_perm.Columns.Add(col_sta2, typeof(double));

                    }


                    System.Data.DataTable dt_perm_left = new System.Data.DataTable();
                    System.Data.DataTable dt_perm_right = new System.Data.DataTable();
                    dt_perm_left.Columns.Add("pt", typeof(Point3d));
                    dt_perm_left.Columns.Add("idx", typeof(int));
                    dt_perm_left.Columns.Add(col_sta1, typeof(double));
                    dt_perm_left.Columns.Add(col_sta2, typeof(double));
                    dt_perm_right = dt_perm_left.Clone();

                    if (dt_poly_perm.Rows.Count == 0)
                    {
                        for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                        {

                            if (dt_corridor.Rows[i][tws_sta1_column] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta1_column])) == false || dt_corridor.Rows[i][tws_sta2_column] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta2_column])) == false)
                            {
                                MessageBox.Show("station start/end was not specified correctly");
                                set_enable_true();
                                return;
                            }

                            double sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                            double sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);

                            if (dt_corridor.Rows[i][col_corridor_name] != DBNull.Value)
                            {

                                double p_perm_l = Convert.ToDouble(dt_pcn.Rows[i][0]);
                                double p_perm_r = Convert.ToDouble(dt_pcn.Rows[i][1]);


                                double perm_l = Convert.ToDouble(dt_pcn.Rows[i][6]);
                                double perm_r = Convert.ToDouble(dt_pcn.Rows[i][7]);



                                double n_perm_l = Convert.ToDouble(dt_pcn.Rows[i][12]);
                                double n_perm_r = Convert.ToDouble(dt_pcn.Rows[i][13]);


                                string ws_name = Convert.ToString(dt_corridor.Rows[i][col_corridor_name]);



                                #region define param1, param2, pt1, pt2                                
                                if (sta1 > poly_cl.Length || sta2 > poly_cl.Length)
                                {
                                    MessageBox.Show("station (" + sta1.ToString() + " and / or " + sta2.ToString() +
                                                    ")\r\nis bigger than centerline length\r\n(" + poly_cl.Length.ToString() + ")");
                                    set_enable_true();
                                    return;
                                }
                                double param1 = poly_cl.GetParameterAtDistance(sta1);
                                double param2 = poly_cl.GetParameterAtDistance(sta2);
                                Point3d pt1 = poly_cl.GetPointAtParameter(param1);
                                Point3d pt2 = poly_cl.GetPointAtParameter(param2);
                                #endregion


                                if (perm_l >= 0 && perm_r >= 0)
                                {




                                    Polyline perm_right = new Polyline();
                                    Polyline perm_left = new Polyline();
                                    Polyline perm_right_straight = new Polyline();
                                    Polyline perm_left_straight = new Polyline();
                                    if (perm_r > 0)
                                    {
                                        perm_right = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, perm_r, p_perm_r, n_perm_r, perm_r);
                                        perm_right_straight = get_trimmed_offset_without_feature(poly_cl, sta1, sta2, perm_r);
                                    }
                                    else
                                    {
                                        perm_right = get_part_of_poly(poly_cl, param1, param2);
                                        perm_right_straight = get_part_of_poly(poly_cl, param1, param2);
                                    }
                                    if (perm_l > 0)
                                    {
                                        perm_left = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, -perm_l, -p_perm_l, -n_perm_l, -perm_l);
                                        perm_left_straight = get_trimmed_offset_without_feature(poly_cl, sta1, sta2, -perm_l);
                                    }
                                    else
                                    {
                                        perm_left = get_part_of_poly(poly_cl, param1, param2);
                                        perm_left_straight = get_part_of_poly(poly_cl, param1, param2);
                                    }



                                    #region permanent easement
                                    if (perm_left != null && perm_right != null)
                                    {
                                        for (int k = 0; k < perm_left.NumberOfVertices; ++k)
                                        {
                                            dt_perm_left.Rows.Add();
                                            dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][0] = perm_left.GetPointAtParameter(k);
                                            dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][1] = i;
                                            dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][col_sta1] = sta1;
                                            dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][col_sta2] = sta2;

                                        }

                                        for (int k = 0; k < perm_right.NumberOfVertices; ++k)
                                        {
                                            dt_perm_right.Rows.Add();
                                            dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][0] = perm_right.GetPointAtParameter(k);
                                            dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][1] = i;
                                            dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][col_sta1] = sta1;
                                            dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][col_sta2] = sta2;
                                        }
                                    }
                                    #endregion
                                }

                            }


                        }

                        #region permanent easement
                        if (dt_perm_left.Rows.Count > 1 && dt_perm_right.Rows.Count > 1)
                        {
                            Point2dCollection col1 = new Point2dCollection();
                            System.Data.DataTable dt_sta = new System.Data.DataTable();
                            dt_sta.Columns.Add(col_sta1, typeof(double));
                            dt_sta.Columns.Add(col_sta2, typeof(double));


                            int idx0 = 0;
                            Point2d pt0 = new Point2d();
                            for (int k = 0; k < dt_perm_left.Rows.Count; ++k)
                            {
                                Point3d pt_perm1 = (Point3d)dt_perm_left.Rows[k][0];
                                int idx1 = Convert.ToInt32(dt_perm_left.Rows[k][1]);
                                Point2d pt1 = new Point2d(pt_perm1.X, pt_perm1.Y);

                                double sta1 = Convert.ToDouble(dt_perm_left.Rows[k][col_sta1]);
                                double sta2 = Convert.ToDouble(dt_perm_left.Rows[k][col_sta2]);

                                if (k < dt_perm_left.Rows.Count - 1)
                                {
                                    idx0 = Convert.ToInt32(dt_perm_left.Rows[k + 1][1]);
                                }

                                if (k == 0 || k >= dt_perm_left.Rows.Count - 3 || idx0 == idx1)
                                {
                                    col1.Add(pt1);
                                    dt_sta.Rows.Add();
                                    dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta1] = sta1;
                                    dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta2] = sta2;
                                }
                                else
                                {
                                    Polyline polyt1 = new Polyline();
                                    polyt1.AddVertexAt(0, pt0, 0, 0, 0);
                                    polyt1.AddVertexAt(1, pt1, 0, 0, 0);
                                    polyt1.Elevation = 0;

                                    Point3d pt_perm2 = (Point3d)dt_perm_left.Rows[k + 1][0];
                                    Point3d pt_perm3 = (Point3d)dt_perm_left.Rows[k + 2][0];
                                    Point2d pt2 = new Point2d(pt_perm2.X, pt_perm2.Y);
                                    Point2d pt3 = new Point2d(pt_perm3.X, pt_perm3.Y);

                                    Polyline polyt2 = new Polyline();
                                    polyt2.AddVertexAt(0, pt2, 0, 0, 0);
                                    polyt2.AddVertexAt(1, pt3, 0, 0, 0);
                                    polyt2.Elevation = 0;

                                    Point3dCollection colint = Functions.Intersect_on_both_operands(polyt1, polyt2);
                                    if (colint.Count == 1)
                                    {
                                        Point2d pt2d = new Point2d(colint[0].X, colint[0].Y);
                                        col1.Add(pt2d);
                                        ++k;
                                        dt_sta.Rows.Add();
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta1] = sta1;
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta2] = sta2;
                                    }
                                    else
                                    {
                                        col1.Add(pt1);
                                        dt_sta.Rows.Add();
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta1] = sta1;
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta2] = sta2;
                                    }
                                }
                                pt0 = pt1;
                            }
                            idx0 = 0;
                            pt0 = new Point2d();

                            int left_side_end_idx = col1.Count - 1;

                            for (int k = dt_perm_right.Rows.Count - 1; k >= 0; --k)
                            {
                                Point3d pt_perm1 = (Point3d)dt_perm_right.Rows[k][0];
                                int idx1 = Convert.ToInt32(dt_perm_right.Rows[k][1]);

                                double sta1 = Convert.ToDouble(dt_perm_right.Rows[k][col_sta1]);
                                double sta2 = Convert.ToDouble(dt_perm_right.Rows[k][col_sta2]);

                                if (k == dt_perm_right.Rows.Count - 1) idx0 = idx1;
                                if (k > 0)
                                {
                                    idx0 = Convert.ToInt32(dt_perm_right.Rows[k - 1][1]);
                                }
                                Point2d pt1 = new Point2d(pt_perm1.X, pt_perm1.Y);
                                if (k == dt_perm_right.Rows.Count - 1 || k < 2 || idx0 == idx1)
                                {
                                    col1.Add(pt1);
                                    dt_sta.Rows.Add();
                                    dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta1] = sta1;
                                    dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta2] = sta2;
                                }
                                else
                                {
                                    Polyline polyt1 = new Polyline();
                                    polyt1.AddVertexAt(0, pt0, 0, 0, 0);
                                    polyt1.AddVertexAt(1, pt1, 0, 0, 0);
                                    polyt1.Elevation = 0;
                                    Point3d pt_perm2 = (Point3d)dt_perm_right.Rows[k - 1][0];
                                    Point3d pt_perm3 = (Point3d)dt_perm_right.Rows[k - 2][0];
                                    Point2d pt2 = new Point2d(pt_perm2.X, pt_perm2.Y);
                                    Point2d pt3 = new Point2d(pt_perm3.X, pt_perm3.Y);
                                    Polyline polyt2 = new Polyline();
                                    polyt2.AddVertexAt(0, pt2, 0, 0, 0);
                                    polyt2.AddVertexAt(1, pt3, 0, 0, 0);
                                    polyt2.Elevation = 0;
                                    Point3dCollection colint = Functions.Intersect_on_both_operands(polyt1, polyt2);
                                    if (colint.Count == 1)
                                    {
                                        Point2d pt2d = new Point2d(colint[0].X, colint[0].Y);
                                        col1.Add(pt2d);
                                        --k;
                                        dt_sta.Rows.Add();
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta1] = sta1;
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta2] = sta2;
                                    }
                                    else
                                    {
                                        col1.Add(pt1);
                                        dt_sta.Rows.Add();
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta1] = sta1;
                                        dt_sta.Rows[dt_sta.Rows.Count - 1][col_sta2] = sta2;
                                    }
                                }
                                pt0 = pt1;
                            }

                            Polyline poly_perm = new Polyline();
                            if (col1.Count > 1)
                            {
                                for (int k = 0; k < col1.Count; ++k)
                                {
                                    poly_perm.AddVertexAt(k, col1[k], 0, 0, 0);

                                    dt_poly_perm.Rows.Add();
                                    dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_x] = col1[k].X;
                                    dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_y] = col1[k].Y;
                                    if (k <= left_side_end_idx)
                                    {
                                        dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_side] = "LEFT";
                                    }
                                    else
                                    {
                                        dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_side] = "RIGHT";
                                    }
                                    dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_sta1] = dt_sta.Rows[k][col_sta1];
                                    dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_sta2] = dt_sta.Rows[k][col_sta2];
                                }
                            }

                            poly_perm.Elevation = 0;
                            poly_perm.Closed = true;
                            poly_perm.ColorIndex = 256;
                            poly_perm.Layer = perm_layer;
                            BTrecord.AppendEntity(poly_perm);
                            Trans1.AddNewlyCreatedDBObject(poly_perm, true);

                            dt_erase.Rows.Add();
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_perm.ObjectId;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = perm_layer;
                        }
                        #endregion
                    }
                    else if (dt_poly_perm.Rows.Count > 0)
                    {
                        Polyline poly_perm = new Polyline();

                        int idx = 0;

                        for (int k = 0; k < dt_poly_perm.Rows.Count; ++k)
                        {
                            if (dt_poly_perm.Rows[k][col_x] != DBNull.Value && dt_poly_perm.Rows[k][col_y] != DBNull.Value)
                            {
                                double x = Convert.ToDouble(dt_poly_perm.Rows[k][col_x]);
                                double y = Convert.ToDouble(dt_poly_perm.Rows[k][col_y]);
                                poly_perm.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                            }
                        }

                        poly_perm.Elevation = 0;
                        poly_perm.Closed = true;
                        poly_perm.ColorIndex = 256;
                        poly_perm.Layer = perm_layer;
                        BTrecord.AppendEntity(poly_perm);
                        Trans1.AddNewlyCreatedDBObject(poly_perm, true);

                        dt_erase.Rows.Add();
                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_perm.ObjectId;
                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = perm_layer;
                    }
                    Trans1.Commit();
                }
            }
            set_enable_true();
        }

        public void draw_tws(Polyline poly_cl, Polyline poly_perm_left, Polyline poly_perm_right)
        {
            set_enable_false();
            string tws_layer = comboBox_layer_tws.Text;

            ObjectId[] Empty_array = null;

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            if (ThisDrawing == null)
            {
                MessageBox.Show("you are trying to run outside of a drawing\r\nopen or create a drawing\r\noperation aborted");
                set_enable_true();
                return;
            }

            string dwg1 = ThisDrawing.Database.OriginalFileName;

            using (DocumentLock lock1 = ThisDrawing.LockDocument())
            {
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;
                    Autodesk.AutoCAD.ApplicationServices.Application.SetSystemVariable("OFFSETGAPTYPE", 0);

                    Functions.Creaza_layer(tws_layer, 3, true);

                    if (dt_poly_tws == null)
                    {
                        dt_poly_tws = new System.Data.DataTable();
                        dt_poly_tws.Columns.Add(col_id, typeof(string));
                        dt_poly_tws.Columns.Add(col_x, typeof(double));
                        dt_poly_tws.Columns.Add(col_y, typeof(double));
                        dt_poly_tws.Columns.Add(col_side, typeof(string));
                        dt_poly_tws.Columns.Add(col_sta1, typeof(double));
                        dt_poly_tws.Columns.Add(col_sta2, typeof(double));

                    }

                    if (dt_poly_tws.Rows.Count == 0)
                    {
                        Polyline[] twsL1 = null;
                        Polyline[] twsR1 = null;
                        Polyline[] twsL2 = null;
                        Polyline[] twsR2 = null;


                        int sizeL = 0;
                        int sizeR = 0;

                        int tws_index = 0;

                        for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                        {
                            double sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                            double sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);

                            if (dt_corridor.Rows[i][col_corridor_name] != DBNull.Value)
                            {
                                double p_perm_l = Convert.ToDouble(dt_pcn.Rows[i][0]);
                                double p_perm_r = Convert.ToDouble(dt_pcn.Rows[i][1]);
                                double p_tws_l = Convert.ToDouble(dt_pcn.Rows[i][2]);
                                double p_tws_r = Convert.ToDouble(dt_pcn.Rows[i][3]);
                                double p_atws_l = Convert.ToDouble(dt_pcn.Rows[i][4]);
                                double p_atws_r = Convert.ToDouble(dt_pcn.Rows[i][5]);

                                double perm_l = Convert.ToDouble(dt_pcn.Rows[i][6]);
                                double perm_r = Convert.ToDouble(dt_pcn.Rows[i][7]);
                                double tws_left = Convert.ToDouble(dt_pcn.Rows[i][8]);
                                double tws_right = Convert.ToDouble(dt_pcn.Rows[i][9]);
                                double atws_left = Convert.ToDouble(dt_pcn.Rows[i][10]);
                                double atws_right = Convert.ToDouble(dt_pcn.Rows[i][11]);

                                double n_perm_l = Convert.ToDouble(dt_pcn.Rows[i][12]);
                                double n_perm_r = Convert.ToDouble(dt_pcn.Rows[i][13]);
                                double n_tws_l = Convert.ToDouble(dt_pcn.Rows[i][14]);
                                double n_tws_r = Convert.ToDouble(dt_pcn.Rows[i][15]);
                                double n_atws_l = Convert.ToDouble(dt_pcn.Rows[i][16]);
                                double n_atws_r = Convert.ToDouble(dt_pcn.Rows[i][17]);

                                string ws_name = Convert.ToString(dt_corridor.Rows[i][col_corridor_name]);

                                Point3d pt1 = poly_cl.GetPointAtDist(sta1);
                                Point3d pt2 = poly_cl.GetPointAtDist(sta2);
                                double par1 = poly_cl.GetParameterAtDistance(sta1);
                                double par2 = poly_cl.GetParameterAtDistance(sta2);
                                double p1 = Math.Round(par1, 0);
                                double p2 = Math.Round(par2, 0);
                                Point3d pt11 = poly_cl.GetPointAtParameter(p1);
                                Point3d pt22 = poly_cl.GetPointAtParameter(p2);


                                Polyline part_cl = new Polyline();
                                bool remove_pt1 = false;
                                bool remove_pt2 = false;
                                if (tws_left > 0 || tws_right > 0)
                                {
                                    double d1 = Math.Pow(Math.Pow((pt1.X - pt11.X), 2) + Math.Pow(pt1.Y - pt11.Y, 2), 0.5);

                                    if (d1 < 0.01)
                                    {
                                        par1 = p1;
                                        remove_pt1 = true;
                                        p1 = p1 - 1;
                                        if (p1 < 0)
                                        {
                                            remove_pt1 = false;
                                            p1 = 0;
                                        }
                                    }
                                    else
                                    {
                                        p1 = par1;
                                    }

                                    double d2 = Math.Pow(Math.Pow((pt2.X - pt22.X), 2) + Math.Pow(pt2.Y - pt22.Y, 2), 0.5);
                                    if (d2 < 0.01)
                                    {
                                        par2 = p2;
                                        remove_pt2 = true;
                                        p2 = p2 + 1;
                                        if (p2 > poly_cl.EndParam)
                                        {
                                            remove_pt2 = false;
                                            p2 = poly_cl.EndParam;
                                        }

                                    }
                                    else
                                    {
                                        p2 = par2;
                                    }
                                    part_cl = get_part_of_poly(poly_cl, p1, p2);
                                }



                                if (tws_left > 0)
                                {

                                    Polyline pcl_down = new Polyline();
                                    pcl_down = get_simple_offset_polyline(part_cl, -perm_l);

                                    Polyline pcl_up = new Polyline();
                                    pcl_up = get_simple_offset_polyline(pcl_down, -tws_left);

                                    if (remove_pt1 == true)
                                    {
                                        pcl_down.RemoveVertexAt(0);
                                        pcl_up.RemoveVertexAt(0);
                                    }

                                    if (remove_pt2 == true)
                                    {
                                        pcl_down.RemoveVertexAt(pcl_down.NumberOfVertices - 1);
                                        pcl_up.RemoveVertexAt(pcl_up.NumberOfVertices - 1);
                                    }


                                    ++sizeL;
                                    Array.Resize(ref twsL1, sizeL);
                                    twsL1[sizeL - 1] = new Polyline();
                                    twsL1[sizeL - 1] = pcl_down;
                                    Array.Resize(ref twsL2, sizeL);
                                    twsL2[sizeL - 1] = new Polyline();
                                    twsL2[sizeL - 1] = pcl_up;

                                    if (n_tws_l == 0)
                                    {
                                        int idx = 0;
                                        Polyline poly1 = new Polyline();
                                        for (int k = 0; k < twsL2.Length; ++k)
                                        {
                                            for (int r = 0; r < twsL2[k].NumberOfVertices; r++)
                                            {
                                                Point2d point1 = twsL2[k].GetPoint2dAt(r);
                                                poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                                ++idx;
                                                dt_poly_tws.Rows.Add();
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_id] = "TWS_" + Convert.ToString(tws_index) + "_LEFT";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_side] = "LEFT_UP";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_x] = point1.X;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_y] = point1.Y;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta1] = sta1;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta2] = sta2;
                                            }
                                        }

                                        for (int k = twsL2.Length - 1; k >= 0; --k)
                                        {
                                            for (int r = twsL1[k].NumberOfVertices - 1; r >= 0; r--)
                                            {
                                                Point2d point1 = twsL1[k].GetPoint2dAt(r);
                                                poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                                ++idx;
                                                dt_poly_tws.Rows.Add();
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_id] = "TWS_" + Convert.ToString(tws_index) + "_LEFT";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_side] = "LEFT_DOWN";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_x] = point1.X;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_y] = point1.Y;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta1] = sta1;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta2] = sta2;
                                            }
                                        }
                                        poly1.Closed = true;
                                        poly1.Layer = tws_layer;
                                        BTrecord.AppendEntity(poly1);
                                        Trans1.AddNewlyCreatedDBObject(poly1, true);

                                        dt_erase.Rows.Add();
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;
                                        sizeL = 0;
                                        twsL1 = null;
                                        twsL2 = null;
                                        ++tws_index;
                                    }
                                }

                                if (tws_right > 0)
                                {

                                    Polyline pcl_down = new Polyline();
                                    pcl_down = get_simple_offset_polyline(part_cl, perm_r);

                                    Polyline pcl_up = new Polyline();
                                    pcl_up = get_simple_offset_polyline(pcl_down, tws_right);

                                    if (remove_pt1 == true)
                                    {
                                        pcl_down.RemoveVertexAt(0);
                                        pcl_up.RemoveVertexAt(0);
                                    }

                                    if (remove_pt2 == true)
                                    {
                                        pcl_down.RemoveVertexAt(pcl_down.NumberOfVertices - 1);
                                        pcl_up.RemoveVertexAt(pcl_up.NumberOfVertices - 1);
                                    }


                                    ++sizeR;
                                    Array.Resize(ref twsR1, sizeR);
                                    twsR1[sizeR - 1] = new Polyline();
                                    twsR1[sizeR - 1] = pcl_down;
                                    Array.Resize(ref twsR2, sizeR);
                                    twsR2[sizeR - 1] = new Polyline();
                                    twsR2[sizeR - 1] = pcl_up;

                                    if (n_tws_r == 0)
                                    {
                                        int idx = 0;
                                        Polyline poly1 = new Polyline();
                                        for (int k = 0; k < twsR2.Length; ++k)
                                        {
                                            for (int r = 0; r < twsR2[k].NumberOfVertices; r++)
                                            {
                                                Point2d point1 = twsR2[k].GetPoint2dAt(r);
                                                poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                                ++idx;
                                                dt_poly_tws.Rows.Add();
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_id] = "TWS_" + Convert.ToString(tws_index) + "_RIGHT";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_side] = "RIGHT_UP";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_x] = point1.X;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_y] = point1.Y;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta1] = sta1;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta2] = sta2;
                                            }
                                        }

                                        for (int k = twsR2.Length - 1; k >= 0; --k)
                                        {
                                            for (int r = twsR1[k].NumberOfVertices - 1; r >= 0; r--)
                                            {
                                                Point2d point1 = twsR1[k].GetPoint2dAt(r);
                                                poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                                ++idx;
                                                dt_poly_tws.Rows.Add();
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_id] = "TWS_" + Convert.ToString(tws_index) + "_RIGHT";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_side] = "RIGHT_DOWN";
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_x] = point1.X;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_y] = point1.Y;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta1] = sta1;
                                                dt_poly_tws.Rows[dt_poly_tws.Rows.Count - 1][col_sta2] = sta2;
                                            }
                                        }

                                        poly1.Closed = true;
                                        poly1.Layer = tws_layer;
                                        BTrecord.AppendEntity(poly1);
                                        Trans1.AddNewlyCreatedDBObject(poly1, true);

                                        dt_erase.Rows.Add();
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;

                                        sizeR = 0;
                                        twsR1 = null;
                                        twsR2 = null;
                                        ++tws_index;
                                    }
                                }
                            }
                        }
                    }
                    else if (dt_poly_tws.Rows.Count > 0)
                    {
                        Polyline poly1 = new Polyline();
                        int idx = 0;
                        string poly_index = "";
                        for (int k = 0; k < dt_poly_tws.Rows.Count; ++k)
                        {
                            if (dt_poly_tws.Rows[k][col_id] != DBNull.Value && dt_poly_tws.Rows[k][col_x] != DBNull.Value && dt_poly_tws.Rows[k][col_y] != DBNull.Value)
                            {
                                if (k == 0)
                                {
                                    poly_index = Convert.ToString(dt_poly_tws.Rows[k][col_id]);
                                }
                                if (Convert.ToString(dt_poly_tws.Rows[k][col_id]) != poly_index)
                                {
                                    poly1.Elevation = 0;
                                    poly1.Closed = true;
                                    poly1.ColorIndex = 256;
                                    poly1.Layer = tws_layer;
                                    BTrecord.AppendEntity(poly1);
                                    Trans1.AddNewlyCreatedDBObject(poly1, true);
                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;

                                    poly1 = new Polyline();
                                    idx = 0;
                                    poly_index = Convert.ToString(dt_poly_tws.Rows[k][col_id]);
                                    double x = Convert.ToDouble(dt_poly_tws.Rows[k][col_x]);
                                    double y = Convert.ToDouble(dt_poly_tws.Rows[k][col_y]);
                                    poly1.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                                    ++idx;
                                }
                                else
                                {
                                    double x = Convert.ToDouble(dt_poly_tws.Rows[k][col_x]);
                                    double y = Convert.ToDouble(dt_poly_tws.Rows[k][col_y]);
                                    poly1.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                                    ++idx;
                                    if (k == dt_poly_tws.Rows.Count - 1)
                                    {
                                        poly1.Elevation = 0;
                                        poly1.Closed = true;
                                        poly1.ColorIndex = 256;
                                        poly1.Layer = tws_layer;
                                        BTrecord.AppendEntity(poly1);
                                        Trans1.AddNewlyCreatedDBObject(poly1, true);
                                        dt_erase.Rows.Add();
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;
                                    }
                                }
                            }
                        }
                    }
                    Trans1.Commit();
                }
            }
            set_enable_true();
        }


        public void draw_atws(Polyline poly_cl, Polyline poly_lod_left, Polyline poly_lod_right)
        {
            set_enable_false();
            string atws_layer = comboBox_layer_atws.Text;

            ObjectId[] Empty_array = null;

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            if (ThisDrawing == null)
            {
                MessageBox.Show("you are trying to run outside of a drawing\r\nopen or create a drawing\r\noperation aborted");
                set_enable_true();
                return;
            }

            string dwg1 = ThisDrawing.Database.OriginalFileName;

            using (DocumentLock lock1 = ThisDrawing.LockDocument())
            {
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;
                    Autodesk.AutoCAD.ApplicationServices.Application.SetSystemVariable("OFFSETGAPTYPE", 0);

                    Functions.Creaza_layer(atws_layer, 2, true);

                    if (dt_poly_atws == null)
                    {
                        dt_poly_atws = new System.Data.DataTable();
                        dt_poly_atws.Columns.Add(col_id, typeof(string));
                        dt_poly_atws.Columns.Add(col_x, typeof(double));
                        dt_poly_atws.Columns.Add(col_y, typeof(double));
                        dt_poly_atws.Columns.Add(col_side, typeof(string));
                        dt_poly_atws.Columns.Add(col_sta1, typeof(double));
                        dt_poly_atws.Columns.Add(col_sta2, typeof(double));
                    }



                    if (dt_poly_atws.Rows.Count == 0)
                    {
                        int atws_index = 0;
                        for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                        {
                            double sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                            double sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);

                            if (dt_corridor.Rows[i][col_corridor_name] != DBNull.Value)
                            {
                                double perm_l = Convert.ToDouble(dt_pcn.Rows[i][6]);
                                double perm_r = Convert.ToDouble(dt_pcn.Rows[i][7]);
                                double tws_left = Convert.ToDouble(dt_pcn.Rows[i][8]);
                                double tws_right = Convert.ToDouble(dt_pcn.Rows[i][9]);
                                double atws_left = Convert.ToDouble(dt_pcn.Rows[i][10]);
                                double atws_right = Convert.ToDouble(dt_pcn.Rows[i][11]);



                                Point3d pt1 = poly_cl.GetPointAtDist(sta1);
                                Point3d pt2 = poly_cl.GetPointAtDist(sta2);
                                double par1 = poly_cl.GetParameterAtDistance(sta1);
                                double par2 = poly_cl.GetParameterAtDistance(sta2);
                                double p1 = Math.Round(par1, 0);
                                double p2 = Math.Round(par2, 0);
                                Point3d pt11 = poly_cl.GetPointAtParameter(p1);
                                Point3d pt22 = poly_cl.GetPointAtParameter(p2);

                                Polyline part_cl = new Polyline();
                                bool remove_pt1 = false;
                                bool remove_pt2 = false;

                                if (atws_left > 0 || atws_right > 0)
                                {
                                    double d1 = Math.Pow(Math.Pow((pt1.X - pt11.X), 2) + Math.Pow(pt1.Y - pt11.Y, 2), 0.5);
                                    if (d1 < 0.01)
                                    {
                                        par1 = p1;
                                        remove_pt1 = true;
                                        p1 = p1 - 1;
                                        if (p1 < 0)
                                        {
                                            remove_pt1 = false;
                                            p1 = 0;
                                        }
                                    }
                                    else
                                    {
                                        p1 = par1;
                                    }

                                    double d2 = Math.Pow(Math.Pow((pt2.X - pt22.X), 2) + Math.Pow(pt2.Y - pt22.Y, 2), 0.5);
                                    if (d2 < 0.01)
                                    {
                                        par2 = p2;
                                        remove_pt2 = true;
                                        p2 = p2 + 1;
                                        if (p2 > poly_cl.EndParam)
                                        {
                                            remove_pt2 = false;
                                            p2 = poly_cl.EndParam;
                                        }
                                    }
                                    else
                                    {
                                        p2 = par2;
                                    }
                                    part_cl = get_part_of_poly(poly_cl, p1, p2);


                                }

                                if (atws_left > 0)
                                {
                                    Polyline pcl_down = new Polyline();
                                    pcl_down = get_simple_offset_polyline(part_cl, -perm_l - tws_left);


                                    Polyline pcl_up = new Polyline();
                                    pcl_up = get_simple_offset_polyline(part_cl, -perm_l - tws_left - atws_left);

                                    if (remove_pt1 == true)
                                    {
                                        pcl_down.RemoveVertexAt(0);
                                        pcl_up.RemoveVertexAt(0);
                                    }

                                    if (remove_pt2 == true)
                                    {
                                        pcl_down.RemoveVertexAt(pcl_down.NumberOfVertices - 1);
                                        pcl_up.RemoveVertexAt(pcl_up.NumberOfVertices - 1);
                                    }



                                    int idx = 0;
                                    Polyline poly1 = new Polyline();

                                    for (int r = 0; r < pcl_up.NumberOfVertices; r++)
                                    {
                                        Point2d point1 = pcl_up.GetPoint2dAt(r);
                                        poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                        ++idx;
                                        dt_poly_atws.Rows.Add();
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_id] = "ATWS_" + Convert.ToString(atws_index) + "_LEFT";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_side] = "LEFT_UP";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_x] = point1.X;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_y] = point1.Y;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta1] = sta1;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta2] = sta2;
                                    }

                                    for (int r = pcl_down.NumberOfVertices - 1; r >= 0; r--)
                                    {
                                        Point2d point1 = pcl_down.GetPoint2dAt(r);
                                        poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                        ++idx;
                                        dt_poly_atws.Rows.Add();
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_id] = "ATWS_" + Convert.ToString(atws_index) + "_LEFT";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_side] = "LEFT_DOWN";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_x] = point1.X;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_y] = point1.Y;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta1] = sta1;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta2] = sta2;
                                    }

                                    poly1.Closed = true;
                                    poly1.Layer = atws_layer;
                                    BTrecord.AppendEntity(poly1);
                                    Trans1.AddNewlyCreatedDBObject(poly1, true);

                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;

                                    ++atws_index;


                                }

                                if (atws_right > 0)
                                {

                                    Polyline pcl_down = new Polyline();
                                    pcl_down = get_simple_offset_polyline(part_cl, perm_r + tws_right);


                                    Polyline pcl_up = new Polyline();
                                    pcl_up = get_simple_offset_polyline(part_cl, perm_r + tws_right + atws_right);

                                    if (remove_pt1 == true)
                                    {
                                        pcl_down.RemoveVertexAt(0);
                                        pcl_up.RemoveVertexAt(0);
                                    }

                                    if (remove_pt2 == true)
                                    {
                                        pcl_down.RemoveVertexAt(pcl_down.NumberOfVertices - 1);
                                        pcl_up.RemoveVertexAt(pcl_up.NumberOfVertices - 1);
                                    }

                                    int idx = 0;
                                    Polyline poly1 = new Polyline();

                                    for (int r = 0; r < pcl_up.NumberOfVertices; r++)
                                    {
                                        Point2d point1 = pcl_up.GetPoint2dAt(r);
                                        poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                        ++idx;
                                        dt_poly_atws.Rows.Add();
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_id] = "TWS_" + Convert.ToString(atws_index) + "_RIGHT";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_side] = "RIGHT_UP";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_x] = point1.X;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_y] = point1.Y;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta1] = sta1;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta2] = sta2;
                                    }



                                    for (int r = pcl_down.NumberOfVertices - 1; r >= 0; r--)
                                    {
                                        Point2d point1 = pcl_down.GetPoint2dAt(r);
                                        poly1.AddVertexAt(idx, point1, 0, 0, 0);
                                        ++idx;
                                        dt_poly_atws.Rows.Add();
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_id] = "ATWS_" + Convert.ToString(atws_index) + "_RIGHT";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_side] = "RIGHT_DOWN";
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_x] = point1.X;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_y] = point1.Y;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta1] = sta1;
                                        dt_poly_atws.Rows[dt_poly_atws.Rows.Count - 1][col_sta2] = sta2;
                                    }


                                    poly1.Closed = true;
                                    poly1.Layer = atws_layer;
                                    BTrecord.AppendEntity(poly1);
                                    Trans1.AddNewlyCreatedDBObject(poly1, true);

                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;

                                    ++atws_index;

                                }
                            }
                        }
                    }
                    else if (dt_poly_atws.Rows.Count > 0)
                    {
                        Polyline poly1 = new Polyline();
                        int idx = 0;
                        string poly_index = "";
                        for (int k = 0; k < dt_poly_atws.Rows.Count; ++k)
                        {
                            if (dt_poly_atws.Rows[k][col_id] != DBNull.Value && dt_poly_atws.Rows[k][col_x] != DBNull.Value && dt_poly_atws.Rows[k][col_y] != DBNull.Value)
                            {
                                if (k == 0)
                                {
                                    poly_index = Convert.ToString(dt_poly_atws.Rows[k][col_id]);
                                }
                                if (Convert.ToString(dt_poly_atws.Rows[k][col_id]) != poly_index)
                                {
                                    poly1.Elevation = 0;
                                    poly1.Closed = true;
                                    poly1.ColorIndex = 256;
                                    poly1.Layer = atws_layer;
                                    BTrecord.AppendEntity(poly1);
                                    Trans1.AddNewlyCreatedDBObject(poly1, true);
                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;

                                    poly1 = new Polyline();
                                    idx = 0;
                                    poly_index = Convert.ToString(dt_poly_atws.Rows[k][col_id]);
                                    double x = Convert.ToDouble(dt_poly_atws.Rows[k][col_x]);
                                    double y = Convert.ToDouble(dt_poly_atws.Rows[k][col_y]);
                                    poly1.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                                    ++idx;
                                }
                                else
                                {
                                    double x = Convert.ToDouble(dt_poly_atws.Rows[k][col_x]);
                                    double y = Convert.ToDouble(dt_poly_atws.Rows[k][col_y]);
                                    poly1.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                                    ++idx;
                                    if (k == dt_poly_atws.Rows.Count - 1)
                                    {
                                        poly1.Elevation = 0;
                                        poly1.Closed = true;
                                        poly1.ColorIndex = 256;
                                        poly1.Layer = atws_layer;
                                        BTrecord.AppendEntity(poly1);
                                        Trans1.AddNewlyCreatedDBObject(poly1, true);
                                        dt_erase.Rows.Add();
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;
                                    }
                                }
                            }
                        }
                    }
                    Trans1.Commit();
                }
            }
            set_enable_true();
        }




        public void draw_all_corridors()
        {
            string debug1 = "";

            if (dt_cl == null || dt_cl.Rows.Count < 2 || dt_library == null || dt_library.Rows.Count == 0 || dt_corridor == null || dt_corridor.Rows.Count == 0)
            {
                MessageBox.Show("No Data Loaded");
                return;
            }

            if (comboBox_layer_perm.Text == "" || comboBox_layer_atws.Text == "" || comboBox_layer_tws.Text == "")
            {
                MessageBox.Show("No Layers specified");
                return;
            }


            if (dt_ar != null && dt_ar.Rows.Count > 0)
            {
                if (comboBox_layer_ar.Text == "")
                {
                    MessageBox.Show("no access road layer specified\r\noperation aborted");
                    set_enable_true();
                    return;
                }
            }

            if (dt_manual_stg != null && dt_manual_stg.Rows.Count > 0)
            {
                if (comboBox_layer_stg.Text == "")
                {
                    MessageBox.Show("no staging area layer specified\r\noperation aborted");
                    set_enable_true();

                    return;
                }
            }

            Polyline lod1_left = new Polyline();
            Polyline lod2_left = new Polyline();
            Polyline lod3_left = new Polyline();
            Polyline lod4_left = new Polyline();

            int index1_left = 0;
            int index2_left = 0;
            int index2_right = 0;
            int index3_left = 0;
            int index4_left = 0;


            Polyline lod1_right = new Polyline();
            Polyline lod2_right = new Polyline();
            Polyline lod3_right = new Polyline();
            Polyline lod4_right = new Polyline();


            string perm_layer = comboBox_layer_perm.Text;
            string tws_layer = comboBox_layer_tws.Text;
            string atws_layer = comboBox_layer_atws.Text;
            string ar_layer = comboBox_layer_ar.Text;
            string stg_layer = comboBox_layer_stg.Text;
            string lod_layer = comboBox_layer_lod.Text;
            string prop_perm_layer = comboBox_layer_proposed_perm.Text;







            ObjectId[] Empty_array = null;

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            if (ThisDrawing == null)
            {
                MessageBox.Show("you are trying to run outside of a drawing\r\nopen or create a drawing\r\noperation aborted");
                set_enable_true();
                return;
            }

            string dwg1 = ThisDrawing.Database.OriginalFileName;

            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;


            List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
            List<string> lista_od_atws_justif = new List<string>();

            List<ObjectId> lista_od_ar_object_id = new List<ObjectId>();
            List<string> lista_od_ar_justif = new List<string>();

            List<ObjectId> lista_od_stg_object_id = new List<ObjectId>();
            List<string> lista_od_stg_justif = new List<string>();

            List<ObjectId> lista_od_pp_object_id = new List<ObjectId>();
            List<string> lista_od_pp_justif = new List<string>();

            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();

            set_enable_false();
            using (DocumentLock lock1 = ThisDrawing.LockDocument())
            {
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                    Autodesk.AutoCAD.ApplicationServices.Application.SetSystemVariable("OFFSETGAPTYPE", 0);

                    Functions.Creaza_layer(perm_layer, 1, true);
                    Functions.Creaza_layer(tws_layer, 2, true);
                    Functions.Creaza_layer(atws_layer, 3, true);
                    Functions.Creaza_layer(ar_layer, 5, true);
                    Functions.Creaza_layer(lod_layer, 6, true);

                    #region poly_cl
                    Polyline poly_cl = new Polyline();
                    for (int k = 0; k < dt_cl.Rows.Count; ++k)
                    {
                        if (dt_cl.Rows[k][0] == DBNull.Value || dt_cl.Rows[k][1] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_cl.Rows[k][1])) == false)
                        {
                            MessageBox.Show("issues found on centerline data\r\noperation aborted");
                            set_enable_true();
                            return;
                        }
                        poly_cl.AddVertexAt(k, (Point2d)dt_cl.Rows[k][0], 0, 0, 0);
                    }
                    poly_cl.Elevation = 0;
                    #endregion

                    #region access road splitting polylines
                    Polyline[] splitl1 = null;
                    Polyline[] splitl2 = null;
                    int size1 = 0;
                    int size2 = 0;
                    Polyline[] splitr1 = null;
                    Polyline[] splitr2 = null;



                    if (dt_ar_side_left_p != null && dt_ar_side_left_p.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt_ar_side_left_p.Columns.Count; j += 3)
                        {
                            ++size1;
                            Array.Resize(ref splitl1, size1);
                            Array.Resize(ref splitl2, size1);
                            splitl1[size1 - 1] = new Polyline();
                            splitl2[size1 - 1] = new Polyline();
                            int idx001 = 0;
                            int idx002 = 0;
                            for (int i = 0; i < dt_ar_side_left_p.Rows.Count; ++i)
                            {
                                if (dt_ar_side_left_p.Rows[i][j] != DBNull.Value)
                                {
                                    splitl1[size1 - 1].AddVertexAt(idx001, (Point2d)dt_ar_side_left_p.Rows[i][j], 0, 0, 0);
                                    ++idx001;
                                }
                            }
                            for (int i = dt_ar_side_left_p.Rows.Count - 1; i >= 0; --i)
                            {

                                if (dt_ar_side_left_p.Rows[i][j + 1] != DBNull.Value)
                                {
                                    splitl2[size1 - 1].AddVertexAt(idx002, (Point2d)dt_ar_side_left_p.Rows[i][j + 1], 0, 0, 0);
                                    ++idx002;
                                }
                            }

                        }



                    }

                    if (dt_ar_side_right_p != null && dt_ar_side_right_p.Rows.Count > 0)
                    {
                        for (int j = 0; j < dt_ar_side_right_p.Columns.Count; j += 3)
                        {
                            ++size2;
                            Array.Resize(ref splitr1, size2);
                            Array.Resize(ref splitr2, size2);
                            splitr1[size2 - 1] = new Polyline();
                            splitr2[size2 - 1] = new Polyline();
                            int idx001 = 0;
                            int idx002 = 0;
                            for (int i = 0; i < dt_ar_side_right_p.Rows.Count; ++i)
                            {
                                if (dt_ar_side_right_p.Rows[i][0] != DBNull.Value)
                                {
                                    splitr1[size2 - 1].AddVertexAt(idx001, (Point2d)dt_ar_side_right_p.Rows[i][j], 0, 0, 0);
                                    ++idx001;
                                }
                            }

                            for (int i = dt_ar_side_right_p.Rows.Count - 1; i >= 0; --i)
                            {
                                if (dt_ar_side_right_p.Rows[i][1] != DBNull.Value)
                                {
                                    splitr2[size2 - 1].AddVertexAt(idx002, (Point2d)dt_ar_side_right_p.Rows[i][j + 1], 0, 0, 0);
                                    ++idx002;
                                }
                            }

                            // publish_poly(splitr1[size2 - 1], 1);
                            //publish_poly(splitr2[size2 - 1], 2);
                        }

                    }

                    #endregion

                    System.Data.DataTable dt_perm_left = new System.Data.DataTable();
                    System.Data.DataTable dt_perm_right = new System.Data.DataTable();
                    dt_perm_left.Columns.Add("pt", typeof(Point3d));
                    dt_perm_left.Columns.Add("idx", typeof(int));
                    dt_perm_right = dt_perm_left.Clone();

                    List<Point3dCollection> lista_tws_left = new List<Point3dCollection>();
                    List<Point3dCollection> lista_perm_for_tws_left = new List<Point3dCollection>();


                    List<Point3dCollection> lista_tws_right = new List<Point3dCollection>();
                    List<Point3dCollection> lista_perm_for_tws_right = new List<Point3dCollection>();


                    dt_lod_left = new System.Data.DataTable();

                    dt_lod_left.Columns.Add("pt1", typeof(Point2d));
                    dt_lod_left.Columns.Add("bulge1", typeof(double));

                    dt_lod_left.Columns.Add("pt2", typeof(Point2d));
                    dt_lod_left.Columns.Add("bulge2", typeof(double));

                    dt_lod_left.Columns.Add("pt3", typeof(Point2d));
                    dt_lod_left.Columns.Add("bulge3", typeof(double));

                    dt_lod_left.Columns.Add("pt4", typeof(Point2d));
                    dt_lod_left.Columns.Add("bulge4", typeof(double));

                    dt_lod_right = new System.Data.DataTable();

                    dt_lod_right.Columns.Add("pt1", typeof(Point2d));
                    dt_lod_right.Columns.Add("bulge1", typeof(double));

                    dt_lod_right.Columns.Add("pt2", typeof(Point2d));
                    dt_lod_right.Columns.Add("bulge2", typeof(double));

                    dt_lod_right.Columns.Add("pt3", typeof(Point2d));
                    dt_lod_right.Columns.Add("bulge3", typeof(double));

                    dt_lod_right.Columns.Add("pt4", typeof(Point2d));
                    dt_lod_right.Columns.Add("bulge4", typeof(double));

                    System.Data.DataTable dt_temp_manual_atws = null;
                    System.Data.DataTable dt_temp_atws = null;
                    System.Data.DataTable dt_atws_side1_temp = null;
                    System.Data.DataTable dt_atws_side2_temp = null;


                    System.Data.DataTable dt_atws_lod_temp = new System.Data.DataTable();

                    build_dt_pcn();

                    int idx_left1 = 0;
                    int idx_left2 = 0;
                    int idx_left3 = 0;
                    int idx_right1 = 0;
                    int idx_right2 = 0;
                    int idx_right3 = 0;

                    List<string> lista_pp_handles = new List<string>();
                    List<string> lista_pp_new_handles = new List<string>();
                    List<Polyline> lista_pp = new List<Polyline>();

                    if (dt_prop_perm != null && dt_prop_perm.Rows.Count > 0)
                    {
                        Functions.Creaza_layer(prop_perm_layer, 5, true);
                        #region draw proposed permanent
                        for (int i = 0; i < dt_prop_perm.Rows.Count; ++i)
                        {
                            if (dt_prop_perm.Rows[i][col_pp_id] != DBNull.Value)
                            {
                                string handle1 = Convert.ToString(dt_prop_perm.Rows[i][col_pp_id]);
                                if (lista_pp_handles.Contains(handle1) == false)
                                {
                                    lista_pp_handles.Add(handle1);
                                    int idx = 0;
                                    Polyline poly1 = new Polyline();
                                    for (int j = i; j < dt_prop_perm.Rows.Count; ++j)
                                    {
                                        if (dt_prop_perm.Rows[j][col_pp_x] != DBNull.Value && dt_prop_perm.Rows[j][col_pp_y] != DBNull.Value && dt_prop_perm.Rows[j][col_pp_id] != DBNull.Value)
                                        {
                                            string handle2 = Convert.ToString(dt_prop_perm.Rows[j][col_pp_id]);
                                            if (handle1 == handle2)
                                            {
                                                double x1 = Convert.ToDouble(dt_prop_perm.Rows[j][col_pp_x]);
                                                double y1 = Convert.ToDouble(dt_prop_perm.Rows[j][col_pp_y]);
                                                poly1.AddVertexAt(idx, new Point2d(x1, y1), 0, 0, 0);
                                                ++idx;
                                            }
                                            else
                                            {
                                                j = dt_prop_perm.Rows.Count;
                                            }
                                        }
                                    }

                                    poly1.Closed = true;
                                    poly1.Layer = prop_perm_layer;
                                    poly1.ColorIndex = 256;
                                    BTrecord.AppendEntity(poly1);
                                    Trans1.AddNewlyCreatedDBObject(poly1, true);

                                    lista_pp.Add(poly1);
                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly1.ObjectId;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = prop_perm_layer;

                                    string justif1 = "xxx";
                                    if (dt_prop_perm.Rows[i][col_pp_justif] != DBNull.Value)
                                    {
                                        justif1 = Convert.ToString(dt_prop_perm.Rows[i][col_pp_justif]);
                                    }

                                    lista_od_pp_justif.Add(justif1);
                                    lista_od_pp_object_id.Add(poly1.ObjectId);
                                    lista_pp_new_handles.Add(poly1.ObjectId.Handle.Value.ToString());
                                }
                            }
                        }

                        for (int i = 0; i < dt_prop_perm.Rows.Count; ++i)
                        {
                            if (dt_prop_perm.Rows[i][col_pp_id] != DBNull.Value)
                            {
                                string handle1 = Convert.ToString(dt_prop_perm.Rows[i][col_pp_id]);
                                if (lista_pp_handles.Contains(handle1) == true)
                                {
                                    int idx = lista_pp_handles.IndexOf(handle1);
                                    dt_prop_perm.Rows[i][col_pp_id] = lista_pp_new_handles[idx];
                                }

                            }
                        }

                        #endregion
                    }



                    try
                    {
                        for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                        {

                            if (dt_corridor.Rows[i][tws_sta1_column] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta1_column])) == false ||
                                dt_corridor.Rows[i][tws_sta2_column] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta2_column])) == false)
                            {
                                MessageBox.Show("station start/end was not specified correctly");
                                set_enable_true();
                                return;
                            }

                            bool atws_modified = false;

                            if (dt_corridor.Rows[i][tws_modified_column] != DBNull.Value)
                            {
                                atws_modified = Convert.ToBoolean(dt_corridor.Rows[i][tws_modified_column]);
                            }

                            debug1 = i.ToString();

                            double sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                            double sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);

                            if (dt_corridor.Rows[i][col_corridor_name] != DBNull.Value)
                            {
                                double p_perm_l = Convert.ToDouble(dt_pcn.Rows[i][0]);
                                double p_perm_r = Convert.ToDouble(dt_pcn.Rows[i][1]);
                                double p_tws_l = Convert.ToDouble(dt_pcn.Rows[i][2]);
                                double p_tws_r = Convert.ToDouble(dt_pcn.Rows[i][3]);
                                double p_atws_l = Convert.ToDouble(dt_pcn.Rows[i][4]);
                                double p_atws_r = Convert.ToDouble(dt_pcn.Rows[i][5]);




                                double perm_l = Convert.ToDouble(dt_pcn.Rows[i][6]);
                                double perm_r = Convert.ToDouble(dt_pcn.Rows[i][7]);
                                double tws_left = Convert.ToDouble(dt_pcn.Rows[i][8]);
                                double tws_right = Convert.ToDouble(dt_pcn.Rows[i][9]);
                                double atws_left = Convert.ToDouble(dt_pcn.Rows[i][10]);
                                double atws_right = Convert.ToDouble(dt_pcn.Rows[i][11]);


                                double n_perm_l = Convert.ToDouble(dt_pcn.Rows[i][12]);
                                double n_perm_r = Convert.ToDouble(dt_pcn.Rows[i][13]);
                                double n_tws_l = Convert.ToDouble(dt_pcn.Rows[i][14]);
                                double n_tws_r = Convert.ToDouble(dt_pcn.Rows[i][15]);
                                double n_atws_l = Convert.ToDouble(dt_pcn.Rows[i][16]);
                                double n_atws_r = Convert.ToDouble(dt_pcn.Rows[i][17]);

                                string ws_name = Convert.ToString(dt_corridor.Rows[i][col_corridor_name]);



                                #region define param1, param2, pt1, pt2                                
                                if (sta1 > poly_cl.Length || sta2 > poly_cl.Length)
                                {
                                    MessageBox.Show("station (" + sta1.ToString() + " and / or " + sta2.ToString() + ")\r\nis bigger than centerline length\r\n(" + poly_cl.Length.ToString() + ")");
                                    set_enable_true();
                                    return;
                                }
                                double param1 = poly_cl.GetParameterAtDistance(sta1);
                                double param2 = poly_cl.GetParameterAtDistance(sta2);
                                Point3d pt1 = poly_cl.GetPointAtParameter(param1);
                                Point3d pt2 = poly_cl.GetPointAtParameter(param2);
                                #endregion

                                #region check if od table is present
                                if (atws_left > 0 || atws_right > 0)
                                {
                                    if (checkBox_use_od.Checked == true && Tables1.IsTableDefined(comboBox_atws_od_name.Text) == false)
                                    {
                                        MessageBox.Show("The combobox specifies an Object Data Table that does not exist in the current drawing\r\nOperation Aborted");
                                        set_enable_true();
                                        return;
                                    }
                                    if (checkBox_use_od.Checked == true && comboBox_atws_od_field.Text == "")
                                    {
                                        MessageBox.Show("no object data field selected\r\noperation aborted");
                                        set_enable_true();
                                        return;
                                    }
                                    if (comboBox_layer_atws.Text == "")
                                    {
                                        MessageBox.Show("no atws layer specified\r\noperation aborted");
                                        set_enable_true();
                                        return;
                                    }
                                }
                                #endregion



                                if (perm_l >= 0 && perm_r >= 0)
                                {
                                    Polyline perm_right = new Polyline();
                                    Polyline perm_left = new Polyline();
                                    Polyline perm_right_straight = new Polyline();
                                    Polyline perm_left_straight = new Polyline();
                                    if (perm_r > 0)
                                    {
                                        perm_right = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, perm_r, p_perm_r, n_perm_r, perm_r);
                                        perm_right_straight = get_trimmed_offset_without_feature(poly_cl, sta1, sta2, perm_r);
                                    }
                                    else
                                    {
                                        perm_right = get_part_of_poly(poly_cl, param1, param2);
                                        perm_right_straight = get_part_of_poly(poly_cl, param1, param2);
                                    }
                                    if (perm_l > 0)
                                    {
                                        perm_left = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, -perm_l, -p_perm_l, -n_perm_l, -perm_l);
                                        perm_left_straight = get_trimmed_offset_without_feature(poly_cl, sta1, sta2, -perm_l);
                                    }
                                    else
                                    {
                                        perm_left = get_part_of_poly(poly_cl, param1, param2);
                                        perm_left_straight = get_part_of_poly(poly_cl, param1, param2);
                                    }



                                    #region permanent easement
                                    if (perm_left != null && perm_right != null)
                                    {
                                        for (int k = 0; k < perm_left.NumberOfVertices; ++k)
                                        {
                                            dt_perm_left.Rows.Add();
                                            dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][0] = perm_left.GetPointAtParameter(k);
                                            dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][1] = i;
                                        }

                                        for (int k = 0; k < perm_right.NumberOfVertices; ++k)
                                        {
                                            dt_perm_right.Rows.Add();
                                            dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][0] = perm_right.GetPointAtParameter(k);
                                            dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][1] = i;
                                        }
                                    }
                                    #endregion







                                    //Functions.Creaza_layer("test123", 30, false);
                                    //poly_perm_r.ColorIndex = 256;
                                    //poly_perm_r.Layer = "test123";
                                    //BTrecord.AppendEntity(poly_perm_r);
                                    //Trans1.AddNewlyCreatedDBObject(poly_perm_r, true);

                                    Polyline tws_top_left = null;
                                    Polyline tws_top_left_straight = null;
                                    Polyline tws_top_right = null;
                                    Polyline tws_top_right_straight = null;
                                    Polyline atws_top_left = null;
                                    Polyline atws_top_right = null;


                                    #region tws left
                                    if (tws_left > 0 && (perm_l > 0 || perm_r > 0))
                                    {
                                        tws_top_left = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, -perm_l - tws_left, -p_perm_l - p_tws_l, -n_perm_l - n_tws_l, -tws_left);
                                        tws_top_left_straight = get_trimmed_offset_without_feature(poly_cl, sta1, sta2, -perm_l - tws_left);



                                        if (tws_top_left != null && perm_left != null)
                                        {

                                            #region adauga prop perm la tws polyline (perm_right)

                                            if (lista_pp != null && lista_pp.Count > 0)
                                            {
                                                for (int k = 0; k < lista_pp.Count; k++)
                                                {
                                                    double parameter_start = -1;
                                                    double parameter_end = -1;
                                                    double prevd = -1;

                                                    Polyline poly1 = lista_pp[k];
                                                    int last_param = -1;

                                                    for (int m = 0; m < poly1.NumberOfVertices; m++)
                                                    {
                                                        Point3d p1 = poly1.GetPointAtParameter(m);
                                                        Point3d p1_on_poly = perm_left.GetClosestPointTo(p1, Vector3d.ZAxis, false);
                                                        double par_p1 = perm_left.GetParameterAtPoint(p1_on_poly);
                                                        double d1 = Math.Round(Functions.get_2d_distance(p1, p1_on_poly), 2);
                                                        if (d1 == 0 && parameter_start == -1)
                                                        {
                                                            parameter_start = par_p1;
                                                        }
                                                        if (prevd > 0 && d1 == 0 && parameter_end == -1)
                                                        {
                                                            parameter_end = par_p1;
                                                        }
                                                        if (parameter_start >= 0 && parameter_end >= 0 && d1 == 0 && last_param == -1)
                                                        {
                                                            last_param = m;
                                                        }
                                                        prevd = d1;
                                                    }
                                                    if (parameter_start >= 0 && parameter_end >= 0 & last_param >= 0)
                                                    {
                                                        for (int n = perm_left.NumberOfVertices - 1; n >= 0; n--)
                                                        {
                                                            if (n < parameter_end && n > parameter_start)
                                                            {
                                                                perm_left.RemoveVertexAt(n);
                                                            }
                                                        }
                                                        for (int n = last_param; n >= 0; n--)
                                                        {
                                                            perm_left.AddVertexAt(Convert.ToInt32(Math.Ceiling(parameter_start)), poly1.GetPoint2dAt(n), 0, 0, 0);
                                                        }
                                                    }
                                                }
                                            }


                                            #endregion


                                            if (lista_tws_left.Count == 0 || p_tws_l == 0 || perm_l != p_perm_l)
                                            {
                                                Point3dCollection col1 = new Point3dCollection();
                                                for (int k = 0; k < tws_top_left.NumberOfVertices; ++k)
                                                {
                                                    col1.Add(tws_top_left.GetPointAtParameter(k));
                                                }
                                                lista_tws_left.Add(col1);
                                                Point3dCollection col2 = new Point3dCollection();
                                                for (int k = 0; k < perm_left.NumberOfVertices; ++k)
                                                {
                                                    col2.Add(perm_left.GetPointAtParameter(k));
                                                }
                                                lista_perm_for_tws_left.Add(col2);
                                            }
                                            else
                                            {
                                                for (int k = 0; k < tws_top_left.NumberOfVertices; ++k)
                                                {
                                                    lista_tws_left[lista_tws_left.Count - 1].Add(tws_top_left.GetPointAtParameter(k));
                                                }
                                                for (int k = 0; k < perm_left.NumberOfVertices; ++k)
                                                {
                                                    lista_perm_for_tws_left[lista_perm_for_tws_left.Count - 1].Add(perm_left.GetPointAtParameter(k));
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region tws right
                                    if (tws_right > 0 && (perm_l > 0 || perm_r > 0))
                                    {
                                        tws_top_right = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, perm_r + tws_right, p_perm_r + p_tws_r, n_perm_r + n_tws_r, tws_right);
                                        tws_top_right_straight = get_trimmed_offset_without_feature(poly_cl, sta1, sta2, perm_r + tws_right);
                                        if (tws_top_right != null && perm_right != null)
                                        {

                                            #region adauga prop perm la tws polyline (perm_right)

                                            if (lista_pp != null && lista_pp.Count > 0)
                                            {
                                                for (int k = 0; k < lista_pp.Count; k++)
                                                {
                                                    double parameter_start = -1;
                                                    double parameter_end = -1;
                                                    double prevd = -1;

                                                    Polyline poly1 = lista_pp[k];
                                                    int last_param = -1;

                                                    for (int m = 0; m < poly1.NumberOfVertices; m++)
                                                    {
                                                        Point3d p1 = poly1.GetPointAtParameter(m);
                                                        Point3d p1_on_poly = perm_right.GetClosestPointTo(p1, Vector3d.ZAxis, false);
                                                        double d1 = Math.Round(Functions.get_2d_distance(p1, p1_on_poly), 2);

                                                        double par_p1 = perm_right.GetParameterAtPoint(p1_on_poly);

                                                        if (d1 == 0 && parameter_start == -1)
                                                        {
                                                            parameter_start = par_p1;
                                                        }
                                                        if (prevd > 0 && d1 == 0 && parameter_end == -1)
                                                        {
                                                            parameter_end = par_p1;
                                                        }
                                                        if (parameter_start >= 0 && parameter_end >= 0 && d1 == 0 && last_param == -1)
                                                        {
                                                            last_param = m;
                                                        }
                                                        prevd = d1;
                                                    }
                                                    if (parameter_start >= 0 && parameter_end >= 0 & last_param >= 0)
                                                    {
                                                        for (int n = perm_right.NumberOfVertices - 1; n >= 0; n--)
                                                        {
                                                            if (n < parameter_end && n > parameter_start)
                                                            {
                                                                perm_right.RemoveVertexAt(n);
                                                            }
                                                        }
                                                        for (int n = last_param; n >= 0; n--)
                                                        {
                                                            perm_right.AddVertexAt(Convert.ToInt32(Math.Ceiling(parameter_start)), poly1.GetPoint2dAt(n), 0, 0, 0);
                                                        }
                                                    }
                                                }
                                            }


                                            #endregion


                                            if (lista_tws_right.Count == 0 || p_tws_r == 0 || perm_r != p_perm_r)
                                            {
                                                Point3dCollection col1 = new Point3dCollection();
                                                for (int k = 0; k < tws_top_right.NumberOfVertices; ++k)
                                                {
                                                    col1.Add(tws_top_right.GetPointAtParameter(k));
                                                }
                                                lista_tws_right.Add(col1);
                                                Point3dCollection col2 = new Point3dCollection();
                                                for (int k = 0; k < perm_right.NumberOfVertices; ++k)
                                                {
                                                    col2.Add(perm_right.GetPointAtParameter(k));
                                                }
                                                lista_perm_for_tws_right.Add(col2);
                                            }
                                            else
                                            {
                                                for (int k = 0; k < tws_top_right.NumberOfVertices; ++k)
                                                {
                                                    lista_tws_right[lista_tws_right.Count - 1].Add(tws_top_right.GetPointAtParameter(k));
                                                }
                                                for (int k = 0; k < perm_right.NumberOfVertices; ++k)
                                                {
                                                    lista_perm_for_tws_right[lista_perm_for_tws_right.Count - 1].Add(perm_right.GetPointAtParameter(k));
                                                }
                                            }
                                        }
                                        //atws_bottom_right.ColorIndex = 1;
                                        //BTrecord.AppendEntity(atws_bottom_right);
                                        //Trans1.AddNewlyCreatedDBObject(atws_bottom_right, true);

                                    }

                                    #endregion

                                    #region atws left
                                    if (atws_left > 0 && (perm_l > 0 || perm_r > 0))
                                    {
                                        atws_top_left = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, -perm_l - tws_left - atws_left, -p_perm_l - p_tws_l - p_atws_l, -n_perm_l - n_tws_l - n_atws_l, -atws_left);

                                        if (atws_top_left != null)
                                        {

                                            if (tws_top_left_straight != null)
                                            {
                                                if (atws_modified == false)
                                                {
                                                    Point3dCollection col1 = new Point3dCollection();
                                                    for (int k = 0; k < atws_top_left.NumberOfVertices; ++k)
                                                    {
                                                        col1.Add(atws_top_left.GetPointAtParameter(k));
                                                    }
                                                    for (int k = tws_top_left_straight.NumberOfVertices - 1; k >= 0; --k)
                                                    {
                                                        col1.Add(tws_top_left_straight.GetPointAtParameter(k));
                                                    }

                                                    #region lod atws
                                                    Point3dCollection col_lod = new Point3dCollection();
                                                    col_lod.Add(tws_top_left_straight.GetPointAtParameter(0));
                                                    for (int k = 0; k < atws_top_left.NumberOfVertices; ++k)
                                                    {
                                                        col_lod.Add(atws_top_left.GetPointAtParameter(k));
                                                    }
                                                    col_lod.Add(tws_top_left_straight.GetPointAtParameter(tws_top_left_straight.NumberOfVertices - 1));


                                                    if (col_lod.Count > 1)
                                                    {
                                                        if (dt_atws_lod_temp == null)
                                                        {
                                                            dt_atws_lod_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_lod_temp.Columns.Contains(i.ToString() + "left") == false)
                                                        {
                                                            dt_atws_lod_temp.Columns.Add(i.ToString() + "left", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_lod.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col_lod[k].X, col_lod[k].Y);
                                                            if (dt_atws_lod_temp.Rows.Count < k + 1)
                                                            {
                                                                dt_atws_lod_temp.Rows.Add();
                                                            }
                                                            dt_atws_lod_temp.Rows[k][i.ToString() + "left"] = p1;
                                                        }
                                                    }
                                                    #endregion


                                                    #region side1
                                                    Point2dCollection col_side1 = new Point2dCollection();
                                                    col_side1.Add(tws_top_left_straight.GetPoint2dAt(0));
                                                    col_side1.Add(atws_top_left.GetPoint2dAt(0));
                                                    if (col_side1.Count > 1)
                                                    {
                                                        if (dt_atws_side1_temp == null)
                                                        {
                                                            dt_atws_side1_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side1_temp.Columns.Contains(i.ToString() + "left") == false)
                                                        {
                                                            dt_atws_side1_temp.Columns.Add(i.ToString() + "left", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side1.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side1_temp.Rows.Count)
                                                            {
                                                                dt_atws_side1_temp.Rows.Add();
                                                            }
                                                            dt_atws_side1_temp.Rows[k][i.ToString() + "left"] = col_side1[k];
                                                        }
                                                    }
                                                    #endregion

                                                    #region side2
                                                    Point2dCollection col_side2 = new Point2dCollection();

                                                    col_side2.Add(atws_top_left.GetPoint2dAt(atws_top_left.NumberOfVertices - 1));
                                                    col_side2.Add(tws_top_left_straight.GetPoint2dAt(tws_top_left_straight.NumberOfVertices - 1));
                                                    if (col_side2.Count > 1)
                                                    {
                                                        if (dt_atws_side2_temp == null)
                                                        {
                                                            dt_atws_side2_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side2_temp.Columns.Contains(i.ToString() + "left") == false)
                                                        {
                                                            dt_atws_side2_temp.Columns.Add(i.ToString() + "left", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side2.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side2_temp.Rows.Count)
                                                            {
                                                                dt_atws_side2_temp.Rows.Add();
                                                            }
                                                            dt_atws_side2_temp.Rows[k][i.ToString() + "left"] = col_side2[k];
                                                        }
                                                    }
                                                    #endregion


                                                    if (col1.Count > 1)
                                                    {
                                                        if (dt_temp_manual_atws == null)
                                                        {
                                                            dt_temp_manual_atws = new System.Data.DataTable();
                                                        }

                                                        if (dt_temp_manual_atws.Columns.Contains(i.ToString() + "left") == false)
                                                        {
                                                            dt_temp_manual_atws.Columns.Add(i.ToString() + "left", typeof(Point2d));
                                                        }

                                                        Polyline poly_atws_l = new Polyline();
                                                        for (int k = 0; k < col1.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col1[k].X, col1[k].Y);
                                                            poly_atws_l.AddVertexAt(k, p1, 0, 0, 0);
                                                            if (k == dt_temp_manual_atws.Rows.Count)
                                                            {
                                                                dt_temp_manual_atws.Rows.Add();
                                                            }
                                                            dt_temp_manual_atws.Rows[k][i.ToString() + "left"] = p1;
                                                        }

                                                        if (dt_temp_atws == null || dt_temp_atws.Rows.Count == 0)
                                                        {
                                                            dt_temp_atws = get_dt_atws_structure();
                                                        }

                                                        dt_temp_atws.Rows.Add();
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_width_column] = atws_left;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_length_column] = sta2 - sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_justification_column] = ws_name;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_working_side_column] = "LEFT";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_orig_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_orig_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_type_column] = atws_regular;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_area_column] = poly_atws_l.Area;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_source_column] = atws_source_library;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle_column] = i.ToString() + "left";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle0_column] = i.ToString() + "left";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_abutter_column] = "TWS";

                                                    }

                                                }
                                            }
                                            else if (perm_left != null)
                                            {
                                                if (atws_modified == false)
                                                {
                                                    Point3dCollection col1 = new Point3dCollection();
                                                    for (int k = 0; k < atws_top_left.NumberOfVertices; ++k)
                                                    {
                                                        col1.Add(atws_top_left.GetPointAtParameter(k));
                                                    }
                                                    for (int k = perm_left_straight.NumberOfVertices - 1; k >= 0; --k)
                                                    {
                                                        col1.Add(perm_left_straight.GetPointAtParameter(k));
                                                    }


                                                    #region lod_atws
                                                    Point3dCollection col_lod = new Point3dCollection();
                                                    col_lod.Add(perm_left_straight.GetPointAtParameter(0));
                                                    for (int k = 0; k < atws_top_left.NumberOfVertices; ++k)
                                                    {
                                                        col_lod.Add(atws_top_left.GetPointAtParameter(k));
                                                    }
                                                    col_lod.Add(perm_left_straight.GetPointAtParameter(perm_left_straight.NumberOfVertices - 1));


                                                    if (col_lod.Count > 1)
                                                    {
                                                        if (dt_atws_lod_temp == null)
                                                        {
                                                            dt_atws_lod_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_lod_temp.Columns.Contains(i.ToString() + "left1") == false)
                                                        {
                                                            dt_atws_lod_temp.Columns.Add(i.ToString() + "left1", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_lod.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col_lod[k].X, col_lod[k].Y);
                                                            if (dt_atws_lod_temp.Rows.Count < k + 1)
                                                            {
                                                                dt_atws_lod_temp.Rows.Add();
                                                            }
                                                            dt_atws_lod_temp.Rows[k][i.ToString() + "left1"] = p1;
                                                        }
                                                    }
                                                    #endregion


                                                    #region side1
                                                    Point2dCollection col_side1 = new Point2dCollection();
                                                    col_side1.Add(perm_left_straight.GetPoint2dAt(0));
                                                    col_side1.Add(atws_top_left.GetPoint2dAt(0));
                                                    if (col_side1.Count > 1)
                                                    {
                                                        if (dt_atws_side1_temp == null)
                                                        {
                                                            dt_atws_side1_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side1_temp.Columns.Contains(i.ToString() + "left1") == false)
                                                        {
                                                            dt_atws_side1_temp.Columns.Add(i.ToString() + "left1", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side1.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side1_temp.Rows.Count)
                                                            {
                                                                dt_atws_side1_temp.Rows.Add();
                                                            }
                                                            dt_atws_side1_temp.Rows[k][i.ToString() + "left1"] = col_side1[k];
                                                        }
                                                    }
                                                    #endregion

                                                    #region side2
                                                    Point2dCollection col_side2 = new Point2dCollection();

                                                    col_side2.Add(atws_top_left.GetPoint2dAt(atws_top_left.NumberOfVertices - 1));
                                                    col_side2.Add(perm_left_straight.GetPoint2dAt(perm_left_straight.NumberOfVertices - 1));
                                                    if (col_side2.Count > 1)
                                                    {
                                                        if (dt_atws_side2_temp == null)
                                                        {
                                                            dt_atws_side2_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side2_temp.Columns.Contains(i.ToString() + "left1") == false)
                                                        {
                                                            dt_atws_side2_temp.Columns.Add(i.ToString() + "left1", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side2.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side2_temp.Rows.Count)
                                                            {
                                                                dt_atws_side2_temp.Rows.Add();
                                                            }
                                                            dt_atws_side2_temp.Rows[k][i.ToString() + "left1"] = col_side2[k];
                                                        }
                                                    }
                                                    #endregion


                                                    if (col1.Count > 1)
                                                    {
                                                        if (dt_temp_manual_atws == null)
                                                        {
                                                            dt_temp_manual_atws = new System.Data.DataTable();
                                                        }
                                                        if (dt_temp_manual_atws.Columns.Contains(i.ToString() + "left1") == false)
                                                        {
                                                            dt_temp_manual_atws.Columns.Add(i.ToString() + "left1", typeof(Point2d));
                                                        }

                                                        Polyline poly_atws_l = new Polyline();
                                                        for (int k = 0; k < col1.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col1[k].X, col1[k].Y);
                                                            poly_atws_l.AddVertexAt(k, p1, 0, 0, 0);
                                                            if (dt_temp_manual_atws.Rows.Count < k + 1)
                                                            {
                                                                dt_temp_manual_atws.Rows.Add();
                                                            }
                                                            dt_temp_manual_atws.Rows[k][i.ToString() + "left1"] = p1;
                                                        }


                                                        if (dt_temp_atws == null || dt_temp_atws.Rows.Count == 0)
                                                        {
                                                            dt_temp_atws = get_dt_atws_structure();
                                                        }

                                                        dt_temp_atws.Rows.Add();
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_width_column] = atws_left;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_length_column] = sta2 - sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_justification_column] = ws_name;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_working_side_column] = "LEFT";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_orig_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_orig_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_type_column] = atws_regular;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_area_column] = poly_atws_l.Area;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_source_column] = atws_source_library;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle_column] = i.ToString() + "left1";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle0_column] = i.ToString() + "left1";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_abutter_column] = "TWS";

                                                    }
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region atws right
                                    if (atws_right > 0 && (perm_l > 0 || perm_r > 0))
                                    {

                                        atws_top_right = get_trimmed_offset_with_feature(poly_cl, sta1, sta2, perm_r + tws_right + atws_right, p_perm_r + p_tws_r + p_atws_r, n_perm_r + n_tws_r + n_atws_r, atws_right);

                                        if (atws_top_right != null)
                                        {

                                            if (tws_top_right_straight != null)
                                            {

                                                if (atws_modified == false)
                                                {
                                                    Point3dCollection col1 = new Point3dCollection();

                                                    for (int k = 0; k < atws_top_right.NumberOfVertices; ++k)
                                                    {
                                                        col1.Add(atws_top_right.GetPointAtParameter(k));
                                                    }

                                                    for (int k = tws_top_right_straight.NumberOfVertices - 1; k >= 0; --k)
                                                    {
                                                        col1.Add(tws_top_right_straight.GetPointAtParameter(k));
                                                    }

                                                    #region lod_atws
                                                    Point3dCollection col_lod = new Point3dCollection();

                                                    col_lod.Add(tws_top_right_straight.GetPointAtParameter(0));
                                                    for (int k = 0; k < atws_top_right.NumberOfVertices; ++k)
                                                    {
                                                        col_lod.Add(atws_top_right.GetPointAtParameter(k));
                                                    }
                                                    col_lod.Add(tws_top_right_straight.GetPointAtParameter(tws_top_right_straight.NumberOfVertices - 1));


                                                    if (col_lod.Count > 1)
                                                    {
                                                        if (dt_atws_lod_temp == null)
                                                        {
                                                            dt_atws_lod_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_lod_temp.Columns.Contains(i.ToString() + "right") == false)
                                                        {
                                                            dt_atws_lod_temp.Columns.Add(i.ToString() + "right", typeof(Point2d));
                                                        }


                                                        for (int k = 0; k < col_lod.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col_lod[k].X, col_lod[k].Y);
                                                            if (dt_atws_lod_temp.Rows.Count < k + 1)
                                                            {
                                                                dt_atws_lod_temp.Rows.Add();
                                                            }
                                                            dt_atws_lod_temp.Rows[k][i.ToString() + "right"] = p1;
                                                        }
                                                    }
                                                    #endregion


                                                    #region side1
                                                    Point2dCollection col_side1 = new Point2dCollection();
                                                    col_side1.Add(tws_top_right_straight.GetPoint2dAt(0));
                                                    col_side1.Add(atws_top_right.GetPoint2dAt(0));
                                                    if (col_side1.Count > 1)
                                                    {
                                                        if (dt_atws_side1_temp == null)
                                                        {
                                                            dt_atws_side1_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side1_temp.Columns.Contains(i.ToString() + "right") == false)
                                                        {
                                                            dt_atws_side1_temp.Columns.Add(i.ToString() + "right", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side1.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side1_temp.Rows.Count)
                                                            {
                                                                dt_atws_side1_temp.Rows.Add();
                                                            }
                                                            dt_atws_side1_temp.Rows[k][i.ToString() + "right"] = col_side1[k];
                                                        }
                                                    }
                                                    #endregion

                                                    #region side2
                                                    Point2dCollection col_side2 = new Point2dCollection();

                                                    col_side2.Add(atws_top_right.GetPoint2dAt(atws_top_right.NumberOfVertices - 1));
                                                    col_side2.Add(tws_top_right_straight.GetPoint2dAt(tws_top_right_straight.NumberOfVertices - 1));
                                                    if (col_side2.Count > 1)
                                                    {
                                                        if (dt_atws_side2_temp == null)
                                                        {
                                                            dt_atws_side2_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side2_temp.Columns.Contains(i.ToString() + "right") == false)
                                                        {
                                                            dt_atws_side2_temp.Columns.Add(i.ToString() + "right", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side2.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side2_temp.Rows.Count)
                                                            {
                                                                dt_atws_side2_temp.Rows.Add();
                                                            }
                                                            dt_atws_side2_temp.Rows[k][i.ToString() + "right"] = col_side2[k];
                                                        }
                                                    }
                                                    #endregion

                                                    if (col1.Count > 1)
                                                    {
                                                        if (dt_temp_manual_atws == null)
                                                        {
                                                            dt_temp_manual_atws = new System.Data.DataTable();
                                                        }

                                                        if (dt_temp_manual_atws.Columns.Contains(i.ToString() + "right") == false) dt_temp_manual_atws.Columns.Add(i.ToString() + "right", typeof(Point2d));


                                                        Polyline poly_atws_r = new Polyline();
                                                        for (int k = 0; k < col1.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col1[k].X, col1[k].Y);

                                                            poly_atws_r.AddVertexAt(k, p1, 0, 0, 0);
                                                            if (dt_temp_manual_atws.Rows.Count < k + 1)
                                                            {
                                                                dt_temp_manual_atws.Rows.Add();
                                                            }
                                                            dt_temp_manual_atws.Rows[k][i.ToString() + "right"] = p1;
                                                        }

                                                        if (dt_temp_atws == null || dt_temp_atws.Rows.Count == 0)
                                                        {
                                                            dt_temp_atws = get_dt_atws_structure();
                                                        }

                                                        dt_temp_atws.Rows.Add();
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_width_column] = atws_right;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_length_column] = sta2 - sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_justification_column] = ws_name;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_working_side_column] = "RIGHT";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_orig_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_orig_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_type_column] = atws_regular;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_area_column] = poly_atws_r.Area;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_source_column] = atws_source_library;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle_column] = i.ToString() + "right";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle0_column] = i.ToString() + "right";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_abutter_column] = "TWS";

                                                    }
                                                }
                                            }
                                            else if (perm_right_straight != null)
                                            {
                                                if (atws_modified == false)
                                                {
                                                    Point3dCollection col1 = new Point3dCollection();

                                                    for (int k = 0; k < perm_right_straight.NumberOfVertices; ++k)
                                                    {
                                                        col1.Add(perm_right_straight.GetPointAtParameter(k));
                                                    }

                                                    for (int k = atws_top_right.NumberOfVertices - 1; k >= 0; --k)
                                                    {
                                                        col1.Add(atws_top_right.GetPointAtParameter(k));
                                                    }


                                                    #region lod_atws

                                                    Point3dCollection col_lod = new Point3dCollection();
                                                    col_lod.Add(perm_right_straight.GetPointAtParameter(0));

                                                    for (int k = 0; k < atws_top_right.NumberOfVertices; ++k)
                                                    {
                                                        col_lod.Add(atws_top_right.GetPointAtParameter(k));
                                                    }
                                                    col_lod.Add(perm_right_straight.GetPointAtParameter(perm_right_straight.NumberOfVertices - 1));


                                                    if (col_lod.Count > 1)
                                                    {
                                                        if (dt_atws_lod_temp == null)
                                                        {
                                                            dt_atws_lod_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_lod_temp.Columns.Contains(i.ToString() + "right1") == false)
                                                        {
                                                            dt_atws_lod_temp.Columns.Add(i.ToString() + "right1", typeof(Point2d));
                                                        }


                                                        for (int k = 0; k < col_lod.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col_lod[k].X, col_lod[k].Y);
                                                            if (dt_atws_lod_temp.Rows.Count < k + 1)
                                                            {
                                                                dt_atws_lod_temp.Rows.Add();
                                                            }
                                                            dt_atws_lod_temp.Rows[k][i.ToString() + "right1"] = p1;
                                                        }
                                                    }
                                                    #endregion

                                                    #region side1
                                                    Point2dCollection col_side1 = new Point2dCollection();
                                                    col_side1.Add(perm_right_straight.GetPoint2dAt(0));
                                                    col_side1.Add(atws_top_right.GetPoint2dAt(0));
                                                    if (col_side1.Count > 1)
                                                    {
                                                        if (dt_atws_side1_temp == null)
                                                        {
                                                            dt_atws_side1_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side1_temp.Columns.Contains(i.ToString() + "right1") == false)
                                                        {
                                                            dt_atws_side1_temp.Columns.Add(i.ToString() + "right1", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side1.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side1_temp.Rows.Count)
                                                            {
                                                                dt_atws_side1_temp.Rows.Add();
                                                            }
                                                            dt_atws_side1_temp.Rows[k][i.ToString() + "right1"] = col_side1[k];
                                                        }
                                                    }
                                                    #endregion

                                                    #region side2
                                                    Point2dCollection col_side2 = new Point2dCollection();

                                                    col_side2.Add(atws_top_right.GetPoint2dAt(atws_top_right.NumberOfVertices - 1));
                                                    col_side2.Add(perm_right_straight.GetPoint2dAt(perm_right_straight.NumberOfVertices - 1));
                                                    if (col_side2.Count > 1)
                                                    {
                                                        if (dt_atws_side2_temp == null)
                                                        {
                                                            dt_atws_side2_temp = new System.Data.DataTable();
                                                        }

                                                        if (dt_atws_side2_temp.Columns.Contains(i.ToString() + "right1") == false)
                                                        {
                                                            dt_atws_side2_temp.Columns.Add(i.ToString() + "right1", typeof(Point2d));
                                                        }

                                                        for (int k = 0; k < col_side2.Count; ++k)
                                                        {
                                                            if (k == dt_atws_side2_temp.Rows.Count)
                                                            {
                                                                dt_atws_side2_temp.Rows.Add();
                                                            }
                                                            dt_atws_side2_temp.Rows[k][i.ToString() + "right1"] = col_side2[k];
                                                        }
                                                    }
                                                    #endregion


                                                    if (col1.Count > 1)
                                                    {
                                                        if (dt_temp_manual_atws == null)
                                                        {
                                                            dt_temp_manual_atws = new System.Data.DataTable();
                                                        }
                                                        if (dt_temp_manual_atws.Columns.Contains(i.ToString() + "right1") == false) dt_temp_manual_atws.Columns.Add(i.ToString() + "right1", typeof(Point2d));

                                                        Polyline poly_atws_r = new Polyline();
                                                        for (int k = 0; k < col1.Count; ++k)
                                                        {
                                                            Point2d p1 = new Point2d(col1[k].X, col1[k].Y);
                                                            poly_atws_r.AddVertexAt(k, p1, 0, 0, 0);
                                                            if (dt_temp_manual_atws.Rows.Count < k + 1)
                                                            {
                                                                dt_temp_manual_atws.Rows.Add();
                                                            }
                                                            dt_temp_manual_atws.Rows[k][i.ToString() + "right1"] = p1;
                                                        }
                                                        if (dt_temp_atws == null || dt_temp_atws.Rows.Count == 0)
                                                        {
                                                            dt_temp_atws = get_dt_atws_structure();
                                                        }

                                                        dt_temp_atws.Rows.Add();
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_width_column] = atws_right;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_length_column] = sta2 - sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_justification_column] = ws_name;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_working_side_column] = "RIGHT";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta1_orig_column] = sta1;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_sta2_orig_column] = sta2;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_type_column] = atws_regular;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_area_column] = poly_atws_r.Area;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_source_column] = atws_source_library;
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle_column] = i.ToString() + "right1";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_handle0_column] = i.ToString() + "right1";
                                                        dt_temp_atws.Rows[dt_temp_atws.Rows.Count - 1][atws_abutter_column] = "TWS";

                                                    }
                                                }
                                            }
                                        }

                                    }
                                    #endregion

                                    #region dt_LOD_left from corridor
                                    for (int k = 0; k < perm_left.NumberOfVertices; ++k)
                                    {
                                        if (idx_left1 + k == dt_lod_left.Rows.Count)
                                        {
                                            dt_lod_left.Rows.Add();
                                        }
                                        dt_lod_left.Rows[idx_left1 + k][0] = perm_left.GetPoint2dAt(k);
                                        dt_lod_left.Rows[idx_left1 + k][1] = 0;
                                    }
                                    idx_left1 = idx_left1 + perm_left.NumberOfVertices;


                                    if (tws_left > 0)
                                    {
                                        for (int k = 0; k < tws_top_left.NumberOfVertices; ++k)
                                        {
                                            if (idx_left2 + k == dt_lod_left.Rows.Count)
                                            {
                                                dt_lod_left.Rows.Add();
                                            }
                                            dt_lod_left.Rows[idx_left2 + k][2] = tws_top_left.GetPoint2dAt(k);
                                            dt_lod_left.Rows[idx_left2 + k][3] = 0;

                                        }
                                        idx_left2 = idx_left2 + tws_top_left.NumberOfVertices;
                                    }
                                    else
                                    {
                                        for (int k = 0; k < perm_left.NumberOfVertices; ++k)
                                        {
                                            if (idx_left2 + k == dt_lod_left.Rows.Count)
                                            {
                                                dt_lod_left.Rows.Add();
                                            }
                                            dt_lod_left.Rows[idx_left2 + k][2] = perm_left.GetPoint2dAt(k);
                                            dt_lod_left.Rows[idx_left2 + k][3] = 0;

                                        }
                                        idx_left2 = idx_left2 + perm_left.NumberOfVertices;

                                    }

                                    if (atws_left > 0)
                                    {
                                        for (int k = 0; k < atws_top_left.NumberOfVertices; ++k)
                                        {
                                            if (idx_left3 + k == dt_lod_left.Rows.Count)
                                            {
                                                dt_lod_left.Rows.Add();
                                            }
                                            dt_lod_left.Rows[idx_left3 + k][4] = atws_top_left.GetPoint2dAt(k);
                                            dt_lod_left.Rows[idx_left3 + k][5] = 0;
                                            dt_lod_left.Rows[idx_left3 + k][6] = atws_top_left.GetPoint2dAt(k);
                                            dt_lod_left.Rows[idx_left3 + k][7] = 0;
                                        }
                                        idx_left3 = idx_left3 + atws_top_left.NumberOfVertices;

                                    }
                                    else
                                    {
                                        if (tws_left > 0)
                                        {
                                            for (int k = 0; k < tws_top_left.NumberOfVertices; ++k)
                                            {
                                                if (idx_left3 + k == dt_lod_left.Rows.Count)
                                                {
                                                    dt_lod_left.Rows.Add();
                                                }
                                                dt_lod_left.Rows[idx_left3 + k][4] = tws_top_left.GetPoint2dAt(k);
                                                dt_lod_left.Rows[idx_left3 + k][5] = 0;
                                                dt_lod_left.Rows[idx_left3 + k][6] = tws_top_left.GetPoint2dAt(k);
                                                dt_lod_left.Rows[idx_left3 + k][7] = 0;
                                            }
                                            idx_left3 = idx_left3 + tws_top_left.NumberOfVertices;

                                        }
                                        else
                                        {
                                            for (int k = 0; k < perm_left.NumberOfVertices; ++k)
                                            {
                                                if (idx_left3 + k == dt_lod_left.Rows.Count)
                                                {
                                                    dt_lod_left.Rows.Add();
                                                }
                                                dt_lod_left.Rows[idx_left3 + k][4] = perm_left.GetPoint2dAt(k);
                                                dt_lod_left.Rows[idx_left3 + k][5] = 0;
                                                dt_lod_left.Rows[idx_left3 + k][6] = perm_left.GetPoint2dAt(k);
                                                dt_lod_left.Rows[idx_left3 + k][7] = 0;
                                            }
                                            idx_left3 = idx_left3 + perm_left.NumberOfVertices;

                                        }
                                    }


                                    #endregion

                                    #region dt_LOD_right from corridor
                                    for (int k = 0; k < perm_right.NumberOfVertices; ++k)
                                    {
                                        if (idx_right1 + k == dt_lod_right.Rows.Count)
                                        {
                                            dt_lod_right.Rows.Add();
                                        }
                                        dt_lod_right.Rows[idx_right1 + k][0] = perm_right.GetPoint2dAt(k);
                                        dt_lod_right.Rows[idx_right1 + k][1] = 0;
                                    }
                                    idx_right1 = idx_right1 + perm_right.NumberOfVertices;


                                    if (tws_right > 0)
                                    {
                                        for (int k = 0; k < tws_top_right.NumberOfVertices; ++k)
                                        {
                                            if (idx_right2 + k == dt_lod_right.Rows.Count)
                                            {
                                                dt_lod_right.Rows.Add();
                                            }
                                            dt_lod_right.Rows[idx_right2 + k][2] = tws_top_right.GetPoint2dAt(k);
                                            dt_lod_right.Rows[idx_right2 + k][3] = 0;

                                        }
                                        idx_right2 = idx_right2 + tws_top_right.NumberOfVertices;
                                    }
                                    else
                                    {
                                        for (int k = 0; k < perm_right.NumberOfVertices; ++k)
                                        {
                                            if (idx_right2 + k == dt_lod_right.Rows.Count)
                                            {
                                                dt_lod_right.Rows.Add();
                                            }
                                            dt_lod_right.Rows[idx_right2 + k][2] = perm_right.GetPoint2dAt(k);
                                            dt_lod_right.Rows[idx_right2 + k][3] = 0;

                                        }
                                        idx_right2 = idx_right2 + perm_right.NumberOfVertices;

                                    }

                                    if (atws_right > 0)
                                    {
                                        for (int k = 0; k < atws_top_right.NumberOfVertices; ++k)
                                        {
                                            if (idx_right3 + k == dt_lod_right.Rows.Count)
                                            {
                                                dt_lod_right.Rows.Add();
                                            }
                                            dt_lod_right.Rows[idx_right3 + k][4] = atws_top_right.GetPoint2dAt(k);
                                            dt_lod_right.Rows[idx_right3 + k][5] = 0;
                                            dt_lod_right.Rows[idx_right3 + k][6] = atws_top_right.GetPoint2dAt(k);
                                            dt_lod_right.Rows[idx_right3 + k][7] = 0;
                                        }
                                        idx_right3 = idx_right3 + atws_top_right.NumberOfVertices;

                                    }
                                    else
                                    {
                                        if (tws_right > 0)
                                        {
                                            for (int k = 0; k < tws_top_right.NumberOfVertices; ++k)
                                            {
                                                if (idx_right3 + k == dt_lod_right.Rows.Count)
                                                {
                                                    dt_lod_right.Rows.Add();
                                                }
                                                dt_lod_right.Rows[idx_right3 + k][4] = tws_top_right.GetPoint2dAt(k);
                                                dt_lod_right.Rows[idx_right3 + k][5] = 0;
                                                dt_lod_right.Rows[idx_right3 + k][6] = tws_top_right.GetPoint2dAt(k);
                                                dt_lod_right.Rows[idx_right3 + k][7] = 0;
                                            }
                                            idx_right3 = idx_right3 + tws_top_right.NumberOfVertices;

                                        }
                                        else
                                        {
                                            for (int k = 0; k < perm_right.NumberOfVertices; ++k)
                                            {
                                                if (idx_right3 + k == dt_lod_right.Rows.Count)
                                                {
                                                    dt_lod_right.Rows.Add();
                                                }
                                                dt_lod_right.Rows[idx_right3 + k][4] = perm_right.GetPoint2dAt(k);
                                                dt_lod_right.Rows[idx_right3 + k][5] = 0;
                                                dt_lod_right.Rows[idx_right3 + k][6] = perm_right.GetPoint2dAt(k);
                                                dt_lod_right.Rows[idx_right3 + k][7] = 0;
                                            }
                                            idx_right3 = idx_right3 + perm_right.NumberOfVertices;

                                        }
                                    }


                                    #endregion



                                    //add_poly_to_btrecord(Trans1, BTrecord, poly_perm_right);
                                    //add_poly_to_btrecord(Trans1, BTrecord, tws_top_right);
                                    //add_poly_to_btrecord(Trans1, BTrecord, atws_top_right);


                                }
                            }
                        }
                    }
                    catch (System.Exception ex)
                    {

                        MessageBox.Show(ex.Message + "\r\n index on corridor=" + debug1);
                        set_enable_true();
                        return;
                    }

                    //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_lod_right);

                    #region permanent easement
                    if (dt_perm_left.Rows.Count > 1 && dt_perm_right.Rows.Count > 1)
                    {
                        Point2dCollection col1 = new Point2dCollection();
                        int idx0 = 0;
                        Point2d pt0 = new Point2d();
                        for (int k = 0; k < dt_perm_left.Rows.Count; ++k)
                        {
                            Point3d pt_perm1 = (Point3d)dt_perm_left.Rows[k][0];
                            int idx1 = Convert.ToInt32(dt_perm_left.Rows[k][1]);
                            Point2d pt1 = new Point2d(pt_perm1.X, pt_perm1.Y);



                            if (k < dt_perm_left.Rows.Count - 1)
                            {
                                idx0 = Convert.ToInt32(dt_perm_left.Rows[k + 1][1]);
                            }

                            if (k == 0 || k >= dt_perm_left.Rows.Count - 3 || idx0 == idx1)
                            {
                                col1.Add(pt1);

                                lod1_left.AddVertexAt(index1_left, pt1, 0, 0, 0);
                                ++index1_left;

                            }
                            else
                            {
                                Polyline polyt1 = new Polyline();
                                polyt1.AddVertexAt(0, pt0, 0, 0, 0);
                                polyt1.AddVertexAt(1, pt1, 0, 0, 0);
                                polyt1.Elevation = 0;

                                Point3d pt_perm2 = (Point3d)dt_perm_left.Rows[k + 1][0];
                                Point3d pt_perm3 = (Point3d)dt_perm_left.Rows[k + 2][0];
                                Point2d pt2 = new Point2d(pt_perm2.X, pt_perm2.Y);
                                Point2d pt3 = new Point2d(pt_perm3.X, pt_perm3.Y);

                                Polyline polyt2 = new Polyline();
                                polyt2.AddVertexAt(0, pt2, 0, 0, 0);
                                polyt2.AddVertexAt(1, pt3, 0, 0, 0);
                                polyt2.Elevation = 0;

                                Point3dCollection colint = Functions.Intersect_on_both_operands(polyt1, polyt2);
                                if (colint.Count == 1)
                                {
                                    Point2d pt2d = new Point2d(colint[0].X, colint[0].Y);
                                    col1.Add(pt2d);
                                    ++k;
                                    lod1_left.AddVertexAt(index1_left, pt2d, 0, 0, 0);
                                    ++index1_left;
                                }
                                else
                                {
                                    col1.Add(pt1);
                                    lod1_left.AddVertexAt(index1_left, pt1, 0, 0, 0);
                                    ++index1_left;
                                }
                            }
                            pt0 = pt1;
                        }
                        idx0 = 0;
                        pt0 = new Point2d();

                        for (int k = dt_perm_right.Rows.Count - 1; k >= 0; --k)
                        {
                            Point3d pt_perm1 = (Point3d)dt_perm_right.Rows[k][0];
                            int idx1 = Convert.ToInt32(dt_perm_right.Rows[k][1]);
                            if (k == dt_perm_right.Rows.Count - 1) idx0 = idx1;
                            if (k > 0)
                            {
                                idx0 = Convert.ToInt32(dt_perm_right.Rows[k - 1][1]);
                            }
                            Point2d pt1 = new Point2d(pt_perm1.X, pt_perm1.Y);
                            if (k == dt_perm_right.Rows.Count - 1 || k < 2 || idx0 == idx1)
                            {
                                col1.Add(pt1);
                                lod1_right.AddVertexAt(0, pt1, 0, 0, 0);

                            }
                            else
                            {
                                Polyline polyt1 = new Polyline();
                                polyt1.AddVertexAt(0, pt0, 0, 0, 0);
                                polyt1.AddVertexAt(1, pt1, 0, 0, 0);
                                polyt1.Elevation = 0;
                                Point3d pt_perm2 = (Point3d)dt_perm_right.Rows[k - 1][0];
                                Point3d pt_perm3 = (Point3d)dt_perm_right.Rows[k - 2][0];
                                Point2d pt2 = new Point2d(pt_perm2.X, pt_perm2.Y);
                                Point2d pt3 = new Point2d(pt_perm3.X, pt_perm3.Y);
                                Polyline polyt2 = new Polyline();
                                polyt2.AddVertexAt(0, pt2, 0, 0, 0);
                                polyt2.AddVertexAt(1, pt3, 0, 0, 0);
                                polyt2.Elevation = 0;
                                Point3dCollection colint = Functions.Intersect_on_both_operands(polyt1, polyt2);
                                if (colint.Count == 1)
                                {
                                    Point2d pt2d = new Point2d(colint[0].X, colint[0].Y);
                                    col1.Add(pt2d);
                                    --k;
                                    lod1_right.AddVertexAt(0, pt2d, 0, 0, 0);

                                }
                                else
                                {
                                    col1.Add(pt1);
                                    lod1_right.AddVertexAt(0, pt1, 0, 0, 0);

                                }
                            }
                            pt0 = pt1;
                        }

                        Polyline poly_perm = new Polyline();
                        if (col1.Count > 1)
                        {
                            for (int k = 0; k < col1.Count; ++k)
                            {
                                poly_perm.AddVertexAt(k, col1[k], 0, 0, 0);
                            }
                        }
                        poly_perm.Elevation = 0;
                        poly_perm.Closed = true;
                        poly_perm.ColorIndex = 256;
                        poly_perm.Layer = perm_layer;
                        BTrecord.AppendEntity(poly_perm);
                        Trans1.AddNewlyCreatedDBObject(poly_perm, true);

                        dt_erase.Rows.Add();
                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_perm.ObjectId;
                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = perm_layer;
                    }
                    #endregion

                    #region tws left
                    if (lista_tws_left.Count > 0)
                    {
                        double dp = 0;

                        for (int i = 0; i < lista_tws_left.Count; ++i)
                        {
                            Point3dCollection col1 = lista_tws_left[i];
                            Point3dCollection col2 = lista_perm_for_tws_left[i];

                            Polyline poly_tws_l = new Polyline();

                            Point3d pt_list_start = new Point3d(col2[0].X, col2[0].Y, 0);
                            Point3d pt_start = lod1_left.GetClosestPointTo(pt_list_start, Vector3d.ZAxis, false);
                            double sta_start = lod1_left.GetDistAtPoint(pt_start);
                            if (sta_start > dp)
                            {
                                double param1 = lod1_left.GetParameterAtDistance(dp);
                                double param2 = lod1_left.GetParameterAtDistance(sta_start);
                                Polyline lod1_left_part = get_part_of_poly(lod1_left, param1, param2);

                                for (int k = 0; k < lod1_left_part.NumberOfVertices; ++k)
                                {
                                    lod2_left.AddVertexAt(index2_left, lod1_left_part.GetPoint2dAt(k), 0, 0, 0);
                                    ++index2_left;
                                }

                            }


                            int idx1 = 0;
                            for (int k = 0; k < col1.Count; ++k)
                            {
                                Point2d pt2d = new Point2d(col1[k].X, col1[k].Y);
                                poly_tws_l.AddVertexAt(idx1, pt2d, 0, 0, 0);
                                ++idx1;

                                lod2_left.AddVertexAt(index2_left, pt2d, 0, 0, 0);
                                ++index2_left;
                            }

                            lod2_left.AddVertexAt(index2_left, new Point2d(col2[col2.Count - 1].X, col2[col2.Count - 1].Y), 0, 0, 0);
                            ++index2_left;

                            Point3d pt_list_end = new Point3d(col2[col2.Count - 1].X, col2[col2.Count - 1].Y, 0);
                            Point3d pt_end = lod1_left.GetClosestPointTo(pt_list_end, Vector3d.ZAxis, false);
                            double sta_end = lod1_left.GetDistAtPoint(pt_end);
                            dp = sta_end;

                            if (i == lista_tws_left.Count - 1)
                            {
                                if (Math.Round(sta_end, 2) < lod1_left.Length)
                                {
                                    double param1 = lod1_left.GetParameterAtDistance(sta_end);
                                    double param2 = lod1_left.GetParameterAtDistance(lod1_left.Length - 0.001);
                                    Polyline lod1_left_part = get_part_of_poly(lod1_left, param1, param2);

                                    for (int k = 0; k < lod1_left_part.NumberOfVertices; ++k)
                                    {
                                        lod2_left.AddVertexAt(index2_left, lod1_left_part.GetPoint2dAt(k), 0, 0, 0);
                                        ++index2_left;
                                    }

                                }
                            }



                            for (int k = col2.Count - 1; k >= 0; --k)
                            {
                                poly_tws_l.AddVertexAt(idx1, new Point2d(col2[k].X, col2[k].Y), 0, 0, 0);
                                ++idx1;
                            }


                            bool split_poly = false;

                            if (splitl1 != null && splitl1.Length > 0)
                            {

                                System.Data.DataTable dt_param = new System.Data.DataTable();
                                dt_param.Columns.Add("a", typeof(double));
                                dt_param.Columns.Add("b", typeof(double));
                                dt_param.Columns.Add("c", typeof(double));
                                dt_param.Columns.Add("d", typeof(double));
                                dt_param.Columns.Add("e", typeof(Polyline));
                                dt_param.Columns.Add("f", typeof(Polyline));

                                for (int m = 0; m < splitl1.Length; ++m)
                                {
                                    Polyline split1 = splitl1[m];
                                    Polyline split2 = splitl2[m];
                                    Point3dCollection col_int_tws1 = Functions.Intersect_on_both_operands(split1, poly_tws_l);
                                    Point3dCollection col_int_tws2 = Functions.Intersect_on_both_operands(split2, poly_tws_l);

                                    if (col_int_tws1.Count == 2 && col_int_tws2.Count == 2)
                                    {
                                        split_poly = true;

                                        double par11 = poly_tws_l.GetParameterAtPoint(col_int_tws1[0]);
                                        double par12 = poly_tws_l.GetParameterAtPoint(col_int_tws1[1]);

                                        if (par11 > par12)
                                        {
                                            double t = par11;
                                            par11 = par12;
                                            par12 = t;
                                        }

                                        dt_param.Rows.Add();
                                        dt_param.Rows[dt_param.Rows.Count - 1][0] = par11;
                                        dt_param.Rows[dt_param.Rows.Count - 1][1] = par12;

                                        double par21 = poly_tws_l.GetParameterAtPoint(col_int_tws2[0]);
                                        double par22 = poly_tws_l.GetParameterAtPoint(col_int_tws2[1]);

                                        if (par21 > par22)
                                        {
                                            double t = par21;
                                            par21 = par22;
                                            par22 = t;
                                        }

                                        dt_param.Rows[dt_param.Rows.Count - 1][2] = par21;
                                        dt_param.Rows[dt_param.Rows.Count - 1][3] = par22;

                                        double par31 = split1.GetParameterAtPoint(col_int_tws1[0]);
                                        double par32 = split1.GetParameterAtPoint(col_int_tws1[1]);

                                        if (par31 > par32)
                                        {
                                            double t = par31;
                                            par31 = par32;
                                            par32 = t;
                                        }
                                        Polyline ar1 = get_part_of_poly(split1, par31, par32);
                                        dt_param.Rows[dt_param.Rows.Count - 1][4] = ar1;

                                        double par41 = split2.GetParameterAtPoint(col_int_tws2[0]);
                                        double par42 = split2.GetParameterAtPoint(col_int_tws2[1]);

                                        if (par41 > par42)
                                        {
                                            double t = par41;
                                            par41 = par42;
                                            par42 = t;
                                        }

                                        Polyline ar2 = get_part_of_poly(split2, par41, par42);
                                        dt_param.Rows[dt_param.Rows.Count - 1][5] = ar2;
                                    }
                                }
                                if (split_poly == true)
                                {


                                    dt_param = Functions.Sort_data_table(dt_param, "a");
                                    int number_of_poly = dt_param.Rows.Count;

                                    double p_start = 0;
                                    double p_end = poly_tws_l.EndParam;
                                    Polyline pside2 = new Polyline();

                                    for (int k = 0; k < dt_param.Rows.Count; ++k)
                                    {
                                        double pa = Convert.ToDouble(dt_param.Rows[k][0]);
                                        double pz = Convert.ToDouble(dt_param.Rows[k][1]);

                                        Polyline top1 = get_part_of_poly(poly_tws_l, p_start, pa);
                                        Polyline pside1 = (Polyline)dt_param.Rows[k][4];
                                        Polyline bott1 = get_part_of_poly(poly_tws_l, pz, p_end);


                                        p_start = Convert.ToDouble(dt_param.Rows[k][2]);
                                        p_end = Convert.ToDouble(dt_param.Rows[k][3]);


                                        Polyline poly_tws_left_split = new Polyline();
                                        int q = 0;
                                        for (int n = 0; n < top1.NumberOfVertices; ++n)
                                        {
                                            poly_tws_left_split.AddVertexAt(q, top1.GetPoint2dAt(n), 0, 0, 0);
                                            ++q;
                                        }
                                        for (int n = 1; n < pside1.NumberOfVertices - 1; ++n)
                                        {
                                            poly_tws_left_split.AddVertexAt(q, pside1.GetPoint2dAt(n), 0, 0, 0);
                                            ++q;
                                        }

                                        for (int n = 0; n < bott1.NumberOfVertices; ++n)
                                        {
                                            poly_tws_left_split.AddVertexAt(q, bott1.GetPoint2dAt(n), 0, 0, 0);
                                            ++q;
                                        }
                                        if (k > 0)
                                        {
                                            for (int n = pside2.NumberOfVertices - 2; n >= 1; --n)
                                            {
                                                poly_tws_left_split.AddVertexAt(q, pside2.GetPoint2dAt(n), 0, 0, 0);
                                                ++q;
                                            }
                                        }

                                        poly_tws_left_split.Closed = true;
                                        poly_tws_left_split.Layer = tws_layer;
                                        poly_tws_left_split.Closed = true;
                                        BTrecord.AppendEntity(poly_tws_left_split);
                                        Trans1.AddNewlyCreatedDBObject(poly_tws_left_split, true);



                                        pside2 = (Polyline)dt_param.Rows[k][5];


                                        dt_erase.Rows.Add();
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_tws_left_split.ObjectId;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;


                                    }

                                    Polyline top2 = get_part_of_poly(poly_tws_l, p_start, p_end);


                                    Polyline poly_tws_left_split2 = new Polyline();
                                    int s = 0;
                                    for (int k = 0; k < top2.NumberOfVertices; ++k)
                                    {
                                        poly_tws_left_split2.AddVertexAt(s, top2.GetPoint2dAt(k), 0, 0, 0);
                                        ++s;
                                    }
                                    for (int k = pside2.NumberOfVertices - 2; k >= 1; --k)
                                    {
                                        poly_tws_left_split2.AddVertexAt(s, pside2.GetPoint2dAt(k), 0, 0, 0);
                                        ++s;
                                    }

                                    poly_tws_left_split2.Closed = true;

                                    poly_tws_left_split2.Layer = tws_layer;
                                    poly_tws_left_split2.Closed = true;
                                    BTrecord.AppendEntity(poly_tws_left_split2);
                                    Trans1.AddNewlyCreatedDBObject(poly_tws_left_split2, true);


                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_tws_left_split2.ObjectId;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;

                                }


                            }

                            if (split_poly == false)
                            {
                                poly_tws_l.Closed = true;
                                poly_tws_l.ColorIndex = 256;
                                poly_tws_l.Layer = tws_layer;
                                BTrecord.AppendEntity(poly_tws_l);
                                Trans1.AddNewlyCreatedDBObject(poly_tws_l, true);

                                dt_erase.Rows.Add();
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_tws_l.ObjectId;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;

                            }


                        }
                    }
                    else
                    {
                        for (int k = 0; k < lod1_left.NumberOfVertices; ++k)
                        {
                            lod2_left.AddVertexAt(index2_left, lod1_left.GetPoint2dAt(k), 0, 0, 0);
                            ++index2_left;
                        }
                    }


                    #endregion

                    #region tws right
                    if (lista_tws_right.Count > 0)
                    {
                        double dp = 0;
                        for (int i = 0; i < lista_tws_right.Count; ++i)
                        {
                            Point3dCollection col1 = lista_tws_right[i];
                            Point3dCollection col2 = lista_perm_for_tws_right[i];
                            Polyline poly_tws_r = new Polyline();

                            Point3d pt_list_start = new Point3d(col2[0].X, col2[0].Y, 0);
                            Point3d pt_start = lod1_right.GetClosestPointTo(pt_list_start, Vector3d.ZAxis, false);
                            double sta_start = lod1_right.GetDistAtPoint(pt_start);
                            if (sta_start > dp)
                            {
                                double param1 = lod1_right.GetParameterAtDistance(dp);
                                double param2 = lod1_right.GetParameterAtDistance(sta_start);
                                Polyline lod1_right_part = get_part_of_poly(lod1_right, param1, param2);

                                for (int k = 0; k < lod1_right_part.NumberOfVertices; ++k)
                                {
                                    lod2_right.AddVertexAt(index2_right, lod1_right_part.GetPoint2dAt(k), 0, 0, 0);
                                    ++index2_right;
                                }

                            }



                            int idx1 = 0;
                            for (int k = 0; k < col1.Count; ++k)
                            {
                                Point2d pt2d = new Point2d(col1[k].X, col1[k].Y);
                                poly_tws_r.AddVertexAt(idx1, pt2d, 0, 0, 0);
                                ++idx1;

                                lod2_right.AddVertexAt(index2_right, pt2d, 0, 0, 0);
                                ++index2_right;
                            }

                            lod2_right.AddVertexAt(index2_right, new Point2d(col2[col2.Count - 1].X, col2[col2.Count - 1].Y), 0, 0, 0);
                            ++index2_right;

                            Point3d pt_list_end = new Point3d(col2[col2.Count - 1].X, col2[col2.Count - 1].Y, 0);
                            Point3d pt_end = lod1_right.GetClosestPointTo(pt_list_end, Vector3d.ZAxis, false);
                            double sta_end = lod1_right.GetDistAtPoint(pt_end);
                            dp = sta_end;

                            if (i == lista_tws_right.Count - 1)
                            {
                                if (Math.Round(sta_end, 2) < lod1_right.Length)
                                {
                                    double param1 = lod1_right.GetParameterAtDistance(sta_end);
                                    double param2 = lod1_right.GetParameterAtDistance(lod1_right.Length - 0.001);
                                    Polyline lod1_right_part = get_part_of_poly(lod1_right, param1, param2);

                                    for (int k = 0; k < lod1_right_part.NumberOfVertices; ++k)
                                    {
                                        lod2_right.AddVertexAt(index2_right, lod1_right_part.GetPoint2dAt(k), 0, 0, 0);
                                        ++index2_right;
                                    }

                                }
                            }
                            for (int k = col2.Count - 1; k >= 0; --k)
                            {
                                poly_tws_r.AddVertexAt(idx1, new Point2d(col2[k].X, col2[k].Y), 0, 0, 0);
                                ++idx1;
                            }

                            bool split_poly = false;
                            if (splitr1 != null && splitr1.Length > 0)
                            {

                                System.Data.DataTable dt_param = new System.Data.DataTable();
                                dt_param.Columns.Add("a", typeof(double));
                                dt_param.Columns.Add("b", typeof(double));
                                dt_param.Columns.Add("c", typeof(double));
                                dt_param.Columns.Add("d", typeof(double));
                                dt_param.Columns.Add("e", typeof(Polyline));
                                dt_param.Columns.Add("f", typeof(Polyline));

                                for (int m = 0; m < splitr1.Length; ++m)
                                {

                                    Polyline split2 = splitr1[m];
                                    Polyline split1 = splitr2[m];
                                    Point3dCollection col_int_tws1 = Functions.Intersect_on_both_operands(split1, poly_tws_r);
                                    Point3dCollection col_int_tws2 = Functions.Intersect_on_both_operands(split2, poly_tws_r);

                                    if (col_int_tws1.Count == 2 && col_int_tws2.Count == 2)
                                    {
                                        split_poly = true;

                                        double par11 = poly_tws_r.GetParameterAtPoint(col_int_tws1[0]);
                                        double par12 = poly_tws_r.GetParameterAtPoint(col_int_tws1[1]);

                                        if (par11 > par12)
                                        {
                                            double t = par11;
                                            par11 = par12;
                                            par12 = t;
                                        }

                                        dt_param.Rows.Add();
                                        dt_param.Rows[dt_param.Rows.Count - 1][0] = par11;
                                        dt_param.Rows[dt_param.Rows.Count - 1][1] = par12;

                                        double par21 = poly_tws_r.GetParameterAtPoint(col_int_tws2[0]);
                                        double par22 = poly_tws_r.GetParameterAtPoint(col_int_tws2[1]);

                                        if (par21 > par22)
                                        {
                                            double t = par21;
                                            par21 = par22;
                                            par22 = t;
                                        }

                                        dt_param.Rows[dt_param.Rows.Count - 1][2] = par21;
                                        dt_param.Rows[dt_param.Rows.Count - 1][3] = par22;

                                        double par31 = split1.GetParameterAtPoint(col_int_tws1[0]);
                                        double par32 = split1.GetParameterAtPoint(col_int_tws1[1]);

                                        if (par31 > par32)
                                        {
                                            double t = par31;
                                            par31 = par32;
                                            par32 = t;
                                        }
                                        Polyline ar1 = get_part_of_poly(split1, par31, par32);
                                        dt_param.Rows[dt_param.Rows.Count - 1][4] = ar1;

                                        double par41 = split2.GetParameterAtPoint(col_int_tws2[0]);
                                        double par42 = split2.GetParameterAtPoint(col_int_tws2[1]);

                                        if (par41 > par42)
                                        {
                                            double t = par41;
                                            par41 = par42;
                                            par42 = t;
                                        }

                                        Polyline ar2 = get_part_of_poly(split2, par41, par42);
                                        dt_param.Rows[dt_param.Rows.Count - 1][5] = ar2;



                                    }
                                }

                                if (split_poly == true)
                                {

                                    dt_param = Functions.Sort_data_table(dt_param, "a");
                                    int number_of_poly = dt_param.Rows.Count;

                                    double p_start = 0;
                                    double p_end = poly_tws_r.EndParam;
                                    Polyline pside2 = new Polyline();

                                    for (int n = 0; n < dt_param.Rows.Count; ++n)
                                    {
                                        double pa = Convert.ToDouble(dt_param.Rows[n][0]);
                                        double pz = Convert.ToDouble(dt_param.Rows[n][1]);

                                        Polyline top1 = get_part_of_poly(poly_tws_r, p_start, pa);
                                        Polyline pside1 = (Polyline)dt_param.Rows[n][4];
                                        Polyline bott1 = get_part_of_poly(poly_tws_r, pz, p_end);


                                        p_start = Convert.ToDouble(dt_param.Rows[n][2]);
                                        p_end = Convert.ToDouble(dt_param.Rows[n][3]);


                                        Polyline poly_tws_right_split = new Polyline();
                                        int q = 0;
                                        for (int k = 0; k < top1.NumberOfVertices; ++k)
                                        {
                                            poly_tws_right_split.AddVertexAt(q, top1.GetPoint2dAt(k), 0, 0, 0);
                                            ++q;
                                        }
                                        for (int k = 1; k < pside1.NumberOfVertices - 1; ++k)
                                        {
                                            poly_tws_right_split.AddVertexAt(q, pside1.GetPoint2dAt(k), 0, 0, 0);
                                            ++q;
                                        }

                                        for (int k = 0; k < bott1.NumberOfVertices; ++k)
                                        {
                                            poly_tws_right_split.AddVertexAt(q, bott1.GetPoint2dAt(k), 0, 0, 0);
                                            ++q;
                                        }
                                        if (n > 0)
                                        {
                                            for (int k = pside2.NumberOfVertices - 2; k >= 1; --k)
                                            {
                                                poly_tws_right_split.AddVertexAt(q, pside2.GetPoint2dAt(k), 0, 0, 0);
                                                ++q;
                                            }
                                        }

                                        poly_tws_right_split.Closed = true;
                                        poly_tws_right_split.Layer = tws_layer;
                                        poly_tws_right_split.Closed = true;
                                        BTrecord.AppendEntity(poly_tws_right_split);
                                        Trans1.AddNewlyCreatedDBObject(poly_tws_right_split, true);

                                        dt_erase.Rows.Add();
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_tws_right_split.ObjectId;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;

                                        pside2 = (Polyline)dt_param.Rows[n][5];
                                    }

                                    Polyline top2 = get_part_of_poly(poly_tws_r, p_start, p_end);


                                    Polyline poly_tws_right_split2 = new Polyline();
                                    int s = 0;
                                    for (int k = 0; k < top2.NumberOfVertices; ++k)
                                    {
                                        poly_tws_right_split2.AddVertexAt(s, top2.GetPoint2dAt(k), 0, 0, 0);
                                        ++s;
                                    }
                                    for (int k = pside2.NumberOfVertices - 2; k >= 1; --k)
                                    {
                                        poly_tws_right_split2.AddVertexAt(s, pside2.GetPoint2dAt(k), 0, 0, 0);
                                        ++s;
                                    }

                                    poly_tws_right_split2.Closed = true;

                                    poly_tws_right_split2.Layer = tws_layer;
                                    poly_tws_right_split2.Closed = true;
                                    BTrecord.AppendEntity(poly_tws_right_split2);
                                    Trans1.AddNewlyCreatedDBObject(poly_tws_right_split2, true);

                                    dt_erase.Rows.Add();
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_tws_right_split2.ObjectId;
                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;
                                }

                            }

                            if (split_poly == false)
                            {
                                poly_tws_r.Closed = true;
                                poly_tws_r.ColorIndex = 256;
                                poly_tws_r.Layer = tws_layer;
                                BTrecord.AppendEntity(poly_tws_r);
                                Trans1.AddNewlyCreatedDBObject(poly_tws_r, true);

                                dt_erase.Rows.Add();
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_tws_r.ObjectId;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = tws_layer;
                            }

                        }
                    }
                    else
                    {
                        for (int k = 0; k < lod1_right.NumberOfVertices; ++k)
                        {
                            lod2_right.AddVertexAt(index2_right, lod1_right.GetPoint2dAt(k), 0, 0, 0);
                            ++index2_right;
                        }
                    }


                    #endregion

                    dt_temp_atws = sync_corridor_atws_data(dt_temp_atws);

                    #region transfering temporary data to dt_atws
                    if (dt_temp_atws != null && dt_temp_atws.Rows.Count > 0)
                    {
                        if (dt_atws_manual == null || dt_atws_manual.Rows.Count == 0 || dt_atws == null || dt_atws.Rows.Count == 0)
                        {
                            dt_atws_manual = new System.Data.DataTable();
                            dt_atws = get_dt_atws_structure();
                        }

                        if (dt_atws_lod_manual == null || dt_atws_lod_manual.Rows.Count == 0)
                        {
                            dt_atws_lod_manual = new System.Data.DataTable();
                        }

                        if (dt_atws_side1 == null || dt_atws_side1.Rows.Count == 0)
                        {
                            dt_atws_side1 = new System.Data.DataTable();
                        }

                        if (dt_atws_side2 == null || dt_atws_side2.Rows.Count == 0)
                        {
                            dt_atws_side2 = new System.Data.DataTable();
                        }


                        for (int i = 0; i < dt_temp_atws.Rows.Count; ++i)
                        {
                            string handle1 = Convert.ToString(dt_temp_atws.Rows[i][atws_handle_column]);

                            System.Data.DataRow row1 = dt_atws.NewRow();
                            for (int j = 0; j < dt_temp_atws.Columns.Count; ++j)
                            {
                                row1[j] = dt_temp_atws.Rows[i][j];
                            }
                            dt_atws.Rows.InsertAt(row1, dt_atws.Rows.Count);

                            if (dt_atws_manual.Columns.Contains(handle1) == false)
                            {
                                dt_atws_manual.Columns.Add(handle1, typeof(Point2d));
                            }
                            else
                            {
                                for (int k = 0; k < dt_atws_manual.Rows.Count; ++k)
                                {
                                    dt_atws_manual.Rows[k][handle1] = DBNull.Value;
                                }
                            }

                            for (int k = 0; k < dt_temp_manual_atws.Rows.Count; ++k)
                            {
                                dt_atws_manual.Rows.Add();
                                dt_atws_manual.Rows[k][handle1] = dt_temp_manual_atws.Rows[k][handle1];
                            }


                            if (dt_atws_lod_manual.Columns.Contains(handle1) == false)
                            {
                                dt_atws_lod_manual.Columns.Add(handle1, typeof(Point2d));
                            }
                            else
                            {
                                for (int k = 0; k < dt_atws_lod_manual.Rows.Count; ++k)
                                {
                                    dt_atws_lod_manual.Rows[k][handle1] = DBNull.Value;
                                }
                            }

                            for (int k = 0; k < dt_atws_lod_temp.Rows.Count; ++k)
                            {
                                dt_atws_lod_manual.Rows.Add();
                                dt_atws_lod_manual.Rows[k][handle1] = dt_atws_lod_temp.Rows[k][handle1];
                            }

                            #region side1
                            if (dt_atws_side1.Columns.Contains(handle1) == false)
                            {
                                dt_atws_side1.Columns.Add(handle1, typeof(Point2d));
                            }
                            else
                            {
                                for (int k = 0; k < dt_atws_side1.Rows.Count; ++k)
                                {
                                    dt_atws_side1.Rows[k][handle1] = DBNull.Value;
                                }
                            }

                            for (int k = 0; k < dt_atws_side1_temp.Rows.Count; ++k)
                            {
                                dt_atws_side1.Rows.Add();
                                dt_atws_side1.Rows[k][handle1] = dt_atws_side1_temp.Rows[k][handle1];
                            }
                            #endregion

                            #region side2
                            if (dt_atws_side2.Columns.Contains(handle1) == false)
                            {
                                dt_atws_side2.Columns.Add(handle1, typeof(Point2d));
                            }
                            else
                            {
                                for (int k = 0; k < dt_atws_side2.Rows.Count; ++k)
                                {
                                    dt_atws_side2.Rows[k][handle1] = DBNull.Value;
                                }
                            }

                            for (int k = 0; k < dt_atws_side2_temp.Rows.Count; ++k)
                            {
                                dt_atws_side2.Rows.Add();
                                dt_atws_side2.Rows[k][handle1] = dt_atws_side2_temp.Rows[k][handle1];
                            }
                            #endregion

                        }

                        if (dt_atws != null && dt_atws.Rows.Count > 0)
                        {
                            for (int j = dt_temp_atws.Rows.Count - 1; j >= 0; --j)
                            {
                                double sta1_orig_temp = Convert.ToDouble(dt_temp_atws.Rows[j][atws_sta1_orig_column]);
                                double sta2_orig_temp = Convert.ToDouble(dt_temp_atws.Rows[j][atws_sta2_orig_column]);
                                string side_temp = Convert.ToString(dt_temp_atws.Rows[j][atws_working_side_column]).ToUpper();
                                string handle_temp = Convert.ToString(dt_temp_atws.Rows[j][atws_handle_column]);
                                for (int i = 0; i < dt_atws.Rows.Count; ++i)
                                {
                                    double sta1_orig = Convert.ToDouble(dt_atws.Rows[i][atws_sta1_orig_column]);
                                    double sta2_orig = Convert.ToDouble(dt_atws.Rows[i][atws_sta2_orig_column]);
                                    string side = Convert.ToString(dt_atws.Rows[i][atws_working_side_column]).ToUpper();
                                    if (Math.Round(sta1_orig, 3) == Math.Round(sta1_orig_temp, 3) && Math.Round(sta2_orig, 3) == Math.Round(sta2_orig_temp, 3) && side == side_temp)
                                    {
                                        dt_temp_atws.Rows[j].Delete();
                                        dt_temp_manual_atws.Columns.Remove(handle_temp);
                                        i = dt_atws.Rows.Count;
                                    }
                                }
                            }

                            if (dt_temp_atws.Rows.Count > 0)
                            {
                                for (int i = 0; i < dt_temp_atws.Rows.Count; ++i)
                                {
                                    System.Data.DataRow row1 = dt_atws.NewRow();
                                    for (int j = 0; j < dt_temp_atws.Columns.Count; ++j)
                                    {
                                        row1[j] = dt_temp_atws.Rows[i][j];
                                    }
                                    dt_atws.Rows.InsertAt(row1, dt_atws.Rows.Count);

                                    string handle1 = Convert.ToString(dt_temp_atws.Rows[i][atws_handle_column]);

                                    if (dt_atws_manual == null || dt_atws_manual.Rows.Count == 0)
                                    {
                                        dt_atws_manual = new System.Data.DataTable();
                                    }

                                    if (dt_atws_manual.Columns.Contains(handle1) == false)
                                    {
                                        dt_atws_manual.Columns.Add(handle1, typeof(Point2d));
                                    }
                                    else
                                    {
                                        for (int k = 0; k < dt_atws_manual.Rows.Count; ++k)
                                        {
                                            dt_atws_manual.Rows[k][handle1] = DBNull.Value;
                                        }
                                    }


                                    for (int k = 0; k < dt_temp_manual_atws.Rows.Count; ++k)
                                    {
                                        if (k == dt_atws_manual.Rows.Count)
                                        {
                                            dt_atws_manual.Rows.Add();
                                        }
                                        dt_atws_manual.Rows[k][handle1] = dt_temp_manual_atws.Rows[k][handle1];
                                    }

                                    #region lod atws
                                    if (dt_atws_lod_manual == null || dt_atws_lod_manual.Rows.Count == 0)
                                    {
                                        dt_atws_lod_manual = new System.Data.DataTable();
                                    }

                                    if (dt_atws_lod_manual.Columns.Contains(handle1) == false)
                                    {
                                        dt_atws_lod_manual.Columns.Add(handle1, typeof(Point2d));
                                    }
                                    else
                                    {
                                        for (int k = 0; k < dt_atws_lod_manual.Rows.Count; ++k)
                                        {
                                            dt_atws_lod_manual.Rows[k][handle1] = DBNull.Value;
                                        }
                                    }

                                    for (int k = 0; k < dt_atws_lod_temp.Rows.Count; ++k)
                                    {
                                        if (k == dt_atws_lod_manual.Rows.Count)
                                        {
                                            dt_atws_lod_manual.Rows.Add();
                                        }
                                        dt_atws_lod_manual.Rows[k][handle1] = dt_atws_lod_temp.Rows[k][handle1];
                                    }
                                    #endregion

                                    #region side1
                                    if (dt_atws_side1 == null || dt_atws_side1.Rows.Count == 0)
                                    {
                                        dt_atws_side1 = new System.Data.DataTable();
                                    }

                                    if (dt_atws_side1.Columns.Contains(handle1) == false)
                                    {
                                        dt_atws_side1.Columns.Add(handle1, typeof(Point2d));
                                    }
                                    else
                                    {
                                        for (int k = 0; k < dt_atws_side1.Rows.Count; ++k)
                                        {
                                            dt_atws_side1.Rows[k][handle1] = DBNull.Value;
                                        }
                                    }


                                    for (int k = 0; k < dt_atws_side1_temp.Rows.Count; ++k)
                                    {
                                        if (k == dt_atws_side1.Rows.Count)
                                        {
                                            dt_atws_side1.Rows.Add();
                                        }
                                        dt_atws_side1.Rows[k][handle1] = dt_atws_side1_temp.Rows[k][handle1];
                                    }
                                    #endregion


                                    #region side2
                                    if (dt_atws_side2 == null || dt_atws_side2.Rows.Count == 0)
                                    {
                                        dt_atws_side2 = new System.Data.DataTable();
                                    }

                                    if (dt_atws_side2.Columns.Contains(handle1) == false)
                                    {
                                        dt_atws_side2.Columns.Add(handle1, typeof(Point2d));
                                    }
                                    else
                                    {
                                        for (int k = 0; k < dt_atws_side2.Rows.Count; ++k)
                                        {
                                            dt_atws_side2.Rows[k][handle1] = DBNull.Value;
                                        }
                                    }


                                    for (int k = 0; k < dt_atws_side2_temp.Rows.Count; ++k)
                                    {
                                        if (k == dt_atws_side2.Rows.Count)
                                        {
                                            dt_atws_side2.Rows.Add();
                                        }
                                        dt_atws_side2.Rows[k][handle1] = dt_atws_side2_temp.Rows[k][handle1];
                                    }
                                    #endregion
                                }
                            }
                        }
                    }
                    #endregion


                    delete_columns_not_found_in_dt_atws();



                    if (dt_atws_manual != null && dt_atws_manual.Rows.Count > 0 && dt_atws != null && dt_atws.Rows.Count > 0)
                    {
                        Functions.Creaza_layer(atws_layer, 3, true);
                        List<string> lista_handles = new List<string>();
                        #region draft atws 
                        for (int j = 0; j < dt_atws_manual.Columns.Count; ++j)
                        {
                            string handle1 = dt_atws_manual.Columns[j].ColumnName;
                            if (lista_handles.Contains(handle1) == false)
                            {
                                lista_handles.Add(handle1);



                                string justif1 = "";
                                string side1 = "LEFT";
                                int index_atws = -1;
                                string new_name = "xox";

                                for (int i = 0; i < dt_atws.Rows.Count; ++i)
                                {
                                    if (dt_atws.Rows[i][atws_handle0_column] != DBNull.Value &&
                                        dt_atws.Rows[i][atws_justification_column] != DBNull.Value &&
                                        dt_atws.Rows[i][atws_working_side_column] != DBNull.Value)
                                    {
                                        if (Convert.ToString(dt_atws.Rows[i][atws_handle0_column]) == handle1)
                                        {
                                            justif1 = Convert.ToString(dt_atws.Rows[i][atws_justification_column]);
                                            side1 = Convert.ToString(dt_atws.Rows[i][atws_working_side_column]);
                                            index_atws = i;
                                            i = dt_atws.Rows.Count;
                                        }
                                    }
                                }

                                Point2dCollection col_pt_manual = new Point2dCollection();
                                for (int i = 0; i < dt_atws_manual.Rows.Count; ++i)
                                {
                                    if (dt_atws_manual.Rows[i][j] != DBNull.Value)
                                    {
                                        col_pt_manual.Add((Point2d)dt_atws_manual.Rows[i][j]);
                                    }
                                }

                                if (col_pt_manual.Count > 0)
                                {
                                    Polyline poly_manual_atws = new Polyline();

                                    for (int k = 0; k < col_pt_manual.Count; ++k)
                                    {
                                        poly_manual_atws.AddVertexAt(k, col_pt_manual[k], 0, 0, 0);
                                    }

                                    bool split_poly = false;

                                    if (splitl1 != null && splitl1.Length > 0)
                                    {
                                        if (side1 == "LEFT")
                                        {
                                            System.Data.DataTable dt_param = new System.Data.DataTable();
                                            dt_param.Columns.Add("a", typeof(double));
                                            dt_param.Columns.Add("b", typeof(double));
                                            dt_param.Columns.Add("c", typeof(double));
                                            dt_param.Columns.Add("d", typeof(double));
                                            dt_param.Columns.Add("e", typeof(Polyline));
                                            dt_param.Columns.Add("f", typeof(Polyline));

                                            for (int i = 0; i < splitl1.Length; ++i)
                                            {
                                                Polyline split1 = splitl1[i];
                                                Polyline split2 = splitl2[i];
                                                Point3dCollection col1 = Functions.Intersect_on_both_operands(split1, poly_manual_atws);
                                                Point3dCollection col2 = Functions.Intersect_on_both_operands(split2, poly_manual_atws);

                                                if (col1.Count == 2 && col2.Count == 2)
                                                {
                                                    split_poly = true;

                                                    double par11 = poly_manual_atws.GetParameterAtPoint(col1[0]);
                                                    double par12 = poly_manual_atws.GetParameterAtPoint(col1[1]);

                                                    if (par11 > par12)
                                                    {
                                                        double t = par11;
                                                        par11 = par12;
                                                        par12 = t;
                                                    }

                                                    dt_param.Rows.Add();
                                                    dt_param.Rows[dt_param.Rows.Count - 1][0] = par11;
                                                    dt_param.Rows[dt_param.Rows.Count - 1][1] = par12;

                                                    double par21 = poly_manual_atws.GetParameterAtPoint(col2[0]);
                                                    double par22 = poly_manual_atws.GetParameterAtPoint(col2[1]);

                                                    if (par21 > par22)
                                                    {
                                                        double t = par21;
                                                        par21 = par22;
                                                        par22 = t;
                                                    }

                                                    dt_param.Rows[dt_param.Rows.Count - 1][2] = par21;
                                                    dt_param.Rows[dt_param.Rows.Count - 1][3] = par22;

                                                    double par31 = split1.GetParameterAtPoint(col1[0]);
                                                    double par32 = split1.GetParameterAtPoint(col1[1]);

                                                    if (par31 > par32)
                                                    {
                                                        double t = par31;
                                                        par31 = par32;
                                                        par32 = t;
                                                    }
                                                    Polyline ar1 = get_part_of_poly(split1, par31, par32);
                                                    dt_param.Rows[dt_param.Rows.Count - 1][4] = ar1;

                                                    double par41 = split2.GetParameterAtPoint(col2[0]);
                                                    double par42 = split2.GetParameterAtPoint(col2[1]);

                                                    if (par41 > par42)
                                                    {
                                                        double t = par41;
                                                        par41 = par42;
                                                        par42 = t;
                                                    }

                                                    Polyline ar2 = get_part_of_poly(split2, par41, par42);
                                                    dt_param.Rows[dt_param.Rows.Count - 1][5] = ar2;
                                                }
                                            }
                                            if (split_poly == true)
                                            {


                                                dt_param = Functions.Sort_data_table(dt_param, "a");
                                                int number_of_poly = dt_param.Rows.Count;

                                                double p_start = 0;
                                                double p_end = poly_manual_atws.EndParam;
                                                Polyline pside2 = new Polyline();

                                                for (int i = 0; i < dt_param.Rows.Count; ++i)
                                                {
                                                    double pa = Convert.ToDouble(dt_param.Rows[i][0]);
                                                    double pz = Convert.ToDouble(dt_param.Rows[i][1]);

                                                    Polyline top1 = get_part_of_poly(poly_manual_atws, p_start, pa);
                                                    Polyline pside1 = (Polyline)dt_param.Rows[i][4];
                                                    Polyline bott1 = get_part_of_poly(poly_manual_atws, pz, p_end);


                                                    p_start = Convert.ToDouble(dt_param.Rows[i][2]);
                                                    p_end = Convert.ToDouble(dt_param.Rows[i][3]);


                                                    Polyline poly_atws_left_split = new Polyline();
                                                    int q = 0;
                                                    for (int k = 0; k < top1.NumberOfVertices; ++k)
                                                    {
                                                        poly_atws_left_split.AddVertexAt(q, top1.GetPoint2dAt(k), 0, 0, 0);
                                                        ++q;
                                                    }
                                                    for (int k = 1; k < pside1.NumberOfVertices - 1; ++k)
                                                    {
                                                        poly_atws_left_split.AddVertexAt(q, pside1.GetPoint2dAt(k), 0, 0, 0);
                                                        ++q;
                                                    }

                                                    for (int k = 0; k < bott1.NumberOfVertices; ++k)
                                                    {
                                                        poly_atws_left_split.AddVertexAt(q, bott1.GetPoint2dAt(k), 0, 0, 0);
                                                        ++q;
                                                    }
                                                    if (i > 0)
                                                    {
                                                        for (int k = pside2.NumberOfVertices - 2; k >= 1; --k)
                                                        {
                                                            poly_atws_left_split.AddVertexAt(q, pside2.GetPoint2dAt(k), 0, 0, 0);
                                                            ++q;
                                                        }
                                                    }

                                                    poly_atws_left_split.Closed = true;
                                                    poly_atws_left_split.Layer = atws_layer;
                                                    poly_atws_left_split.Closed = true;
                                                    BTrecord.AppendEntity(poly_atws_left_split);
                                                    Trans1.AddNewlyCreatedDBObject(poly_atws_left_split, true);

                                                    dt_erase.Rows.Add();
                                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_atws_left_split.ObjectId;
                                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;


                                                    lista_od_atws_justif.Add(justif1);
                                                    lista_od_atws_object_id.Add(poly_atws_left_split.ObjectId);

                                                    if (i == 0)
                                                    {
                                                        dt_atws.Rows[index_atws][atws_handle_column] = poly_atws_left_split.ObjectId.Handle.Value.ToString();
                                                    }
                                                    else
                                                    {
                                                        System.Data.DataRow row1 = dt_atws.NewRow();
                                                        for (int k = 0; k < dt_atws.Columns.Count; ++k)
                                                        {
                                                            row1[k] = dt_atws.Rows[index_atws][k];
                                                        }
                                                        row1[atws_handle_column] = poly_atws_left_split.ObjectId.Handle.Value.ToString();
                                                        dt_atws.Rows.InsertAt(row1, index_atws + 1 + i);
                                                    }

                                                    pside2 = (Polyline)dt_param.Rows[i][5];


                                                }

                                                Polyline top2 = get_part_of_poly(poly_manual_atws, p_start, p_end);


                                                Polyline poly_atws_left_split2 = new Polyline();
                                                int s = 0;
                                                for (int k = 0; k < top2.NumberOfVertices; ++k)
                                                {
                                                    poly_atws_left_split2.AddVertexAt(s, top2.GetPoint2dAt(k), 0, 0, 0);
                                                    ++s;
                                                }
                                                for (int k = pside2.NumberOfVertices - 2; k >= 1; --k)
                                                {
                                                    poly_atws_left_split2.AddVertexAt(s, pside2.GetPoint2dAt(k), 0, 0, 0);
                                                    ++s;
                                                }

                                                poly_atws_left_split2.Closed = true;

                                                poly_atws_left_split2.Layer = atws_layer;
                                                poly_atws_left_split2.Closed = true;
                                                BTrecord.AppendEntity(poly_atws_left_split2);
                                                Trans1.AddNewlyCreatedDBObject(poly_atws_left_split2, true);

                                                dt_erase.Rows.Add();
                                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_atws_left_split2.ObjectId;
                                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;

                                                lista_od_atws_justif.Add(justif1);
                                                lista_od_atws_object_id.Add(poly_atws_left_split2.ObjectId);

                                                System.Data.DataRow row2 = dt_atws.NewRow();
                                                for (int k = 0; k < dt_atws.Columns.Count; ++k)
                                                {
                                                    row2[k] = dt_atws.Rows[index_atws][k];
                                                }
                                                row2[atws_handle_column] = poly_atws_left_split2.ObjectId.Handle.Value.ToString();
                                                dt_atws.Rows.InsertAt(row2, index_atws + dt_param.Rows.Count);
                                            }
                                        }

                                    }

                                    if (splitr1 != null && splitr1.Length > 0)
                                    {

                                        if (side1 == "RIGHT")
                                        {

                                            System.Data.DataTable dt_param = new System.Data.DataTable();
                                            dt_param.Columns.Add("a", typeof(double));
                                            dt_param.Columns.Add("b", typeof(double));
                                            dt_param.Columns.Add("c", typeof(double));
                                            dt_param.Columns.Add("d", typeof(double));
                                            dt_param.Columns.Add("e", typeof(Polyline));
                                            dt_param.Columns.Add("f", typeof(Polyline));

                                            for (int i = 0; i < splitr1.Length; ++i)
                                            {
                                                //aici;
                                                Polyline split2 = splitr1[i];
                                                Polyline split1 = splitr2[i];
                                                //publish_poly(split1, 1);
                                                //publish_poly(split2, 2);
                                                Point3dCollection col1 = Functions.Intersect_on_both_operands(split1, poly_manual_atws);
                                                Point3dCollection col2 = Functions.Intersect_on_both_operands(split2, poly_manual_atws);

                                                if (col1.Count == 2 && col2.Count == 2)
                                                {
                                                    split_poly = true;

                                                    double par11 = poly_manual_atws.GetParameterAtPoint(col1[0]);
                                                    double par12 = poly_manual_atws.GetParameterAtPoint(col1[1]);

                                                    if (par11 > par12)
                                                    {
                                                        double t = par11;
                                                        par11 = par12;
                                                        par12 = t;
                                                    }

                                                    dt_param.Rows.Add();
                                                    dt_param.Rows[dt_param.Rows.Count - 1][0] = par11;
                                                    dt_param.Rows[dt_param.Rows.Count - 1][1] = par12;

                                                    double par21 = poly_manual_atws.GetParameterAtPoint(col2[0]);
                                                    double par22 = poly_manual_atws.GetParameterAtPoint(col2[1]);

                                                    if (par21 > par22)
                                                    {
                                                        double t = par21;
                                                        par21 = par22;
                                                        par22 = t;
                                                    }

                                                    dt_param.Rows[dt_param.Rows.Count - 1][2] = par21;
                                                    dt_param.Rows[dt_param.Rows.Count - 1][3] = par22;

                                                    double par31 = split1.GetParameterAtPoint(col1[0]);
                                                    double par32 = split1.GetParameterAtPoint(col1[1]);

                                                    if (par31 > par32)
                                                    {
                                                        double t = par31;
                                                        par31 = par32;
                                                        par32 = t;
                                                    }
                                                    Polyline ar1 = get_part_of_poly(split1, par31, par32);
                                                    dt_param.Rows[dt_param.Rows.Count - 1][4] = ar1;

                                                    double par41 = split2.GetParameterAtPoint(col2[0]);
                                                    double par42 = split2.GetParameterAtPoint(col2[1]);

                                                    if (par41 > par42)
                                                    {
                                                        double t = par41;
                                                        par41 = par42;
                                                        par42 = t;
                                                    }

                                                    Polyline ar2 = get_part_of_poly(split2, par41, par42);
                                                    dt_param.Rows[dt_param.Rows.Count - 1][5] = ar2;



                                                }
                                            }

                                            if (split_poly == true)
                                            {

                                                dt_param = Functions.Sort_data_table(dt_param, "a");
                                                int number_of_poly = dt_param.Rows.Count;

                                                double p_start = 0;
                                                double p_end = poly_manual_atws.EndParam;
                                                Polyline pside2 = new Polyline();

                                                for (int i = 0; i < dt_param.Rows.Count; ++i)
                                                {
                                                    double pa = Convert.ToDouble(dt_param.Rows[i][0]);
                                                    double pz = Convert.ToDouble(dt_param.Rows[i][1]);

                                                    Polyline top1 = get_part_of_poly(poly_manual_atws, p_start, pa);
                                                    Polyline pside1 = (Polyline)dt_param.Rows[i][4];
                                                    Polyline bott1 = get_part_of_poly(poly_manual_atws, pz, p_end);


                                                    p_start = Convert.ToDouble(dt_param.Rows[i][2]);
                                                    p_end = Convert.ToDouble(dt_param.Rows[i][3]);


                                                    Polyline poly_atws_right_split = new Polyline();
                                                    int q = 0;
                                                    for (int k = 0; k < top1.NumberOfVertices; ++k)
                                                    {
                                                        poly_atws_right_split.AddVertexAt(q, top1.GetPoint2dAt(k), 0, 0, 0);
                                                        ++q;
                                                    }
                                                    for (int k = 1; k < pside1.NumberOfVertices - 1; ++k)
                                                    {
                                                        poly_atws_right_split.AddVertexAt(q, pside1.GetPoint2dAt(k), 0, 0, 0);
                                                        ++q;
                                                    }

                                                    for (int k = 0; k < bott1.NumberOfVertices; ++k)
                                                    {
                                                        poly_atws_right_split.AddVertexAt(q, bott1.GetPoint2dAt(k), 0, 0, 0);
                                                        ++q;
                                                    }
                                                    if (i > 0)
                                                    {
                                                        for (int k = pside2.NumberOfVertices - 2; k >= 1; --k)
                                                        {
                                                            poly_atws_right_split.AddVertexAt(q, pside2.GetPoint2dAt(k), 0, 0, 0);
                                                            ++q;
                                                        }
                                                    }

                                                    poly_atws_right_split.Closed = true;
                                                    poly_atws_right_split.Layer = atws_layer;
                                                    poly_atws_right_split.Closed = true;
                                                    BTrecord.AppendEntity(poly_atws_right_split);
                                                    Trans1.AddNewlyCreatedDBObject(poly_atws_right_split, true);

                                                    dt_erase.Rows.Add();
                                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_atws_right_split.ObjectId;
                                                    dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;


                                                    lista_od_atws_justif.Add(justif1);
                                                    lista_od_atws_object_id.Add(poly_atws_right_split.ObjectId);


                                                    if (i == 0)
                                                    {
                                                        dt_atws.Rows[index_atws][atws_handle_column] = poly_atws_right_split.ObjectId.Handle.Value.ToString();
                                                    }
                                                    else
                                                    {
                                                        System.Data.DataRow row1 = dt_atws.NewRow();
                                                        for (int k = 0; k < dt_atws.Columns.Count; ++k)
                                                        {
                                                            row1[k] = dt_atws.Rows[index_atws][k];
                                                        }
                                                        row1[atws_handle_column] = poly_atws_right_split.ObjectId.Handle.Value.ToString();
                                                        dt_atws.Rows.InsertAt(row1, index_atws + 1 + i);
                                                    }


                                                    pside2 = (Polyline)dt_param.Rows[i][5];
                                                }

                                                Polyline top2 = get_part_of_poly(poly_manual_atws, p_start, p_end);


                                                Polyline poly_atws_right_split2 = new Polyline();
                                                int s = 0;
                                                for (int k = 0; k < top2.NumberOfVertices; ++k)
                                                {
                                                    poly_atws_right_split2.AddVertexAt(s, top2.GetPoint2dAt(k), 0, 0, 0);
                                                    ++s;
                                                }
                                                for (int k = pside2.NumberOfVertices - 2; k >= 1; --k)
                                                {
                                                    poly_atws_right_split2.AddVertexAt(s, pside2.GetPoint2dAt(k), 0, 0, 0);
                                                    ++s;
                                                }

                                                poly_atws_right_split2.Closed = true;

                                                poly_atws_right_split2.Layer = atws_layer;
                                                poly_atws_right_split2.Closed = true;
                                                BTrecord.AppendEntity(poly_atws_right_split2);
                                                Trans1.AddNewlyCreatedDBObject(poly_atws_right_split2, true);

                                                dt_erase.Rows.Add();
                                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_atws_right_split2.ObjectId;
                                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;

                                                lista_od_atws_justif.Add(justif1);
                                                lista_od_atws_object_id.Add(poly_atws_right_split2.ObjectId);

                                                System.Data.DataRow row2 = dt_atws.NewRow();
                                                for (int k = 0; k < dt_atws.Columns.Count; ++k)
                                                {
                                                    row2[k] = dt_atws.Rows[index_atws][k];
                                                }
                                                row2[atws_handle_column] = poly_atws_right_split2.ObjectId.Handle.Value.ToString();
                                                dt_atws.Rows.InsertAt(row2, index_atws + dt_param.Rows.Count);

                                            }
                                        }

                                    }


                                    if (split_poly == false)
                                    {
                                        poly_manual_atws.Layer = atws_layer;
                                        poly_manual_atws.Closed = true;
                                        BTrecord.AppendEntity(poly_manual_atws);
                                        Trans1.AddNewlyCreatedDBObject(poly_manual_atws, true);

                                        dt_erase.Rows.Add();
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_manual_atws.ObjectId;
                                        dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = atws_layer;

                                        lista_od_atws_justif.Add(justif1);
                                        lista_od_atws_object_id.Add(poly_manual_atws.ObjectId);
                                        new_name = poly_manual_atws.ObjectId.Handle.Value.ToString();

                                        if (index_atws >= 0)
                                        {
                                            dt_atws.Rows[index_atws][atws_handle_column] = new_name;
                                            dt_atws.Rows[index_atws][atws_handle0_column] = new_name;
                                        }
                                        if (dt_atws_manual.Columns.Contains(new_name) == false)
                                        {
                                            dt_atws_manual.Columns[j].ColumnName = new_name;
                                        }

                                        if (dt_atws_lod_manual != null)
                                        {
                                            for (int k = 0; k < dt_atws_lod_manual.Columns.Count; ++k)
                                            {
                                                string handle2 = dt_atws_lod_manual.Columns[k].ColumnName;
                                                if (handle1.ToLower() == handle2.ToLower())
                                                {
                                                    dt_atws_lod_manual.Columns[k].ColumnName = new_name;
                                                }
                                            }

                                            for (int k = 0; k < dt_atws_lod_manual.Columns.Count; ++k)
                                            {
                                                string handle2 = dt_atws_lod_manual.Columns[k].ColumnName;
                                                if (handle1.ToLower() == handle2.ToLower())
                                                {
                                                    dt_atws_lod_manual.Columns[k].ColumnName = new_name;
                                                }
                                            }
                                        }

                                        if (dt_atws_side1 != null)
                                        {
                                            for (int k = 0; k < dt_atws_side1.Columns.Count; ++k)
                                            {
                                                string handle2 = dt_atws_side1.Columns[k].ColumnName;
                                                if (handle1.ToLower() == handle2.ToLower())
                                                {
                                                    dt_atws_side1.Columns[k].ColumnName = new_name;
                                                }
                                            }
                                        }

                                        if (dt_atws_side2 != null)
                                        {
                                            for (int k = 0; k < dt_atws_side2.Columns.Count; ++k)
                                            {
                                                string handle2 = dt_atws_side2.Columns[k].ColumnName;
                                                if (handle1.ToLower() == handle2.ToLower())
                                                {
                                                    dt_atws_side2.Columns[k].ColumnName = new_name;
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                        #endregion

                        #region LOD database
                        if (dt_atws != null && dt_atws.Rows.Count > 0)
                        {
                            System.Data.DataTable dt_sorted_right = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                if (Convert.ToString(dt_atws.Rows[i][atws_working_side_column]) == "RIGHT")
                                {
                                    System.Data.DataRow row1 = dt_sorted_right.NewRow();
                                    row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                    dt_sorted_right.Rows.InsertAt(row1, dt_sorted_right.Rows.Count);
                                }
                            }
                            dt_lod_right = build_lod_datatable(dt_sorted_right, dt_lod_right, lod1_right, lod2_right);

                            System.Data.DataTable dt_sorted_left = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                if (Convert.ToString(dt_atws.Rows[i][atws_working_side_column]) == "LEFT")
                                {
                                    System.Data.DataRow row1 = dt_sorted_left.NewRow();
                                    row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                    dt_sorted_left.Rows.InsertAt(row1, dt_sorted_left.Rows.Count);
                                }
                            }
                            dt_lod_left = build_lod_datatable(dt_sorted_left, dt_lod_left, lod1_left, lod2_left);
                        }
                        #endregion
                    }

                    sync_handles_dt_manual_ar();
                    #region dt_manual_access road

                    if (dt_ar_side_left_p != null && dt_ar_side_left_p.Rows.Count > 1)
                    {
                        for (int j = 0; j < dt_ar_side_left_p.Columns.Count; j += 3)
                        {
                            Functions.Creaza_layer(ar_layer, 3, true);
                            Polyline poly_ar_left = new Polyline();
                            int idxx1 = 0;

                            for (int i = 0; i < dt_ar_side_left_p.Rows.Count; ++i)
                            {
                                if (dt_ar_side_left_p.Rows[i][j] != DBNull.Value)
                                {
                                    poly_ar_left.AddVertexAt(idxx1, (Point2d)dt_ar_side_left_p.Rows[i][j], 0, 0, 0);
                                    ++idxx1;
                                }

                            }

                            for (int i = 0; i < dt_ar_side_left_p.Rows.Count; ++i)
                            {
                                if (dt_ar_side_left_p.Rows[i][j + 1] != DBNull.Value)
                                {
                                    poly_ar_left.AddVertexAt(idxx1, (Point2d)dt_ar_side_left_p.Rows[i][j + 1], 0, 0, 0);
                                    ++idxx1;
                                }

                            }


                            string refsta = dt_ar_side_left_p.Columns[j].ColumnName.Replace("a", "");

                            double len1 = Convert.ToDouble(dt_ar_side_left_p.Rows[0][j + 2]);
                            double width1 = Convert.ToDouble(dt_ar_side_left_p.Rows[1][j + 2]);

                            poly_ar_left.Layer = ar_layer;
                            poly_ar_left.Closed = true;
                            BTrecord.AppendEntity(poly_ar_left);
                            Trans1.AddNewlyCreatedDBObject(poly_ar_left, true);


                            dt_erase.Rows.Add();
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_ar_left.ObjectId;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = ar_layer;


                            string handle_ar = poly_ar_left.ObjectId.Handle.Value.ToString();
                            dt_ar_side_left_p.Columns[j].ColumnName = dt_ar_side_left_p.Columns[j].ColumnName.Replace(refsta, handle_ar);
                            dt_ar_side_left_p.Columns[j + 1].ColumnName = dt_ar_side_left_p.Columns[j + 1].ColumnName.Replace(refsta, handle_ar);
                            dt_ar_side_left_p.Columns[j + 2].ColumnName = dt_ar_side_left_p.Columns[j + 2].ColumnName.Replace(refsta, handle_ar);



                            if (dt_ar != null)
                            {
                                for (int i = 0; i < dt_ar.Rows.Count; ++i)
                                {
                                    if (dt_ar.Rows[i][ar_handle_column] != DBNull.Value && dt_ar.Rows[i][ar_type_column] != DBNull.Value)
                                    {
                                        if (Convert.ToString(dt_ar.Rows[i][ar_handle_column]).ToLower() == refsta)
                                        {
                                            dt_ar.Rows[i][ar_handle_column] = handle_ar;
                                        }
                                    }
                                }
                            }

                            if (lista_od_ar_object_id == null) lista_od_ar_object_id = new List<ObjectId>();
                            lista_od_ar_object_id.Add(poly_ar_left.ObjectId);

                            if (lista_od_ar_justif == null) lista_od_ar_justif = new List<string>();
                            lista_od_ar_justif.Add("Permanent");
                        }
                    }

                    if (dt_ar_side_right_p != null && dt_ar_side_right_p.Rows.Count > 1)
                    {
                        for (int j = 0; j < dt_ar_side_right_p.Columns.Count; j += 3)
                        {
                            Functions.Creaza_layer(ar_layer, 3, true);
                            Polyline poly_ar_right = new Polyline();
                            int idxx1 = 0;

                            for (int i = 0; i < dt_ar_side_right_p.Rows.Count; ++i)
                            {
                                if (dt_ar_side_right_p.Rows[i][j] != DBNull.Value)
                                {
                                    poly_ar_right.AddVertexAt(idxx1, (Point2d)dt_ar_side_right_p.Rows[i][j], 0, 0, 0);
                                    ++idxx1;
                                }

                            }

                            for (int i = 0; i < dt_ar_side_right_p.Rows.Count; ++i)
                            {
                                if (dt_ar_side_right_p.Rows[i][j + 1] != DBNull.Value)
                                {
                                    poly_ar_right.AddVertexAt(idxx1, (Point2d)dt_ar_side_right_p.Rows[i][j + 1], 0, 0, 0);
                                    ++idxx1;
                                }

                            }


                            string refsta = dt_ar_side_right_p.Columns[j].ColumnName.Replace("a", "");

                            double len1 = Convert.ToDouble(dt_ar_side_right_p.Rows[0][j + 2]);
                            double width1 = Convert.ToDouble(dt_ar_side_right_p.Rows[1][j + 2]);

                            poly_ar_right.Layer = ar_layer;
                            poly_ar_right.Closed = true;
                            BTrecord.AppendEntity(poly_ar_right);
                            Trans1.AddNewlyCreatedDBObject(poly_ar_right, true);


                            dt_erase.Rows.Add();
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_ar_right.ObjectId;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = ar_layer;

                            string handle_ar = poly_ar_right.ObjectId.Handle.Value.ToString();
                            dt_ar_side_right_p.Columns[j].ColumnName = dt_ar_side_right_p.Columns[j].ColumnName.Replace(refsta, handle_ar);
                            dt_ar_side_right_p.Columns[j + 1].ColumnName = dt_ar_side_right_p.Columns[j + 1].ColumnName.Replace(refsta, handle_ar);
                            dt_ar_side_right_p.Columns[j + 2].ColumnName = dt_ar_side_right_p.Columns[j + 2].ColumnName.Replace(refsta, handle_ar);



                            if (dt_ar != null)
                            {
                                for (int i = 0; i < dt_ar.Rows.Count; ++i)
                                {
                                    if (dt_ar.Rows[i][ar_handle_column] != DBNull.Value && dt_ar.Rows[i][ar_type_column] != DBNull.Value)
                                    {
                                        if (Convert.ToString(dt_ar.Rows[i][ar_handle_column]).ToLower() == refsta)
                                        {
                                            dt_ar.Rows[i][ar_handle_column] = handle_ar;
                                        }
                                    }
                                }
                            }

                            if (lista_od_ar_object_id == null) lista_od_ar_object_id = new List<ObjectId>();
                            lista_od_ar_object_id.Add(poly_ar_right.ObjectId);

                            if (lista_od_ar_justif == null) lista_od_ar_justif = new List<string>();
                            lista_od_ar_justif.Add("Permanent");
                        }
                    }

                    if (dt_ar_temp != null && dt_ar_temp.Rows.Count > 1)
                    {
                        for (int j = 0; j < dt_ar_temp.Columns.Count; j += 3)
                        {
                            Functions.Creaza_layer(ar_layer, 3, true);
                            Polyline poly_ar_temp = new Polyline();
                            int idxx1 = 0;

                            for (int i = 0; i < dt_ar_temp.Rows.Count; ++i)
                            {
                                if (dt_ar_temp.Rows[i][j] != DBNull.Value)
                                {
                                    poly_ar_temp.AddVertexAt(idxx1, (Point2d)dt_ar_temp.Rows[i][j], 0, 0, 0);
                                    ++idxx1;
                                }

                            }

                            for (int i = 0; i < dt_ar_temp.Rows.Count; ++i)
                            {
                                if (dt_ar_temp.Rows[i][j + 1] != DBNull.Value)
                                {
                                    poly_ar_temp.AddVertexAt(idxx1, (Point2d)dt_ar_temp.Rows[i][j + 1], 0, 0, 0);
                                    ++idxx1;
                                }

                            }


                            string refsta = dt_ar_temp.Columns[j].ColumnName.Replace("a", "");

                            double len1 = 0;
                            if (dt_ar_temp.Rows[0][j + 2] != DBNull.Value)
                            {
                                len1 = Convert.ToDouble(dt_ar_temp.Rows[0][j + 2]);
                            }

                            double width1 = 0;
                            if (dt_ar_temp.Rows[1][j + 2] != DBNull.Value)
                            {
                                width1 = Convert.ToDouble(dt_ar_temp.Rows[1][j + 2]);
                            }
                            poly_ar_temp.Layer = ar_layer;
                            poly_ar_temp.Closed = true;
                            BTrecord.AppendEntity(poly_ar_temp);
                            Trans1.AddNewlyCreatedDBObject(poly_ar_temp, true);

                            dt_erase.Rows.Add();
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_ar_temp.ObjectId;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = ar_layer;

                            string handle_ar = poly_ar_temp.ObjectId.Handle.Value.ToString();
                            dt_ar_temp.Columns[j].ColumnName = dt_ar_temp.Columns[j].ColumnName.Replace(refsta, handle_ar);
                            dt_ar_temp.Columns[j + 1].ColumnName = dt_ar_temp.Columns[j + 1].ColumnName.Replace(refsta, handle_ar);
                            dt_ar_temp.Columns[j + 2].ColumnName = dt_ar_temp.Columns[j + 2].ColumnName.Replace(refsta, handle_ar);



                            if (dt_ar != null)
                            {
                                for (int i = 0; i < dt_ar.Rows.Count; ++i)
                                {
                                    if (dt_ar.Rows[i][ar_handle_column] != DBNull.Value && dt_ar.Rows[i][ar_type_column] != DBNull.Value)
                                    {
                                        if (Convert.ToString(dt_ar.Rows[i][ar_handle_column]).ToLower() == refsta)
                                        {
                                            dt_ar.Rows[i][ar_handle_column] = handle_ar;
                                        }
                                    }
                                }
                            }

                            if (lista_od_ar_object_id == null) lista_od_ar_object_id = new List<ObjectId>();
                            lista_od_ar_object_id.Add(poly_ar_temp.ObjectId);

                            if (lista_od_ar_justif == null) lista_od_ar_justif = new List<string>();
                            lista_od_ar_justif.Add("Temporary");
                        }
                    }

                    #endregion

                    sync_handles_dt_manual_stg();
                    #region dt_manual_stg
                    if (dt_manual_stg != null && dt_manual_stg.Rows.Count > 0 && dt_stg != null && dt_stg.Rows.Count > 0)
                    {
                        Functions.Creaza_layer(stg_layer, 3, true);
                        for (int j = 0; j < dt_manual_stg.Columns.Count; ++j)
                        {
                            string handle1 = dt_manual_stg.Columns[j].ColumnName;
                            string justif1 = "";
                            int index_stg = -1;
                            int index_manual_stg = j;
                            for (int i = 0; i < dt_stg.Rows.Count; ++i)
                            {
                                if (dt_stg.Rows[i][stg_handle_column] != DBNull.Value && dt_stg.Rows[i][stg_justification_column] != DBNull.Value)
                                {
                                    if (Convert.ToString(dt_stg.Rows[i][stg_handle_column]).ToLower() == handle1.ToLower())
                                    {
                                        justif1 = Convert.ToString(dt_stg.Rows[i][stg_justification_column]);
                                        index_stg = i;
                                        i = dt_stg.Rows.Count;
                                    }
                                }
                            }

                            Point2dCollection col2 = new Point2dCollection();
                            for (int i = 0; i < dt_manual_stg.Rows.Count; ++i)
                            {
                                if (dt_manual_stg.Rows[i][j] != DBNull.Value)
                                {
                                    col2.Add((Point2d)dt_manual_stg.Rows[i][j]);
                                }
                            }

                            if (col2.Count > 0)
                            {
                                Polyline poly_manual_stg = new Polyline();
                                for (int k = 0; k < col2.Count; ++k)
                                {
                                    poly_manual_stg.AddVertexAt(k, col2[k], 0, 0, 0);
                                }
                                poly_manual_stg.Layer = stg_layer;
                                poly_manual_stg.Closed = true;
                                BTrecord.AppendEntity(poly_manual_stg);
                                Trans1.AddNewlyCreatedDBObject(poly_manual_stg, true);

                                dt_erase.Rows.Add();
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_manual_stg.ObjectId;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = stg_layer;

                                lista_od_stg_justif.Add(justif1);
                                lista_od_stg_object_id.Add(poly_manual_stg.ObjectId);

                                string new_name = poly_manual_stg.ObjectId.Handle.Value.ToString();
                                dt_stg.Rows[index_stg][stg_handle_column] = new_name;
                                if (dt_manual_stg.Columns.Contains(new_name) == false)
                                {
                                    dt_manual_stg.Columns[index_manual_stg].ColumnName = new_name;
                                }
                            }
                        }
                    }
                    #endregion







                    draw_lod_polylines(Trans1, BTrecord);
                    fill_library_comboboxes(dt_library);
                    attach_dt_atws_to_datagridview(dt_atws);
                    ar.attach_dt_ar_to_datagridview(dt_ar, dataGridView_ar_data);

                    attach_dt_stg_to_datagridview(dt_stg);

                    Trans1.Commit();

                    attach_od_to_atws(lista_od_atws_object_id, lista_od_atws_justif);
                    attach_od_to_ar(lista_od_ar_object_id, lista_od_ar_justif, checkBox_use_od, comboBox_ar_od_name, comboBox_ar_od_field);
                    attach_od_to_stg(lista_od_stg_object_id, lista_od_stg_justif);
                    attach_od_to_proposed_perm(lista_od_pp_object_id, lista_od_pp_justif);

                    //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_ar_side_left_p);


                }
            }
            //Editor1.SetImpliedSelection(Empty_array);
            //Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }



        public void attach_od_to_ar(List<ObjectId> lista_od_ar_object_id, List<string> lista_od_ar_justif, System.Windows.Forms.CheckBox checkBox_use_od, ComboBox comboBox_ar_od_name, ComboBox comboBox_ar_od_field)
        {
            if (checkBox_use_od.Checked == false) return;

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
            {
                if (lista_od_ar_object_id.Count > 0)
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;



                    List<string> lista_field_name = Functions.get_object_data_table_field_names(Tables1, comboBox_ar_od_name.Text);

                    if (lista_field_name == null || lista_field_name.Count == 0 || lista_field_name.Contains(comboBox_ar_od_field.Text) == false)
                    {
                        MessageBox.Show("Issue with ATWS data table found in the drawing");
                        return;
                    }

                    List<Autodesk.Gis.Map.Constants.DataType> lista_types = Functions.get_object_data_table_data_types(Tables1, comboBox_ar_od_name.Text);

                    for (int i = 0; i < lista_od_ar_object_id.Count; ++i)
                    {

                        Polyline atws1 = Trans1.GetObject(lista_od_ar_object_id[i], OpenMode.ForWrite) as Polyline;

                        List<object> lista_val = new List<object>();

                        for (int k = 0; k < lista_field_name.Count; ++k)
                        {
                            if (lista_field_name[k] == comboBox_ar_od_field.Text)
                            {
                                if (lista_types[k] == Autodesk.Gis.Map.Constants.DataType.Character)
                                {
                                    lista_val.Add(lista_od_ar_justif[i]);
                                }
                                else
                                {
                                    MessageBox.Show("The Object Data field " + comboBox_ar_od_field.Text + " is not defined as character field.\r\nPlease make sure you selected the correct field.\r\nOperation aborted");
                                    Entity ent1 = Trans1.GetObject(lista_od_ar_object_id[i], OpenMode.ForWrite) as Entity;
                                    ent1.Erase();
                                    Trans1.Commit();
                                    return;
                                }
                            }
                            else
                            {
                                lista_val.Add(null);
                            }
                        }
                        Functions.Populate_object_data_table_from_objectid(lista_od_ar_object_id[i], comboBox_ar_od_name.Text, lista_val, lista_types);
                    }
                }
                Trans1.Commit();
            }
        }

        private System.Data.DataTable sync_corridor_atws_data(System.Data.DataTable dt_temp_atws)
        {
            if (dt_atws_manual != null && dt_atws_manual.Rows.Count > 0 && dt_atws != null && dt_atws.Rows.Count > 0)
            {
                for (int i = dt_atws.Rows.Count - 1; i >= 0; --i)
                {
                    if (dt_atws.Rows[i][atws_source_column] != DBNull.Value &&
                        dt_atws.Rows[i][atws_handle_column] != DBNull.Value &&
                        dt_atws.Rows[i][atws_justification_column] != DBNull.Value &&
                        dt_atws.Rows[i][atws_sta1_orig_column] != DBNull.Value &&
                        dt_atws.Rows[i][atws_sta1_orig_column] != DBNull.Value)
                    {

                        string source1 = Convert.ToString(dt_atws.Rows[i][atws_source_column]);
                        string handle1 = Convert.ToString(dt_atws.Rows[i][atws_handle_column]);
                        string justif1 = Convert.ToString(dt_atws.Rows[i][atws_justification_column]);
                        double sta1 = Math.Round(Convert.ToDouble(dt_atws.Rows[i][atws_sta1_orig_column]), 3);
                        double sta2 = Math.Round(Convert.ToDouble(dt_atws.Rows[i][atws_sta1_orig_column]), 3);


                        bool remove1 = true;
                        if (dt_corridor != null && dt_corridor.Rows.Count > 0)
                        {
                            for (int j = 0; j < dt_corridor.Rows.Count; ++j)
                            {
                                if (dt_corridor.Rows[j][col_corridor_name] != DBNull.Value)
                                {
                                    string nume2 = Convert.ToString(dt_corridor.Rows[j][col_corridor_name]);
                                    if (justif1.ToLower() == nume2.ToLower())
                                    {
                                        if (dt_corridor.Rows[j][tws_modified_column] != DBNull.Value && Convert.ToBoolean(dt_corridor.Rows[j][tws_modified_column]) == true)
                                        {
                                            remove1 = false;

                                            if (dt_temp_atws != null && dt_temp_atws.Rows.Count > 0)
                                            {
                                                for (int k = dt_temp_atws.Rows.Count - 1; k >= 0; --k)
                                                {
                                                    double staT1 = Math.Round(Convert.ToDouble(dt_temp_atws.Rows[k][atws_sta1_column]), 3);
                                                    double staT2 = Math.Round(Convert.ToDouble(dt_temp_atws.Rows[k][atws_sta2_column]), 3);

                                                    if (sta1 == staT1 && staT2 == sta2)
                                                    {
                                                        dt_temp_atws.Rows[k].Delete();
                                                    }
                                                }
                                            }
                                        }
                                        j = dt_corridor.Rows.Count;
                                    }
                                }
                            }
                        }

                        if (remove1 == true && source1 == atws_source_library)
                        {
                            dt_atws.Rows[i].Delete();
                            for (int k = dt_atws_manual.Columns.Count - 1; k >= 0; --k)
                            {
                                if (dt_atws_manual.Columns[k].ColumnName == handle1)
                                {
                                    dt_atws_manual.Columns.RemoveAt(k);
                                }
                            }
                        }
                    }

                }
            }

            return dt_temp_atws;
        }
        private void button_highlight_atws_Click(object sender, EventArgs e)
        {

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            if (dataGridView_atws_data.Rows.Count > 0)
            {
                set_enable_false();

                try
                {
                    Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
                    Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
                    using (Autodesk.AutoCAD.ApplicationServices.DocumentLock Lock1 = ThisDrawing.LockDocument())
                    {
                        using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                        {
                            Autodesk.AutoCAD.DatabaseServices.BlockTable BlockTable_data1 = (BlockTable)ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead);
                            Autodesk.AutoCAD.DatabaseServices.BlockTableRecord BTrecord = (BlockTableRecord)Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForRead);

                            bool ask_for_selection = false;
                            Autodesk.AutoCAD.EditorInput.PromptSelectionResult Rezultat_object = (Autodesk.AutoCAD.EditorInput.PromptSelectionResult)Editor1.SelectImplied();

                            if (Rezultat_object.Status == PromptStatus.OK)
                            {
                                if (Rezultat_object.Value.Count == 0)
                                {
                                    ask_for_selection = true;
                                }
                                if (Rezultat_object.Value.Count > 1)
                                {
                                    MessageBox.Show("There is more than one object selected," + "\r\n" + "the first object in selection will be the one that will be current in table");
                                    ask_for_selection = false;
                                }
                            }
                            else ask_for_selection = true;



                            if (ask_for_selection == true)
                            {
                                this.WindowState = FormWindowState.Minimized;
                                Autodesk.AutoCAD.EditorInput.PromptSelectionOptions Prompt_object = new Autodesk.AutoCAD.EditorInput.PromptSelectionOptions();
                                Prompt_object.MessageForAdding = "\nSelect an ATWS";
                                Prompt_object.SingleOnly = true;
                                Rezultat_object = Editor1.GetSelection(Prompt_object);

                            }


                            if (Rezultat_object.Status != PromptStatus.OK)
                            {
                                this.WindowState = FormWindowState.Normal;

                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }
                            this.WindowState = FormWindowState.Normal;


                            Entity Ent1 = (Entity)Trans1.GetObject(Rezultat_object.Value[0].ObjectId, OpenMode.ForRead);
                            string handle1 = Ent1.ObjectId.Handle.Value.ToString();

                            for (int i = 0; i < dataGridView_atws_data.Rows.Count; ++i)
                            {
                                string handle2 = Convert.ToString(dataGridView_atws_data.Rows[i].Cells[atws_handle_column].Value);
                                if (handle1 == handle2)
                                {
                                    dataGridView_atws_data.CurrentCell = dataGridView_atws_data.Rows[i].Cells[0];
                                    i = dataGridView_atws_data.Rows.Count;
                                }
                            }


                            Trans1.Commit();
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }

            set_enable_true();


        }
        private void radioButton_justif_custom_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton_justif_custom.Checked == true)
            {
                comboBox_atws_justif.SelectedIndex = 0;
                comboBox_atws_justif.Visible = false;
                textBox_atws_justification.Visible = true;
                button_atws_add_justif_preset.Visible = false;
            }
            else
            {
                comboBox_atws_justif.SelectedIndex = 0;
                comboBox_atws_justif.Visible = true;
                textBox_atws_justification.Visible = false;
                button_atws_add_justif_preset.Visible = true;

            }
        }
        private void button_atws_add_dim_preset_Click(object sender, EventArgs e)
        {
            set_enable_false();
            string preset1 = "";
            if (InputBox("Add a new dimension preset", "New preset:", ref preset1) == DialogResult.OK)
            {
                preset1 = preset1.ToLower().Replace("-", "").Replace("+", "").Replace(" ", "");
                if (preset1.Length > 2 && preset1.Contains("x") == true && Functions.IsNumeric(preset1.Replace("x", "")) == true)
                {
                    string letter1 = preset1.Substring(0, 1);
                    string letter2 = preset1.Substring(preset1.Length - 1, 1);
                    if (Functions.IsNumeric(letter1) == true && Functions.IsNumeric(letter2) == true)
                    {
                        comboBox_atws_preset.Items.Add(preset1);
                    }

                }
            }
            set_enable_true();
        }




        public DialogResult InputBox(string title, string promptText, ref string value)
        {
            inputbox1 = new Form();
            System.Windows.Forms.Label label1 = new System.Windows.Forms.Label();
            System.Windows.Forms.Label label2 = new System.Windows.Forms.Label();
            System.Windows.Forms.TextBox textBox1 = new System.Windows.Forms.TextBox();
            System.Windows.Forms.Button buttonOk1 = new System.Windows.Forms.Button();
            System.Windows.Forms.Button buttonCancel1 = new System.Windows.Forms.Button();
            System.Windows.Forms.Panel Panel1 = new System.Windows.Forms.Panel();
            System.Windows.Forms.Button buttonExit = new System.Windows.Forms.Button();




            label1.Text = promptText;
            System.Drawing.Font Font1 = new System.Drawing.Font("Arial", 8.25f, FontStyle.Bold);
            label1.Font = Font1;
            label1.ForeColor = Color.White;
            label1.SetBounds(9, 30, 372, 13);
            label1.AutoSize = true;




            label2.Text = title;
            System.Drawing.Font Font2 = new System.Drawing.Font("Arial Narrow", 10f, FontStyle.Bold);
            label2.Font = Font2;
            label2.ForeColor = Color.White;
            label2.SetBounds(2, 3, 100, 13);
            label2.AutoSize = true;
            label2.MouseDown += new MouseEventHandler(clickmove_MouseDown1);
            label2.MouseMove += new MouseEventHandler(clickmove_MouseMove1);
            label2.MouseUp += new MouseEventHandler(clickmove_MouseUp1);


            buttonOk1.Text = "OK";
            buttonCancel1.Text = "Cancel";
            buttonOk1.DialogResult = DialogResult.OK;
            buttonCancel1.DialogResult = DialogResult.Cancel;
            buttonOk1.ForeColor = Color.White;
            buttonCancel1.ForeColor = Color.White;

            buttonExit.BackgroundImage = ((System.Drawing.Image)(Properties.Resources.close));
            buttonExit.BackgroundImageLayout = ImageLayout.Stretch;
            buttonExit.SetBounds(277, 3, 20, 20);
            buttonExit.Click += new EventHandler(button_close_Click);

            Color PanelRgbColor = new Color();
            PanelRgbColor = Color.FromArgb(0, 122, 204);
            Panel1.BackColor = PanelRgbColor;
            Panel1.SetBounds(0, 0, 396, 25);
            Panel1.BorderStyle = BorderStyle.None;
            Panel1.Controls.AddRange(new Control[] { buttonExit, label2 });
            Panel1.MouseDown += new MouseEventHandler(clickmove_MouseDown1);
            Panel1.MouseMove += new MouseEventHandler(clickmove_MouseMove1);
            Panel1.MouseUp += new MouseEventHandler(clickmove_MouseUp1);


            textBox1.Text = value;
            textBox1.SetBounds(12, 48, 372, 20);
            textBox1.Anchor = textBox1.Anchor | AnchorStyles.Right;


            buttonOk1.SetBounds(228, 72, 75, 23);
            buttonCancel1.SetBounds(309, 72, 75, 23);



            buttonOk1.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonCancel1.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;

            Color color1 = new Color();
            color1 = Color.FromArgb(37, 37, 38);
            inputbox1.BackColor = color1;
            inputbox1.Text = title;
            inputbox1.ClientSize = new Size(396, 105);
            inputbox1.Controls.AddRange(new Control[] { label1, textBox1, buttonOk1, buttonCancel1, Panel1 });
            inputbox1.ClientSize = new Size(Math.Max(300, label1.Right + 10), inputbox1.ClientSize.Height);
            inputbox1.FormBorderStyle = FormBorderStyle.None;
            inputbox1.StartPosition = FormStartPosition.CenterScreen;
            inputbox1.MinimizeBox = false;
            inputbox1.MaximizeBox = false;
            inputbox1.AcceptButton = buttonOk1;
            inputbox1.CancelButton = buttonCancel1;



            DialogResult dialogResult = inputbox1.ShowDialog();
            value = textBox1.Text;
            return dialogResult;

        }
        private void button_close_Click(object sender, EventArgs e)
        {
            inputbox1.Close();
        }

        private void clickmove_MouseDown1(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            clickdragdown1 = true;
            lastLocation1 = e.Location;
        }

        private void clickmove_MouseMove1(object sender, MouseEventArgs e)
        {
            if (clickdragdown1)
            {
                inputbox1.Location = new System.Drawing.Point(
                  (inputbox1.Location.X - lastLocation1.X) + e.X, (inputbox1.Location.Y - lastLocation1.Y) + e.Y);

                inputbox1.Update();
            }
        }

        private void clickmove_MouseUp1(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            clickdragdown1 = false;
        }


        private void button_atws_add_justif_preset_Click(object sender, EventArgs e)
        {
            set_enable_false();
            string preset1 = "";
            if (InputBox("Add a new justification preset", "New preset:", ref preset1) == DialogResult.OK)
            {
                if (preset1.Length > 0)
                {
                    comboBox_atws_justif.Items.Add(preset1);
                }
            }
            set_enable_true();
        }
        private void textBox_atws_width_TextChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.TextBox tt1 = sender as System.Windows.Forms.TextBox;
            string existing_text = tt1.Text;
            if (existing_text == "dan")
            {
                MessageBox.Show("hello world");
            }
        }
        private void button_corridor_to_feature_Click(object sender, EventArgs e)
        {

            if (dt_cl == null || dt_cl.Rows.Count == 0)
            {
                MessageBox.Show("no centerline");
                return;
            }
            if (dt_corridor == null || dt_corridor.Rows.Count == 0)
            {
                MessageBox.Show("no tws table");
                return;
            }

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        Polyline polyCL = new Polyline();
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                        }


                        this.WindowState = FormWindowState.Minimized;
                        Point3d pt1 = get_feature_intersection_point(Trans1, polyCL);

                        if (pt1 == new Point3d(-1.234, -1.234, 0))
                        {
                            MessageBox.Show("the feature does not intersect the centerline");
                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            return;
                        }

                        double sta_feat = polyCL.GetDistAtPoint(pt1);


                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res1;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                        PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify a point inside the corridor you want to extend or shrink:");
                        PP1.AllowNone = false;
                        Point_res1 = Editor1.GetPoint(PP1);

                        if (Point_res1.Status != PromptStatus.OK)
                        {

                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            return;
                        }
                        Functions.keep_the_view_at_pickpoint();

                        double sta_m = polyCL.GetDistAtPoint(polyCL.GetClosestPointTo(Point_res1.Value, Vector3d.ZAxis, false));


                        for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                        {
                            if (dt_corridor.Rows[i][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta1_column])) == true &&
                                    dt_corridor.Rows[i][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta2_column])) == true &&
                                     dt_corridor.Rows[i][col_corridor_name] != DBNull.Value)
                            {
                                double sta_start = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                double sta_end = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                if (sta_m >= sta_start && sta_m <= sta_end)
                                {

                                    double dif1 = Math.Abs(sta_start - sta_m);
                                    double dif2 = Math.Abs(sta_end - sta_m);
                                    double sta1 = -1;
                                    double sta2 = -1;

                                    if (sta_feat > sta_start && sta_feat > sta_end)
                                    {
                                        sta1 = sta_start;
                                        sta2 = sta_feat;

                                        // i don't need to deal with overlaps because draw will deal with them
                                    }
                                    else if (sta_feat < sta_start)
                                    {
                                        sta1 = sta_feat;
                                        sta2 = sta_end;
                                        // i don't need to deal with overlaps because draw will deal with them
                                    }
                                    else if (sta_feat > sta_start && sta2 < sta_start)
                                    {
                                        if (dif2 < dif1)
                                        {
                                            sta1 = sta_start;
                                            sta2 = sta_feat;
                                            // update end station at next
                                            update_tws(sta_end, sta2);
                                        }
                                        else
                                        {
                                            sta1 = sta_feat;
                                            sta2 = sta_end;
                                            // update start station at previous
                                            update_tws(sta_start, sta1);
                                        }

                                    }

                                    if (sta1 >= polyCL.Length)
                                    {
                                        sta1 = Math.Floor(100 * polyCL.Length) / 100;
                                    }

                                    if (sta2 >= polyCL.Length)
                                    {
                                        sta2 = Math.Floor(100 * polyCL.Length) / 100;
                                    }

                                    if (sta1 > sta2)
                                    {
                                        double t = sta1;
                                        sta1 = sta2;
                                        sta2 = t;
                                    }

                                    //corr_sta_start = sta1;
                                    //corr_sta_end = sta2;
                                    comboBox_current_ws.Text = Convert.ToString(dt_corridor.Rows[i][col_corridor_name]);

                                    i = dt_corridor.Rows.Count;
                                }
                            }
                        }
                        Trans1.Commit();
                    }
                }
                button_draw_Click(sender, e);
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            this.WindowState = FormWindowState.Normal;
            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }
        private void update_tws(double sta_old_position, double sta_new)
        {

            for (int i = 0; i < dt_corridor.Rows.Count; ++i)
            {
                if (dt_corridor.Rows[i][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta1_column])) == true &&
                    dt_corridor.Rows[i][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta2_column])) == true)
                {
                    double sta_start = Math.Round(Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]), 2);

                    if (Math.Round(sta_old_position, 2) == sta_start)
                    {
                        dt_corridor.Rows[i][tws_sta1_column] = sta_new;
                    }

                    double sta_end = Math.Round(Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]), 2);

                    if (Math.Round(sta_old_position, 2) == sta_end)
                    {
                        dt_corridor.Rows[i][tws_sta2_column] = sta_new;
                    }
                }
            }
        }
        private void delete_atws(double sta1, double sta2)
        {
            if (dt_atws != null && dt_atws.Rows.Count > 0)
            {
                sta1 = Math.Round(sta1, 2);
                sta2 = Math.Round(sta2, 2);
                for (int j = dt_atws.Rows.Count - 1; j >= 0; --j)
                {
                    if (dt_atws.Rows[j][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[j][atws_sta1_column])) == true &&
                            dt_atws.Rows[j][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[j][atws_sta2_column])) == true)
                    {
                        double sta_atws1 = Math.Round(Convert.ToDouble(dt_atws.Rows[j][atws_sta1_column]), 2);
                        double sta_atws2 = Math.Round(Convert.ToDouble(dt_atws.Rows[j][atws_sta2_column]), 2);

                        if ((sta_atws1 == sta1 && sta2 == sta_atws2) || (sta_atws1 < sta1 && sta_atws2 > sta1 && sta2 >= sta_atws2) || (sta_atws1 < sta1 && sta_atws2 > sta2) ||
                            (sta_atws1 >= sta1 && sta_atws2 >= sta2 && sta_atws1 < sta2) || (sta_atws1 >= sta1 && sta_atws2 <= sta2 && sta_atws1 < sta2))
                        {
                            dt_atws.Rows[j].Delete();
                        }


                    }
                }
            }
        }
        private void button_stationing_Click(object sender, EventArgs e)
        {
            double spacing_major = 100;
            double spacing_minor = 50;
            double tick_major = 8;
            double tick_minor = 4;
            double texth = 8;
            double gap1 = texth;
            double start1 = 0;
            set_enable_false();
            if (dt_cl != null && dt_cl.Rows.Count > 0)
            {
                try
                {

                    Functions.Creaza_layer(layer_stationing, 2, true);
                    Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                    Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
                    Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
                    using (Autodesk.AutoCAD.ApplicationServices.DocumentLock Lock1 = ThisDrawing.LockDocument())
                    {

                        using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                        {
                            Autodesk.AutoCAD.DatabaseServices.BlockTable BlockTable_data1 = (BlockTable)ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead);
                            Autodesk.AutoCAD.DatabaseServices.BlockTableRecord BTrecord = (BlockTableRecord)Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForWrite);

                            #region poly_dtcl
                            Polyline poly_cl = new Polyline();
                            for (int k = 0; k < dt_cl.Rows.Count; ++k)
                            {
                                if (dt_cl.Rows[k][0] == DBNull.Value || dt_cl.Rows[k][1] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_cl.Rows[k][1])) == false)
                                {
                                    MessageBox.Show("issues found on centerline data\r\noperation aborted");
                                    set_enable_true();
                                    return;
                                }
                                poly_cl.AddVertexAt(k, (Point2d)dt_cl.Rows[k][0], 0, 0, 0);
                            }
                            poly_cl.Elevation = 0;
                            #endregion
                            delete_existing_stationing();

                            create_stationing(poly_cl, start1, gap1, texth, spacing_major, spacing_minor, tick_major, tick_minor);
                            add_zero_plus_zero_zero_stationing(poly_cl, 0, gap1, texth, tick_major, 0);
                            add_last_stationing(poly_cl, poly_cl.Length - 0.000001, gap1, texth, tick_major, 0);



                            Trans1.Commit();
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }


                set_enable_true();
            }

        }
        private void create_stationing(Polyline Poly2D, double start1, double gap1, double texth, double spacing_major, double spacing_minor, double tick_major, double tick_minor)
        {
            try
            {
                Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.AutoCAD.DatabaseServices.BlockTable BlockTable_data1 = (BlockTable)ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead);
                    Autodesk.AutoCAD.DatabaseServices.BlockTableRecord BTrecord = (BlockTableRecord)Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForWrite);


                    #region object data stationing

                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;



                    #endregion

                    int lr = 1;
                    double extra_rot = 0;

                    double first_label_major = Math.Floor((start1 + spacing_major) / spacing_major) * spacing_major;

                    if (start1 + Poly2D.Length >= first_label_major)
                    {
                        int no_major = Convert.ToInt32(Math.Ceiling((start1 + Poly2D.Length - first_label_major) / spacing_major));

                        if (no_major > 0)
                        {
                            for (int i = 0; i < no_major; ++i)
                            {
                                Point3d pt0 = Poly2D.GetPointAtDist((first_label_major - start1) + i * spacing_major);


                                double label_major = first_label_major + i * spacing_major;
                                Autodesk.AutoCAD.DatabaseServices.Line Big1 = new Autodesk.AutoCAD.DatabaseServices.Line(new Point3d(pt0.X - tick_major / 2, pt0.Y, 0), new Point3d(pt0.X + tick_major / 2, pt0.Y, 0));

                                double param1 = Poly2D.GetParameterAtPoint(Poly2D.GetClosestPointTo(pt0, Vector3d.ZAxis, false));
                                double param2 = param1 + 1;
                                if (Poly2D.EndParam < param2)
                                {
                                    param1 = Poly2D.EndParam - 1;
                                    param2 = Poly2D.EndParam;
                                }

                                Point3d point1 = Poly2D.GetPointAtParameter(Math.Floor(param1));

                                Point3d point2 = Poly2D.GetPointAtParameter(Math.Floor(param2));

                                double bear1 = Functions.GET_Bearing_rad(point1.X, point1.Y, point2.X, point2.Y);

                                double rot1 = bear1 - lr * Math.PI / 2;

                                Big1.TransformBy(Matrix3d.Rotation(rot1, Vector3d.ZAxis, pt0));

                                Big1.Layer = layer_stationing;
                                Big1.ColorIndex = 256;


                                BTrecord.AppendEntity(Big1);
                                Trans1.AddNewlyCreatedDBObject(Big1, true);


                                Autodesk.AutoCAD.DatabaseServices.Line l_t = new Autodesk.AutoCAD.DatabaseServices.Line(Big1.StartPoint, Big1.EndPoint);
                                l_t.TransformBy(Matrix3d.Scaling((Big1.Length + gap1) / Big1.Length, Big1.EndPoint));

                                MText mt1 = creaza_mtext_sta(l_t.StartPoint, Functions.Get_chainage_from_double(first_label_major + i * spacing_major, "f", 0), texth, bear1 + extra_rot);

                                mt1.Layer = layer_stationing;
                                BTrecord.AppendEntity(mt1);
                                Trans1.AddNewlyCreatedDBObject(mt1, true);



                            }
                        }
                    }

                    double first_label_minor = Math.Floor((start1 + spacing_minor) / spacing_minor) * spacing_minor;

                    if (start1 + Poly2D.Length >= first_label_minor)
                    {
                        int no_minor = Convert.ToInt32(Math.Ceiling((start1 + Poly2D.Length - first_label_minor) / spacing_minor));

                        if (no_minor > 0)
                        {
                            for (int i = 0; i < no_minor; ++i)
                            {
                                Point3d pt0 = Poly2D.GetPointAtDist((first_label_minor - start1) + i * spacing_minor);
                                double label_major = first_label_minor + i * spacing_minor;
                                Autodesk.AutoCAD.DatabaseServices.Line small1 = new Autodesk.AutoCAD.DatabaseServices.Line(new Point3d(pt0.X - tick_minor / 2, pt0.Y, 0), new Point3d(pt0.X + tick_minor / 2, pt0.Y, 0));

                                double param1 = Poly2D.GetParameterAtPoint(Poly2D.GetClosestPointTo(pt0, Vector3d.ZAxis, false));
                                double param2 = param1 + 1;
                                if (Poly2D.EndParam < param2)
                                {
                                    param1 = Poly2D.EndParam - 1;
                                    param2 = Poly2D.EndParam;
                                }


                                Point3d point1 = Poly2D.GetPointAtParameter(Math.Floor(param1));

                                Point3d point2 = Poly2D.GetPointAtParameter(Math.Floor(param2));

                                double bear1 = Functions.GET_Bearing_rad(point1.X, point1.Y, point2.X, point2.Y);

                                double rot1 = bear1 - lr * Math.PI / 2;

                                small1.TransformBy(Matrix3d.Rotation(rot1, Vector3d.ZAxis, pt0));

                                small1.Layer = layer_stationing;
                                small1.ColorIndex = 256;

                                BTrecord.AppendEntity(small1);
                                Trans1.AddNewlyCreatedDBObject(small1, true);

                            }
                        }
                    }




                    Trans1.Commit();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


        }
        private void add_zero_plus_zero_zero_stationing(Polyline Poly2D, double start1, double gap1, double texth, double thick, int round1)
        {
            try
            {
                Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.AutoCAD.DatabaseServices.BlockTable BlockTable_data1 = (BlockTable)ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead);
                    Autodesk.AutoCAD.DatabaseServices.BlockTableRecord BTrecord = (BlockTableRecord)Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForWrite);

                    int lr = 1;
                    double extra_rot = 0;


                    Point3d pt1 = Poly2D.GetPointAtDist(0);
                    Point3d pt2 = Poly2D.GetPointAtParameter(1);
                    Autodesk.AutoCAD.DatabaseServices.Line line_0 = new Autodesk.AutoCAD.DatabaseServices.Line(new Point3d(pt1.X - thick / 2, pt1.Y, 0), new Point3d(pt1.X + thick / 2, pt1.Y, 0));

                    double bear1 = Functions.GET_Bearing_rad(pt1.X, pt1.Y, pt2.X, pt2.Y);
                    double rot1 = bear1 - lr * Math.PI / 2;

                    line_0.TransformBy(Matrix3d.Rotation(rot1, Vector3d.ZAxis, pt1));
                    line_0.Layer = layer_stationing;
                    line_0.ColorIndex = 256;

                    BTrecord.AppendEntity(line_0);
                    Trans1.AddNewlyCreatedDBObject(line_0, true);



                    Autodesk.AutoCAD.DatabaseServices.Line l_t = new Autodesk.AutoCAD.DatabaseServices.Line(line_0.StartPoint, line_0.EndPoint);
                    l_t.TransformBy(Matrix3d.Scaling((line_0.Length + gap1) / line_0.Length, line_0.EndPoint));

                    MText mt1 = creaza_mtext_sta(l_t.StartPoint, Functions.Get_chainage_from_double(start1, "f", round1), texth, bear1 + extra_rot);

                    mt1.Layer = layer_stationing;
                    BTrecord.AppendEntity(mt1);
                    Trans1.AddNewlyCreatedDBObject(mt1, true);




                    Trans1.Commit();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


        }
        private void add_last_stationing(Polyline Poly2D, double end1, double gap1, double texth, double thick, int round1)
        {
            try
            {
                Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.AutoCAD.DatabaseServices.BlockTable BlockTable_data1 = (BlockTable)ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead);
                    Autodesk.AutoCAD.DatabaseServices.BlockTableRecord BTrecord = (BlockTableRecord)Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForWrite);

                    int lr = 1;
                    double extra_rot = 0;

                    Point3d pt1 = Poly2D.GetPointAtParameter(Poly2D.NumberOfVertices - 2);
                    Point3d pt2 = Poly2D.EndPoint;
                    Autodesk.AutoCAD.DatabaseServices.Line line_0 = new Autodesk.AutoCAD.DatabaseServices.Line(new Point3d(pt2.X - thick / 2, pt2.Y, 0), new Point3d(pt2.X + thick / 2, pt2.Y, 0));

                    double bear1 = Functions.GET_Bearing_rad(pt1.X, pt1.Y, pt2.X, pt2.Y);
                    double rot1 = bear1 - lr * Math.PI / 2;

                    line_0.TransformBy(Matrix3d.Rotation(rot1, Vector3d.ZAxis, pt2));
                    line_0.Layer = layer_stationing;
                    line_0.ColorIndex = 256;

                    BTrecord.AppendEntity(line_0);
                    Trans1.AddNewlyCreatedDBObject(line_0, true);
                    Autodesk.AutoCAD.DatabaseServices.Line l_t = new Autodesk.AutoCAD.DatabaseServices.Line(line_0.StartPoint, line_0.EndPoint);
                    l_t.TransformBy(Matrix3d.Scaling((line_0.Length + gap1) / line_0.Length, line_0.EndPoint));

                    MText mt1 = creaza_mtext_sta(l_t.StartPoint, Functions.Get_chainage_from_double(end1, "f", round1), texth, bear1 + extra_rot);

                    mt1.Layer = layer_stationing;
                    BTrecord.AppendEntity(mt1);
                    Trans1.AddNewlyCreatedDBObject(mt1, true);

                    Trans1.Commit();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


        }
        public MText creaza_mtext_sta(Point3d pt_ins, string continut, double texth, double rot1)
        {
            MText mtext1 = new MText();
            mtext1.Attachment = AttachmentPoint.BottomCenter;
            mtext1.Contents = continut;
            mtext1.TextHeight = texth;
            mtext1.BackgroundFill = true;
            mtext1.UseBackgroundColor = true;
            mtext1.BackgroundScaleFactor = 1.2;
            mtext1.Location = pt_ins;
            mtext1.Rotation = rot1;
            mtext1.ColorIndex = 256;

            return mtext1;
        }

        private void button_export_Click(object sender, EventArgs e)
        {

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;
                        LayerTable LayerTable1 = Trans1.GetObject(ThisDrawing.Database.LayerTableId, OpenMode.ForRead) as LayerTable;

                        System.Data.DataTable dt1 = new System.Data.DataTable();//line

                        dt1.Columns.Add("nume", typeof(string));
                        dt1.Columns.Add("color", typeof(int));
                        dt1.Columns.Add("placemark", typeof(string));
                        dt1.Columns.Add("placemark_no", typeof(int));
                        dt1.Columns.Add("polygon", typeof(bool));



                        List<string> lista1 = new List<string>();//line

                        if (dt_layers != null && dt_layers.Rows.Count > 0)
                        {
                            for (int i = 0; i < dt_layers.Rows.Count; ++i)
                            {
                                if (dt_layers.Rows[i][0] != DBNull.Value)
                                {
                                    string nume1 = Convert.ToString(dt_layers.Rows[i][0]);
                                    dt1.Rows.Add();
                                    dt1.Rows[dt1.Rows.Count - 1][0] = nume1;
                                    dt1.Rows[dt1.Rows.Count - 1][3] = 0;
                                    dt1.Rows[dt1.Rows.Count - 1][4] = dt_layers.Rows[i][2];
                                    lista1.Add(nume1);
                                }
                            }
                        }

                        if (dt1.Rows.Count > 0)
                        {
                            for (int i = 0; i < dt1.Rows.Count; ++i)
                            {
                                string ln = Convert.ToString(dt1.Rows[i][0]);
                                ObjectId id1 = LayerTable1[ln];
                                LayerTableRecord ltr = Trans1.GetObject(id1, OpenMode.ForRead) as LayerTableRecord;

                                int ci = 7;
                                Autodesk.AutoCAD.Colors.Color color1 = ltr.Color;
                                if (color1.IsByAci == true)
                                {
                                    ci = color1.ColorIndex;
                                }
                                if (ci > 255) ci = 7;
                                dt1.Rows[i][1] = ci;
                            }
                        }


                        List<int> lista_ci = new List<int>();

                        string kml_line_style = "";

                        foreach (ObjectId id1 in BTrecord)
                        {
                            Polyline poly1 = Trans1.GetObject(id1, OpenMode.ForRead) as Polyline;
                            if (poly1 != null)
                            {
                                if (lista1.Contains(poly1.Layer) == true)
                                {
                                    int idx1 = lista1.IndexOf(poly1.Layer);
                                    int ci = Convert.ToInt32(dt1.Rows[idx1][1]);
                                    bool is_line = true;
                                    if ((bool)dt1.Rows[idx1][4] == true)
                                    {
                                        is_line = false;
                                    }
                                    string line6 = "";

                                    if (lista_ci.Contains(ci) == false)
                                    {
                                        lista_ci.Add(ci);


                                        line6 = Coord_conv.get_kml_style("style_" + ci.ToString(), ci, 3);

                                        if (kml_line_style == "")
                                        {
                                            kml_line_style = line6;
                                        }
                                        else
                                        {
                                            kml_line_style = kml_line_style + "\r\n" + line6;
                                        }
                                    }

                                    string coords_ll84 = "";

                                    for (int j = 0; j < poly1.NumberOfVertices; ++j)
                                    {
                                        Point2d pt1 = poly1.GetPoint2dAt(j);
                                        if (coords_ll84 == "")
                                        {
                                            coords_ll84 = "					" + Coord_conv.get_ll84(pt1);
                                        }
                                        else
                                        {
                                            coords_ll84 = coords_ll84 + "\r\n					" + Coord_conv.get_ll84(pt1);
                                        }
                                    }

                                    if (poly1.Closed == true)
                                    {
                                        Point2d pt1 = poly1.GetPoint2dAt(0);
                                        coords_ll84 = coords_ll84 + "\r\n					" + Coord_conv.get_ll84(pt1);
                                    }

                                    int ex_no = Convert.ToInt32(dt1.Rows[idx1][3]);
                                    dt1.Rows[idx1][3] = ex_no + 1;

                                    string line10 = "";

                                    if (is_line == true)
                                    {
                                        line10 = Coord_conv.get_kml_line_placemark("obj" + (ex_no + 1).ToString(), "site_" + "style_" + ci.ToString(), coords_ll84);
                                    }
                                    else
                                    {
                                        line10 = Coord_conv.get_kml_polygon_placemark("polygon" + (ex_no + 1).ToString(), "site_" + "style_" + ci.ToString(), coords_ll84);
                                    }

                                    if (dt1.Rows[idx1][2] == DBNull.Value)
                                    {
                                        dt1.Rows[idx1][2] = line10;
                                    }
                                    else
                                    {
                                        string existing1 = Convert.ToString(dt1.Rows[idx1][2]);

                                        dt1.Rows[idx1][2] = existing1 + "\r\n" + line10;
                                    }
                                }
                            }
                        }

                        string dwg_name = ThisDrawing.Database.OriginalFileName;

                        if (System.IO.File.Exists(dwg_name) == false)
                        {
                            MessageBox.Show("Save your file before exporting the data\r\noperation aborted", "WD tool", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            Editor1.SetImpliedSelection(Empty_array);
                            Editor1.WriteMessage("\nCommand:");
                            set_enable_true();
                            return;
                        }

                        string kml_name = System.IO.Path.GetFileNameWithoutExtension(dwg_name);
                        string file_name = System.IO.Path.GetFileName(dwg_name);
                        string path1 = dwg_name.Replace(file_name, "");

                        if (kml_line_style != "")
                        {
                            string file1 = path1 + kml_name + ".kml";
                            bool file_exists = true;
                            int start_no = 1;
                            do
                            {
                                if (System.IO.File.Exists(file1) == true)
                                {
                                    System.IO.FileInfo f1 = new System.IO.FileInfo(file1);
                                    file1 = path1 + kml_name + "_" + start_no.ToString() + ".kml";
                                    ++start_no;
                                }
                                else
                                {
                                    file_exists = false;
                                }
                            } while (file_exists == true);

                            System.IO.File.WriteAllText(file1, Coord_conv.build_KML_string(kml_name, kml_line_style, dt1));

                            ProcessStartInfo psi = new ProcessStartInfo();
                            psi.FileName = file1;
                            Process p = new Process();
                            p.StartInfo = psi;
                            p.Start();
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();

            System.Data.DataTable dt2 = new System.Data.DataTable();//line

        }

        private void button_refresh_layers_Click(object sender, EventArgs e)
        {

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;
                        LayerTable LayerTable1 = Trans1.GetObject(ThisDrawing.Database.LayerTableId, OpenMode.ForRead) as LayerTable;

                        dt_layers = new System.Data.DataTable();
                        dt_layers.Columns.Add("Name", typeof(string));
                        dt_layers.Columns.Add("Object Data", typeof(bool));
                        if (radioButton_kml.Checked == true)
                        {
                            dt_layers.Columns.Add("Fill", typeof(bool));
                        }
                        else
                        {
                            dt_layers.Columns.Add("Export as Polygon", typeof(bool));
                        }

                        List<string> lista1 = Coord_conv.get_layers_from_dwg();

                        if (lista1.Count > 0)
                        {
                            for (int i = 0; i < lista1.Count; ++i)
                            {
                                dt_layers.Rows.Add();
                                dt_layers.Rows[dt_layers.Rows.Count - 1][0] = lista1[i];
                                dt_layers.Rows[dt_layers.Rows.Count - 1][1] = false;
                                dt_layers.Rows[dt_layers.Rows.Count - 1][2] = false;
                            }

                            dataGridView_layers.DataSource = dt_layers;

                            dataGridView_layers.Columns[0].Width = 470;
                            dataGridView_layers.Columns[0].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;


                            dataGridView_layers.Columns[1].Width = 75;
                            dataGridView_layers.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;

                            dataGridView_layers.Columns[2].Width = 75;
                            dataGridView_layers.Columns[2].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;

                            dataGridView_layers.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                            dataGridView_layers.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
                            dataGridView_layers.DefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                            dataGridView_layers.DefaultCellStyle.ForeColor = Color.White;
                            dataGridView_layers.EnableHeadersVisualStyles = false;
                        }



                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();

        }

        private void button_remove_row_from_library_Click(object sender, EventArgs e)
        {
            try
            {

                if (MessageBox.Show("Are you sure you want to remove the library item?", "WD tool", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    return;
                }

                if (dataGridView_library.RowCount > 0)
                {
                    int index_grid = dataGridView_library.CurrentCell.RowIndex;
                    if (index_grid == -1)
                    {
                        return;
                    }


                    dataGridView_library.Rows.RemoveAt(index_grid);
                    fill_library_comboboxes(dt_library);
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void flatTabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            fill_library_comboboxes(dt_library);
            if (comboBox_current_ws.Items.Count - 1 >= coridor_index) comboBox_current_ws.SelectedIndex = coridor_index;
        }

        private void button_draw_cl_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                return;
            }

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;
                        Functions.Creaza_layer("PPL_CL", 1, true);

                        Polyline poly1 = new Polyline();
                        int idx1 = 0;
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            if (dt_cl.Rows[i][0] != DBNull.Value)
                            {
                                Point2d pt1 = (Point2d)dt_cl.Rows[i][0];
                                poly1.AddVertexAt(idx1, pt1, 0, 0, 0);
                                ++idx1;
                            }

                        }
                        poly1.Layer = "PPL_CL";
                        poly1.ColorIndex = 256;
                        poly1.Linetype = "ByLayer";

                        BTrecord.AppendEntity(poly1);
                        Trans1.AddNewlyCreatedDBObject(poly1, true);

                        // Functions.zoom_to_object(poly1.ObjectId);

                        Trans1.Commit();
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();

        }

        private void button_move_atws_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                MessageBox.Show("no centerline loaded\r\noperation aborted");
                return;
            }

            if (dt_lod_left == null || dt_lod_right == null || dt_lod_left.Rows.Count == 0 || dt_lod_right.Rows.Count == 0)
            {
                MessageBox.Show("no corridor outlines defined\r\ndraft first the corridor defined from workspace library\r\noperation aborted");
                return;
            }

            if (checkBox_use_od.Checked == true && comboBox_atws_od_name.Text == "")
            {
                MessageBox.Show("no object data table selected\r\noperation aborted");
                return;
            }
            if (checkBox_use_od.Checked == true && comboBox_atws_od_field.Text == "")
            {
                MessageBox.Show("no object data field selected\r\noperation aborted");
                return;
            }

            if (comboBox_layer_atws.Text == "")
            {
                MessageBox.Show("no atws layer specified\r\noperation aborted");
                return;
            }

            List<ObjectId> lista_od_atws_object_id = new List<ObjectId>();
            List<string> lista_justif = new List<string>();
            string justif1 = "";



            if (dt_atws_manual == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }

            if (dt_atws == null || dt_atws_manual.Rows.Count == 0)
            {
                MessageBox.Show("no atws site specific found\r\noperation aborted");
                return;
            }


            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;




                        Polyline polyCL = new Polyline();
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                        }

                        this.WindowState = FormWindowState.Minimized;

                        string atws_layer = comboBox_layer_atws.Text;
                        Functions.Creaza_layer(atws_layer, 3, true);
                        string lod_layer = comboBox_layer_lod.Text;
                        Functions.Creaza_layer(lod_layer, 6, true);



                        Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_atws;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_atws;
                        Prompt_atws = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect atws polyline:");
                        Prompt_atws.SetRejectMessage("\nSelect a polyline!");
                        Prompt_atws.AllowNone = true;
                        Prompt_atws.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        Rezultat_atws = ThisDrawing.Editor.GetEntity(Prompt_atws);


                        if (Rezultat_atws.Status != PromptStatus.OK)
                        {

                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        double width1 = 0;
                        double sta1 = -1;
                        double sta2 = -1;
                        string LR = "";
                        string abutter1 = "";
                        double os1 = -1;
                        double os2 = -1;


                        string source1 = atws_source_manual;


                        List<ObjectId> lista_objectid_delete = new List<ObjectId>();
                        List<string> lista_handle_existent = new List<string>();
                        string handle1 = "";
                        string handle0 = "";

                        Polyline atws1 = Trans1.GetObject(Rezultat_atws.ObjectId, OpenMode.ForWrite) as Polyline;
                        if (atws1 == null)
                        {
                            MessageBox.Show("no polyline\r\noperation aborted");
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }
                        if (atws1 != null)
                        {
                            if (atws1.Layer != comboBox_layer_atws.Text)
                            {
                                MessageBox.Show("the layer of the atws does not match the combobox value\r\noperation aborted");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }


                            handle1 = atws1.ObjectId.Handle.Value.ToString();
                            for (int n = 0; n < dt_atws.Rows.Count; ++n)
                            {
                                if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle_column] != DBNull.Value &&
                                    dt_atws.Rows[n][atws_width_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_handle_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_column])) == true &&
                                    dt_atws.Rows[n][atws_sta1_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta1_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_sta2_orig_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_atws.Rows[n][atws_sta2_orig_column])) == true &&
                                    dt_atws.Rows[n][atws_working_side_column] != DBNull.Value && dt_atws.Rows[n][atws_justification_column] != DBNull.Value && dt_atws.Rows[n][atws_abutter_column] != DBNull.Value)
                                {
                                    string handle2 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);
                                    if (handle1.ToLower() == handle2.ToLower())
                                    {
                                        handle0 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);
                                        width1 = Convert.ToDouble(dt_atws.Rows[n][atws_width_column]);
                                        sta1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_column]);
                                        sta2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_column]);
                                        os1 = Convert.ToDouble(dt_atws.Rows[n][atws_sta1_orig_column]);
                                        os2 = Convert.ToDouble(dt_atws.Rows[n][atws_sta2_orig_column]);
                                        LR = Convert.ToString(dt_atws.Rows[n][atws_working_side_column]);
                                        justif1 = Convert.ToString(dt_atws.Rows[n][atws_justification_column]);
                                        abutter1 = Convert.ToString(dt_atws.Rows[n][atws_abutter_column]);

                                        if (lista_handle_existent.Contains(handle0) == false) lista_handle_existent.Add(handle0);
                                        lista_justif.Add(justif1);

                                        if (dt_atws.Rows[n][atws_source_column] != DBNull.Value)
                                        {
                                            source1 = Convert.ToString(dt_atws.Rows[n][atws_source_column]);
                                        }

                                        if (source1 == atws_source_library)
                                        {
                                            for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                                            {
                                                double ws_sta1 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                                double ws_sta2 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                                if (Math.Round(ws_sta1, 2) == Math.Round(sta1, 2) && Math.Round(ws_sta2, 2) == Math.Round(sta2, 2))
                                                {
                                                    dt_corridor.Rows[i][tws_modified_column] = true;
                                                    i = dt_corridor.Rows.Count;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }



                        Point3d pt_on_cl1 = polyCL.GetPointAtDist(sta1);
                        Point3d pt_on_cl2 = polyCL.GetPointAtDist(sta2);


                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res3;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions PP3;
                        PP3 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify base point:");
                        PP3.AllowNone = false;
                        Point_res3 = Editor1.GetPoint(PP3);

                        if (Point_res3.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        Point3d pt3 = Point_res3.Value;

                        pt3 = atws1.GetClosestPointTo(pt3, Vector3d.ZAxis, false);

                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res4;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions PP4;
                        PP4 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify the point to move to:");
                        PP4.AllowNone = false;
                        PP4.UseBasePoint = true;
                        PP4.BasePoint = pt3;
                        Point_res4 = Editor1.GetPoint(PP4);

                        if (Point_res4.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            return;
                        }

                        Point3d pt4 = Point_res4.Value;


                        for (int n = 0; n < dt_atws.Rows.Count; ++n)
                        {
                            if (dt_atws.Rows[n][atws_handle_column] != DBNull.Value && dt_atws.Rows[n][atws_handle0_column] != DBNull.Value)
                            {
                                string handle11 = Convert.ToString(dt_atws.Rows[n][atws_handle_column]);
                                string handle00 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]);
                                if (handle00 == handle0)
                                {
                                    ObjectId id1 = Functions.GetObjectId(ThisDrawing.Database, handle11);
                                    if (id1 != ObjectId.Null)
                                    {
                                        lista_objectid_delete.Add(id1);
                                    }
                                }
                            }
                        }

                        if (lista_objectid_delete.Count > 0)
                        {

                            for (int n = dt_atws.Rows.Count - 1; n >= 0; --n)
                            {
                                if (dt_atws.Rows[n][atws_handle0_column] != DBNull.Value)
                                {
                                    string handle00 = Convert.ToString(dt_atws.Rows[n][atws_handle0_column]).ToLower();
                                    if (lista_handle_existent.Contains(handle00) == true)
                                    {
                                        dt_atws.Rows[n].Delete();
                                    }
                                }
                            }

                            for (int n = dt_atws_lod_manual.Columns.Count - 1; n >= 0; --n)
                            {
                                if (dt_atws_lod_manual.Columns[n].ColumnName == handle0)
                                {
                                    dt_atws_lod_manual.Columns.Remove(handle0);
                                }
                            }
                        }



                        col_side1 = new Point2dCollection();
                        col_side2 = new Point2dCollection();

                        #region left
                        if (LR.ToUpper() == "LEFT")
                        {

                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }



                            Polyline lod1_left = create_lod_construction_polylines(1, "LEFT");
                            Polyline lod2_left = create_lod_construction_polylines(2, "LEFT");

                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);


                            Polyline lod4_left = create_lod_construction_polylines(4, "LEFT");



                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();

                            double sta_lod3 = lod4_left.GetDistAtPoint(lod4_left.GetClosestPointTo(pt3, Vector3d.ZAxis, false));
                            double sta_lod4 = lod4_left.GetDistAtPoint(lod4_left.GetClosestPointTo(pt4, Vector3d.ZAxis, false));
                            double sta_lod1 = -1;
                            double sta_lod2 = -1;


                            #region zigzag and start-end points

                            bool assigned_start = false;

                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();

                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod4_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                sta_lod1 = lod4_left.GetDistAtPoint(pt_start);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            pt_end = lod4_left.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            sta_lod2 = lod4_left.GetDistAtPoint(pt_end);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion

                            if (sta_lod1 == -1 || sta_lod2 == -1)
                            {
                                MessageBox.Show("data table error no5, no match on handles");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }



                            if (Math.Abs(sta_lod3 - sta_lod1) < Math.Abs(sta_lod3 - sta_lod2))
                            {
                                pt_start = lod4_left.GetPointAtDist(sta_lod4);

                                double sta_end = sta_lod4 + (sta2 - sta1);
                                pt_end = lod4_left.GetPointAtDist(sta_end);

                                col_side1 = new Point2dCollection();
                                col_side2 = new Point2dCollection();
                            }
                            else
                            {
                                double sta_start = sta_lod4 - (sta2 - sta1);
                                pt_start = lod4_left.GetPointAtDist(sta_start);

                                pt_end = lod4_left.GetPointAtDist(sta_lod4);

                                col_side1 = new Point2dCollection();
                                col_side2 = new Point2dCollection();
                            }


                            Polyline poly_new_atws_left = draw_manual_atws(polyCL, lod2_left, lod4_left, pt_start, pt_end, -width1, "LEFT", os1, os2, justif1, null, false);
                            //lista_od_atws_object_id.Add(poly_new_atws_left.ObjectId);

                            dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "LEFT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            dt_lod_left = build_lod_datatable(dt_atws_sorted, dt_lod_left, lod1_left, lod2_left);

                        }
                        #endregion

                        #region right
                        if (LR.ToUpper() == "RIGHT")
                        {
                            System.Data.DataTable dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }

                            Polyline lod1_right = create_lod_construction_polylines(1, "RIGHT");
                            Polyline lod2_right = create_lod_construction_polylines(2, "RIGHT");
                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);
                            Polyline lod4_right = create_lod_construction_polylines(4, "RIGHT");

                            Point3d pt_start = new Point3d();
                            Point3d pt_end = new Point3d();

                            double sta_lod3 = lod4_right.GetDistAtPoint(lod4_right.GetClosestPointTo(pt3, Vector3d.ZAxis, false));
                            double sta_lod4 = lod4_right.GetDistAtPoint(lod4_right.GetClosestPointTo(pt4, Vector3d.ZAxis, false));

                            double sta_lod1 = -1;
                            double sta_lod2 = -1;

                            #region zigzag and start-end points
                            bool assigned_start = false;

                            col_side1 = new Point2dCollection();
                            col_side2 = new Point2dCollection();

                            if (dt_atws_side1 != null && dt_atws_side1.Rows.Count > 0)
                            {
                                if (dt_atws_side1.Columns.Contains(handle0) == true)
                                {
                                    for (int i = 0; i < dt_atws_side1.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side1.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side1.Rows[i][handle0];
                                            if (assigned_start == false)
                                            {
                                                pt_start = lod4_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                                sta_lod1 = lod4_right.GetDistAtPoint(pt_start);
                                                assigned_start = true;
                                            }
                                            col_side1.Add(pt1);
                                        }
                                    }
                                }
                            }

                            if (dt_atws_side2 != null && dt_atws_side2.Rows.Count > 0)
                            {
                                if (dt_atws_side2.Columns.Contains(handle0) == true)
                                {
                                    for (int i = dt_atws_side2.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            pt_end = lod4_right.GetClosestPointTo(new Point3d(pt1.X, pt1.Y, 0), Vector3d.ZAxis, false);
                                            sta_lod2 = lod4_right.GetDistAtPoint(pt_end);
                                            i = -1;
                                        }
                                    }
                                    for (int i = 0; i < dt_atws_side2.Rows.Count; ++i)
                                    {
                                        if (dt_atws_side2.Rows[i][handle0] != DBNull.Value)
                                        {
                                            Point2d pt1 = (Point2d)dt_atws_side2.Rows[i][handle0];
                                            col_side2.Add(pt1);
                                        }
                                    }
                                }
                            }
                            #endregion

                            if (sta_lod1 == -1 || sta_lod2 == -1)
                            {
                                MessageBox.Show("data table error no5, no match on handles");
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }


                            if (Math.Abs(sta_lod3 - sta_lod1) < Math.Abs(sta_lod3 - sta_lod2))
                            {
                                pt_start = lod4_right.GetPointAtDist(sta_lod4);

                                double sta_end = sta_lod4 + (sta2 - sta1);
                                pt_end = lod4_right.GetPointAtDist(sta_end);

                                col_side1 = new Point2dCollection();
                                col_side2 = new Point2dCollection();
                            }
                            else
                            {
                                double sta_start = sta_lod4 - (sta2 - sta1);
                                pt_start = lod4_right.GetPointAtDist(sta_start);

                                pt_end = lod4_right.GetPointAtDist(sta_lod4);

                                col_side1 = new Point2dCollection();
                                col_side2 = new Point2dCollection();
                            }



                            Polyline poly_new_atws_right = draw_manual_atws(polyCL, lod2_right, lod4_right, pt_start, pt_end, width1, "RIGHT", os1, os2, justif1, null, false);
                            //lista_od_atws_object_id.Add(poly_new_atws_right.ObjectId);

                            dt_atws_sorted = new System.Data.DataTable();
                            dt_atws_sorted = dt_atws.Clone();
                            for (int i = 0; i < dt_atws.Rows.Count; ++i)
                            {
                                System.Data.DataRow row1 = dt_atws_sorted.NewRow();
                                row1.ItemArray = dt_atws.Rows[i].ItemArray;
                                if (Convert.ToString(row1[atws_working_side_column]) == "RIGHT")
                                {
                                    dt_atws_sorted.Rows.InsertAt(row1, dt_atws_sorted.Rows.Count);
                                }
                            }
                            dt_lod_right = build_lod_datatable(dt_atws_sorted, dt_lod_right, lod1_right, lod2_right);
                        }
                        #endregion





                        //draw_lod_polylines(Trans1, BTrecord);


                        if (lista_objectid_delete.Count > 0)
                        {
                            for (int k = 0; k < lista_objectid_delete.Count; ++k)
                            {
                                ObjectId id1 = lista_objectid_delete[k];
                                Entity entity1 = Trans1.GetObject(id1, OpenMode.ForWrite) as Entity;
                                entity1.Erase();

                            }
                            delete_columns_not_found_in_dt_atws();
                        }

                        Trans1.Commit();
                    }

                    delete_existing_linework();
                    draw_all_corridors();

                    //attach_od_to_atws(lista_od_atws_object_id, new List<string> { justif1 });
                    //attach_dt_atws_to_datagridview(dt_atws);
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }


            this.WindowState = FormWindowState.Normal;


            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }

        private void button_debug_Click(object sender, EventArgs e)
        {

            if (dt_cl == null || dt_cl.Rows.Count == 0)
            {
                MessageBox.Show("no centerline");
                return;
            }
            if (dt_corridor == null || dt_corridor.Rows.Count == 0)
            {
                MessageBox.Show("no tws table");
                return;
            }

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        Polyline polyCL = new Polyline();
                        for (int i = 0; i < dt_cl.Rows.Count; ++i)
                        {
                            polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                        }


                        this.WindowState = FormWindowState.Minimized;

                        PromptPointResult Point_res1;
                        PromptPointOptions PP1;
                        PP1 = new PromptPointOptions("\nSpecify a point inside the corridor you want to extend or shrink:");
                        PP1.AllowNone = false;
                        Point_res1 = Editor1.GetPoint(PP1);

                        if (Point_res1.Status != PromptStatus.OK)
                        {

                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            return;
                        }

                        Functions.keep_the_view_at_pickpoint();

                        double sta_m = polyCL.GetDistAtPoint(polyCL.GetClosestPointTo(Point_res1.Value, Vector3d.ZAxis, false));




                        Polyline temp_feat = new Polyline();

                        Point3d pt1 = build_crossover_feature(polyCL, ref temp_feat, Point_res1.Value, sta_m);

                        if (pt1 == new Point3d(-1.234, -1.234, 0))
                        {
                            MessageBox.Show("the feature does not intersect the centerline");
                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            return;
                        }

                        temp_feat.Layer = "0";
                        temp_feat.ColorIndex = 9;
                        BTrecord.AppendEntity(temp_feat);
                        Trans1.AddNewlyCreatedDBObject(temp_feat, true);

                        double sta_feat = polyCL.GetDistAtPoint(pt1);





                        for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                        {
                            if (dt_corridor.Rows[i][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta1_column])) == true &&
                                    dt_corridor.Rows[i][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta2_column])) == true &&
                                     dt_corridor.Rows[i][col_corridor_name] != DBNull.Value)
                            {
                                double sta_start = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                double sta_end = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                if (sta_m >= sta_start && sta_m <= sta_end)
                                {

                                    double dif1 = Math.Abs(sta_start - sta_m);
                                    double dif2 = Math.Abs(sta_end - sta_m);
                                    double sta1 = -1;
                                    double sta2 = -1;

                                    if (sta_feat > sta_start && sta_feat > sta_end)
                                    {
                                        sta1 = sta_start;
                                        sta2 = sta_feat;

                                        // i don't need to deal with overlaps because draw will deal with them
                                    }
                                    else if (sta_feat < sta_start)
                                    {
                                        sta1 = sta_feat;
                                        sta2 = sta_end;
                                        // i don't need to deal with overlaps because draw will deal with them
                                    }
                                    else if (sta_feat > sta_start && sta2 < sta_start)
                                    {
                                        if (dif2 < dif1)
                                        {
                                            sta1 = sta_start;
                                            sta2 = sta_feat;
                                            // update end station at next
                                            update_tws(sta_end, sta2);
                                        }
                                        else
                                        {
                                            sta1 = sta_feat;
                                            sta2 = sta_end;
                                            // update start station at previous
                                            update_tws(sta_start, sta1);
                                        }

                                    }

                                    if (sta1 >= polyCL.Length)
                                    {
                                        sta1 = Math.Floor(100 * polyCL.Length) / 100;
                                    }

                                    if (sta2 >= polyCL.Length)
                                    {
                                        sta2 = Math.Floor(100 * polyCL.Length) / 100;
                                    }

                                    if (sta1 > sta2)
                                    {
                                        double t = sta1;
                                        sta1 = sta2;
                                        sta2 = t;
                                    }

                                    //corr_sta_start = sta1;
                                    //corr_sta_end = sta2;
                                    comboBox_current_ws.Text = Convert.ToString(dt_corridor.Rows[i][col_corridor_name]);

                                    i = dt_corridor.Rows.Count;
                                }
                            }
                        }
                        Trans1.Commit();
                    }
                }
                button_draw_Click(sender, e);
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            this.WindowState = FormWindowState.Normal;
            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }

        private void button_ar_draw_Click(object sender, EventArgs e)
        {
            if (Functions.IsNumeric(textBox_ar_width.Text) == false)
            {
                MessageBox.Show("no access road width specified\r\noperation aborted");
                return;
            }



            if (checkBox_use_od.Checked == true && comboBox_ar_od_name.Text == "")
            {
                MessageBox.Show("no object data table selected\r\noperation aborted");
                return;
            }

            if (checkBox_use_od.Checked == true && comboBox_ar_od_field.Text == "")
            {
                MessageBox.Show("no object data field selected\r\noperation aborted");
                return;
            }

            if (comboBox_layer_ar.Text == "")
            {
                MessageBox.Show("no access road layer specified\r\noperation aborted");
                set_enable_true();

                return;
            }

            if (dt_lod_left == null || dt_lod_right == null || dt_cl == null || dt_lod_left.Rows.Count == 0 || dt_lod_right.Rows.Count == 0 || dt_cl.Rows.Count == 0)
            {
                MessageBox.Show("no data is found for centerline and/or tws and permanent easement\r\noperation aborted");
                set_enable_true();

                return;
            }
            if (dt_ar == null)
            {
                dt_ar = ar.get_dt_ar_structure();
            }
            string ar_type = "Permanent";
            if (radioButton_ar_temp.Checked == true)
            {
                ar_type = "Temporary";
            }
            double width1 = Math.Abs(Convert.ToDouble(textBox_ar_width.Text));

            string ar_layer = comboBox_layer_ar.Text;
            Functions.Creaza_layer(ar_layer, 5, true);

            Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            this.WindowState = FormWindowState.Minimized;
            set_enable_false();

            ObjectId[] Empty_array = null;


            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        Autodesk.AutoCAD.EditorInput.PromptEntityResult Rezultat_ar;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions Prompt_ar;
                        Prompt_ar = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the access road centerline:");
                        Prompt_ar.SetRejectMessage("\nSelect a polyline!");
                        Prompt_ar.AllowNone = true;
                        Prompt_ar.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        Rezultat_ar = ThisDrawing.Editor.GetEntity(Prompt_ar);
                        if (Rezultat_ar.Status != PromptStatus.OK)
                        {
                            this.WindowState = FormWindowState.Normal;

                            ThisDrawing.Editor.SetImpliedSelection(Empty_array);
                            ThisDrawing.Editor.WriteMessage("\nCommand:");
                            set_enable_true();
                        }

                        Polyline poly_cl_ar = Trans1.GetObject(Rezultat_ar.ObjectId, OpenMode.ForWrite) as Polyline;
                        if (poly_cl_ar != null)
                        {
                            //draw_access_road(ThisDrawing, Trans1, poly_cl_ar, dt_cl, dt_ar, dt_manual_ar, dt_lod_left, dt_lod_right,
                            //            ref dt_ar_side_left_p, ref dt_ar_side_right_p, ref dt_ar_temp, ref dt_ar_side_right_t,
                            //            ar_type, width1, ar_layer, radioButton_ar_perm, dataGridView_ar_data, checkBox_use_od, comboBox_ar_od_name, comboBox_ar_od_field);

                            //Trans1.Commit();

                            Polyline lod_left = new Polyline();
                            Polyline lod_right = new Polyline();


                            if (radioButton_ar_perm.Checked == true)
                            {
                                lod_left = create_lod_construction_polylines(1, "LEFT");
                                lod_right = create_lod_construction_polylines(1, "RIGHT");
                                if (dt_ar_side_left_p == null)
                                {
                                    dt_ar_side_left_p = new System.Data.DataTable();
                                }
                                if (dt_ar_side_right_p == null)
                                {
                                    dt_ar_side_right_p = new System.Data.DataTable();
                                }
                            }
                            else
                            {
                                lod_left = create_lod_construction_polylines(4, "LEFT");
                                lod_right = create_lod_construction_polylines(4, "RIGHT");
                                if (dt_ar_temp == null)
                                {
                                    dt_ar_temp = new System.Data.DataTable();
                                }
                                if (dt_ar_side_right_p == null)
                                {
                                    dt_ar_temp = new System.Data.DataTable();
                                }

                            }


                            Polyline polyCL = new Polyline();
                            for (int i = 0; i < dt_cl.Rows.Count; ++i)
                            {
                                if (dt_cl.Rows[i][0] != DBNull.Value)
                                {
                                    polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                                }
                            }

                            if (poly_cl_ar != null)
                            {

                                if (dt_ar == null)
                                {
                                    dt_ar = get_dt_ar_structure();
                                }

                                poly_cl_ar.Elevation = 0;

                                DBObjectCollection col_off_ar_right = poly_cl_ar.GetOffsetCurves(width1 / 2);
                                DBObjectCollection col_off_ar_left = poly_cl_ar.GetOffsetCurves(-width1 / 2);


                                Polyline poly_side_a = col_off_ar_left[0] as Polyline;
                                Polyline poly_side_b = col_off_ar_right[0] as Polyline;

                                bool is_left = false;
                                bool is_right = false;

                                Point3d pt_left_side = new Point3d();
                                Point3d pt_right_side = new Point3d();
                                Point3d pt_center = new Point3d();

                                double ref_sta = 0;

                                if (poly_side_a != null && poly_side_b != null)
                                {
                                    Point3dCollection col_int_left = Functions.Intersect_on_both_operands(poly_cl_ar, lod_left);
                                    Point3dCollection col_int_right = Functions.Intersect_on_both_operands(poly_cl_ar, lod_right);

                                    if (col_int_left.Count > 0 && col_int_right.Count > 0)
                                    {

                                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res1;
                                        Autodesk.AutoCAD.EditorInput.PromptPointOptions PP1;
                                        PP1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify side of access road");
                                        PP1.AllowNone = true;
                                        Point_res1 = ThisDrawing.Editor.GetPoint(PP1);

                                        if (Point_res1.Status == PromptStatus.OK)
                                        {
                                            Point3d pt_side = Point_res1.Value;

                                            Point3d pt_left = lod_left.GetClosestPointTo(pt_side, Vector3d.ZAxis, false);
                                            Point3d pt_right = lod_right.GetClosestPointTo(pt_side, Vector3d.ZAxis, false);


                                            double d_left = Math.Pow(Math.Pow(pt_side.X - pt_left.X, 2) + Math.Pow(pt_side.Y - pt_left.Y, 2), 0.5);
                                            double d_right = Math.Pow(Math.Pow(pt_side.X - pt_right.X, 2) + Math.Pow(pt_side.Y - pt_right.Y, 2), 0.5);

                                            if (d_left < d_right)
                                            {
                                                is_left = true;

                                                Point3d pt_on_cl = polyCL.GetClosestPointTo(col_int_left[0], Vector3d.ZAxis, false);
                                                ref_sta = polyCL.GetDistAtPoint(pt_on_cl);
                                                pt_center = col_int_left[0];

                                            }
                                            else
                                            {
                                                is_right = true;

                                                Point3d pt_on_cl = polyCL.GetClosestPointTo(col_int_right[0], Vector3d.ZAxis, false);
                                                ref_sta = polyCL.GetDistAtPoint(pt_on_cl);
                                                pt_center = col_int_right[0];

                                            }

                                        }

                                    }

                                    if (col_int_left.Count > 0 && col_int_right.Count == 0)
                                    {
                                        is_left = true;
                                        Point3d pt_on_cl = polyCL.GetClosestPointTo(col_int_left[0], Vector3d.ZAxis, false);
                                        ref_sta = polyCL.GetDistAtPoint(pt_on_cl);
                                        pt_center = col_int_left[0];

                                    }

                                    if (col_int_right.Count > 0 && col_int_left.Count == 0)
                                    {
                                        is_right = true;
                                        Point3d pt_on_cl = polyCL.GetClosestPointTo(col_int_right[0], Vector3d.ZAxis, false);
                                        ref_sta = polyCL.GetDistAtPoint(pt_on_cl);
                                        pt_center = col_int_right[0];

                                    }


                                    if (is_left == true)
                                    {
                                        Point3dCollection col_int_left_side = Functions.Intersect_on_both_operands(poly_side_a, lod_left);
                                        Point3dCollection col_int_right_side = Functions.Intersect_on_both_operands(poly_side_b, lod_left);

                                        if (col_int_left_side.Count > 0 && col_int_right_side.Count > 0)
                                        {
                                            pt_left_side = col_int_left_side[0];
                                            pt_right_side = col_int_right_side[0];
                                        }

                                    }

                                    if (is_right == true)
                                    {
                                        Point3dCollection col_int_left_side = Functions.Intersect_on_both_operands(poly_side_a, lod_right);
                                        Point3dCollection col_int_right_side = Functions.Intersect_on_both_operands(poly_side_b, lod_right);

                                        if (col_int_left_side.Count > 0 && col_int_right_side.Count > 0)
                                        {
                                            pt_left_side = col_int_left_side[0];
                                            pt_right_side = col_int_right_side[0];
                                        }

                                    }

                                    if (is_right == false && is_left == false)
                                    {
                                        Point3dCollection col_int_cl = new Point3dCollection();
                                        polyCL.IntersectWith(poly_cl_ar, Intersect.ExtendArgument, col_int_cl, IntPtr.Zero, IntPtr.Zero);
                                        if (col_int_cl.Count > 0)
                                        {
                                            Point3d pt_on_cl = polyCL.GetClosestPointTo(col_int_cl[0], Vector3d.ZAxis, false);
                                            ref_sta = polyCL.GetDistAtPoint(pt_on_cl);
                                        }
                                    }


                                    // start or end of a/r has to be left of left side or right of right side

                                    Point3d start_cl_ar = poly_cl_ar.StartPoint;
                                    Point3d end_cl_ar = poly_cl_ar.EndPoint;


                                    Polyline new_cl_ar = new Polyline();



                                    #region is left
                                    if (is_left == true)
                                    {

                                        double param_int = poly_cl_ar.GetParameterAtPoint(pt_center);

                                        Point3d pt_start = lod_left.GetClosestPointTo(start_cl_ar, Vector3d.ZAxis, false);
                                        Point3d pt_end = lod_left.GetClosestPointTo(end_cl_ar, Vector3d.ZAxis, false);

                                        double d_start = Math.Pow(Math.Pow(start_cl_ar.X - pt_start.X, 2) + Math.Pow(start_cl_ar.Y - pt_start.Y, 2), 0.5);
                                        double d_end = Math.Pow(Math.Pow(end_cl_ar.X - pt_end.X, 2) + Math.Pow(end_cl_ar.Y - pt_end.Y, 2), 0.5);

                                        if (Functions.IsRightDirection(lod_left, start_cl_ar) == false && Functions.IsRightDirection(lod_left, end_cl_ar) == true)
                                        {
                                            int indx1 = 0;

                                            for (int i = 0; i < param_int; ++i)
                                            {
                                                double bulge1 = poly_cl_ar.GetBulgeAt(i);
                                                if (i == Math.Floor(param_int))
                                                {
                                                    if (bulge1 != 0)
                                                    {
                                                        CircularArc2d circ1 = poly_cl_ar.GetArcSegment2dAt(i);
                                                        double r1 = circ1.Radius;
                                                        double arc_len = poly_cl_ar.GetDistanceAtParameter(param_int) - poly_cl_ar.GetDistanceAtParameter(Math.Floor(param_int));
                                                        double delta1 = arc_len / r1;
                                                        double bulge2 = Math.Tan(delta1 / 4);
                                                        if (bulge1 < 0)
                                                        {
                                                            bulge2 = -bulge2;
                                                        }
                                                        bulge1 = bulge2;
                                                    }
                                                }
                                                new_cl_ar.AddVertexAt(indx1, poly_cl_ar.GetPoint2dAt(i), bulge1, 0, 0);
                                                ++indx1;
                                            }

                                            new_cl_ar.AddVertexAt(indx1, new Point2d(pt_center.X, pt_center.Y), 0, 0, 0);

                                            Point3d t = pt_left_side;
                                            pt_left_side = pt_right_side;
                                            pt_right_side = t;
                                        }

                                        if (Functions.IsRightDirection(lod_left, start_cl_ar) == true && Functions.IsRightDirection(lod_left, end_cl_ar) == false)
                                        {
                                            int indx1 = 0;

                                            for (int i = poly_cl_ar.NumberOfVertices - 1; i > param_int; --i)
                                            {
                                                int idx_1 = i - 1;
                                                double bulge1 = 0;
                                                if (idx_1 >= 0)
                                                {
                                                    bulge1 = -poly_cl_ar.GetBulgeAt(idx_1);
                                                }

                                                if (i == Math.Ceiling(param_int))
                                                {
                                                    if (bulge1 != 0)
                                                    {
                                                        CircularArc2d circ1 = poly_cl_ar.GetArcSegment2dAt(idx_1);
                                                        double r1 = circ1.Radius;
                                                        double arc_len = -poly_cl_ar.GetDistanceAtParameter(param_int) + poly_cl_ar.GetDistanceAtParameter(Math.Ceiling(param_int));
                                                        double delta1 = arc_len / r1;
                                                        double bulge2 = Math.Tan(delta1 / 4);
                                                        if (bulge1 < 0)
                                                        {
                                                            bulge2 = -bulge2;
                                                        }
                                                        bulge1 = bulge2;
                                                    }

                                                }

                                                new_cl_ar.AddVertexAt(indx1, poly_cl_ar.GetPoint2dAt(i), bulge1, 0, 0);
                                                ++indx1;
                                            }

                                            new_cl_ar.AddVertexAt(indx1, new Point2d(pt_center.X, pt_center.Y), 0, 0, 0);


                                        }



                                        if (new_cl_ar.NumberOfVertices > 1)
                                        {
                                            Polyline left_side = new Polyline();
                                            Polyline right_side = new Polyline();

                                            col_off_ar_right = new_cl_ar.GetOffsetCurves(width1 / 2);
                                            col_off_ar_left = new_cl_ar.GetOffsetCurves(-width1 / 2);
                                            double len1 = Math.Round(new_cl_ar.Length, 2);

                                            poly_side_a = col_off_ar_left[0] as Polyline;
                                            poly_side_b = col_off_ar_right[0] as Polyline;



                                            int idxx1 = 0;

                                            for (int i = 0; i < poly_side_b.NumberOfVertices - 1; ++i)
                                            {
                                                left_side.AddVertexAt(idxx1, poly_side_b.GetPoint2dAt(i), poly_side_b.GetBulgeAt(i), 0, 0);
                                                ++idxx1;
                                            }

                                            left_side.AddVertexAt(idxx1, new Point2d(pt_left_side.X, pt_left_side.Y), 0, 0, 0);
                                            idxx1 = 0;

                                            right_side.AddVertexAt(idxx1, new Point2d(pt_right_side.X, pt_right_side.Y), -poly_side_a.GetBulgeAt(poly_side_a.NumberOfVertices - 1), 0, 0);
                                            ++idxx1;

                                            for (int i = poly_side_a.NumberOfVertices - 2; i >= 0; --i)
                                            {
                                                double bulge1 = 0;
                                                if (i - 1 >= 0)
                                                {
                                                    bulge1 = -poly_side_a.GetBulgeAt(i - 1);
                                                }

                                                right_side.AddVertexAt(idxx1, poly_side_a.GetPoint2dAt(i), bulge1, 0, 0);
                                                ++idxx1;
                                            }
                                            // publish_poly(right_side, 1);
                                            if (radioButton_ar_perm.Checked == true)
                                            {
                                                string col_name_a = Convert.ToString(Math.Round(ref_sta, 2) + "a");
                                                if (dt_ar_side_left_p.Columns.Contains(col_name_a) == true)
                                                {
                                                    dt_ar_side_left_p.Columns.Remove(col_name_a);
                                                }
                                                dt_ar_side_left_p.Columns.Add(col_name_a, typeof(Point2d));

                                                string col_name_b = Convert.ToString(Math.Round(ref_sta, 2) + "b");
                                                if (dt_ar_side_left_p.Columns.Contains(col_name_b) == true)
                                                {
                                                    dt_ar_side_left_p.Columns.Remove(col_name_b);
                                                }
                                                dt_ar_side_left_p.Columns.Add(col_name_b, typeof(Point2d));

                                                string col_name_c = Convert.ToString(Math.Round(ref_sta, 2) + "wdth_len");
                                                if (dt_ar_side_left_p.Columns.Contains(col_name_c) == true)
                                                {
                                                    dt_ar_side_left_p.Columns.Remove(col_name_c);
                                                }
                                                dt_ar_side_left_p.Columns.Add(col_name_c, typeof(double));

                                                for (int i = 0; i < left_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_side_left_p.Rows.Count == i)
                                                    {
                                                        dt_ar_side_left_p.Rows.Add();
                                                    }
                                                    dt_ar_side_left_p.Rows[i][col_name_a] = left_side.GetPoint2dAt(i);
                                                }
                                                for (int i = 0; i < right_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_side_left_p.Rows.Count == i)
                                                    {
                                                        dt_ar_side_left_p.Rows.Add();
                                                    }
                                                    dt_ar_side_left_p.Rows[i][col_name_b] = right_side.GetPoint2dAt(i);
                                                }
                                                dt_ar_side_left_p.Rows[0][col_name_c] = len1;
                                                dt_ar_side_left_p.Rows[1][col_name_c] = width1;

                                                dt_ar.Rows.Add();
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_width_column] = width1;
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_type_column] = "Permanent";
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_handle_column] = Convert.ToString(Math.Round(ref_sta, 2));
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_station_column] = Math.Round(ref_sta, 2);
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_length_column] = Math.Round(len1, 2);

                                            }
                                            else
                                            {
                                                string col_name_a = Convert.ToString(Math.Round(ref_sta, 2) + "a");
                                                if (dt_ar_temp.Columns.Contains(col_name_a) == true)
                                                {
                                                    dt_ar_temp.Columns.Remove(col_name_a);
                                                }
                                                dt_ar_temp.Columns.Add(col_name_a, typeof(Point2d));

                                                string col_name_b = Convert.ToString(Math.Round(ref_sta, 2) + "b");
                                                if (dt_ar_temp.Columns.Contains(col_name_b) == true)
                                                {
                                                    dt_ar_temp.Columns.Remove(col_name_b);
                                                }
                                                dt_ar_temp.Columns.Add(col_name_b, typeof(Point2d));

                                                string col_name_c = Convert.ToString(Math.Round(ref_sta, 2) + "wdth_len");
                                                if (dt_ar_temp.Columns.Contains(col_name_c) == true)
                                                {
                                                    dt_ar_temp.Columns.Remove(col_name_c);
                                                }
                                                dt_ar_temp.Columns.Add(col_name_c, typeof(double));


                                                for (int i = 0; i < left_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_temp.Rows.Count == i)
                                                    {
                                                        dt_ar_temp.Rows.Add();
                                                    }
                                                    dt_ar_temp.Rows[i][col_name_a] = left_side.GetPoint2dAt(i);
                                                }
                                                for (int i = 0; i < right_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_temp.Rows.Count == i)
                                                    {
                                                        dt_ar_temp.Rows.Add();
                                                    }
                                                    dt_ar_temp.Rows[i][col_name_b] = right_side.GetPoint2dAt(i);
                                                }


                                                dt_ar_temp.Rows[0][col_name_c] = len1;
                                                dt_ar_temp.Rows[1][col_name_c] = width1;

                                                dt_ar.Rows.Add();
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_width_column] = width1;
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_type_column] = "Temporary";
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_handle_column] = Convert.ToString(Math.Round(ref_sta, 2));
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_station_column] = Math.Round(ref_sta, 2);
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_length_column] = Math.Round(len1, 2);

                                            }

                                        }

                                    }
                                    #endregion

                                    #region is right
                                    if (is_right == true)
                                    {


                                        double param_int = poly_cl_ar.GetParameterAtPoint(pt_center);
                                        Point3d pt_start = lod_right.GetClosestPointTo(start_cl_ar, Vector3d.ZAxis, false);
                                        Point3d pt_end = lod_right.GetClosestPointTo(end_cl_ar, Vector3d.ZAxis, false);
                                        double d_start = Math.Pow(Math.Pow(start_cl_ar.X - pt_start.X, 2) + Math.Pow(start_cl_ar.Y - pt_start.Y, 2), 0.5);
                                        double d_end = Math.Pow(Math.Pow(end_cl_ar.X - pt_end.X, 2) + Math.Pow(end_cl_ar.Y - pt_end.Y, 2), 0.5);



                                        if (Functions.IsRightDirection(lod_right, start_cl_ar) == true && Functions.IsRightDirection(lod_right, end_cl_ar) == false)
                                        {
                                            int indx1 = 0;

                                            for (int i = 0; i < param_int; ++i)
                                            {

                                                double bulge1 = poly_cl_ar.GetBulgeAt(i);

                                                if (i == Math.Floor(param_int))
                                                {
                                                    if (bulge1 != 0)
                                                    {
                                                        CircularArc2d circ1 = poly_cl_ar.GetArcSegment2dAt(i);
                                                        double r1 = circ1.Radius;
                                                        double arc_len = poly_cl_ar.GetDistanceAtParameter(param_int) - poly_cl_ar.GetDistanceAtParameter(Math.Floor(param_int));
                                                        double delta1 = arc_len / r1;
                                                        double bulge2 = Math.Tan(delta1 / 4);
                                                        if (bulge1 < 0)
                                                        {
                                                            bulge2 = -bulge2;
                                                        }
                                                        bulge1 = bulge2;
                                                    }

                                                }

                                                new_cl_ar.AddVertexAt(indx1, poly_cl_ar.GetPoint2dAt(i), bulge1, 0, 0);
                                                ++indx1;
                                            }

                                            new_cl_ar.AddVertexAt(indx1, new Point2d(pt_center.X, pt_center.Y), 0, 0, 0);



                                            Point3d t = pt_left_side;
                                            pt_left_side = pt_right_side;
                                            pt_right_side = t;

                                        }



                                        if (Functions.IsRightDirection(lod_right, start_cl_ar) == false && Functions.IsRightDirection(lod_right, end_cl_ar) == true)
                                        {
                                            int indx1 = 0;

                                            for (int i = poly_cl_ar.NumberOfVertices - 1; i > param_int; --i)
                                            {
                                                int idx_1 = i - 1;
                                                double bulge1 = 0;
                                                if (idx_1 >= 0)
                                                {
                                                    bulge1 = -poly_cl_ar.GetBulgeAt(idx_1);
                                                }

                                                if (i == Math.Ceiling(param_int))
                                                {
                                                    if (bulge1 != 0)
                                                    {
                                                        CircularArc2d circ1 = poly_cl_ar.GetArcSegment2dAt(idx_1);
                                                        double r1 = circ1.Radius;
                                                        double arc_len = -poly_cl_ar.GetDistanceAtParameter(param_int) + poly_cl_ar.GetDistanceAtParameter(Math.Ceiling(param_int));
                                                        double delta1 = arc_len / r1;
                                                        double bulge2 = Math.Tan(delta1 / 4);
                                                        if (bulge1 < 0)
                                                        {
                                                            bulge2 = -bulge2;
                                                        }
                                                        bulge1 = bulge2;
                                                    }

                                                }

                                                new_cl_ar.AddVertexAt(indx1, poly_cl_ar.GetPoint2dAt(i), bulge1, 0, 0);
                                                ++indx1;
                                            }

                                            new_cl_ar.AddVertexAt(indx1, new Point2d(pt_center.X, pt_center.Y), 0, 0, 0);

                                        }


                                        if (new_cl_ar.NumberOfVertices > 1)
                                        {
                                            Polyline left_side = new Polyline();
                                            Polyline right_side = new Polyline();

                                            double len1 = Math.Round(new_cl_ar.Length, 2);

                                            col_off_ar_right = new_cl_ar.GetOffsetCurves(width1 / 2);
                                            col_off_ar_left = new_cl_ar.GetOffsetCurves(-width1 / 2);


                                            poly_side_a = col_off_ar_left[0] as Polyline;
                                            poly_side_b = col_off_ar_right[0] as Polyline;



                                            int idxx1 = 0;

                                            for (int i = 0; i < poly_side_b.NumberOfVertices - 1; ++i)
                                            {
                                                left_side.AddVertexAt(idxx1, poly_side_b.GetPoint2dAt(i), poly_side_b.GetBulgeAt(i), 0, 0);
                                                ++idxx1;
                                            }

                                            left_side.AddVertexAt(idxx1, new Point2d(pt_left_side.X, pt_left_side.Y), 0, 0, 0);
                                            idxx1 = 0;

                                            right_side.AddVertexAt(idxx1, new Point2d(pt_right_side.X, pt_right_side.Y), -poly_side_a.GetBulgeAt(poly_side_a.NumberOfVertices - 1), 0, 0);
                                            ++idxx1;

                                            for (int i = poly_side_a.NumberOfVertices - 2; i >= 0; --i)
                                            {
                                                double bulge1 = 0;
                                                if (i - 1 >= 0)
                                                {
                                                    bulge1 = -poly_side_a.GetBulgeAt(i - 1);
                                                }
                                                right_side.AddVertexAt(idxx1, poly_side_a.GetPoint2dAt(i), bulge1, 0, 0);
                                                ++idxx1;
                                            }

                                            if (radioButton_ar_perm.Checked == true)
                                            {
                                                string col_name_a = Convert.ToString(Math.Round(ref_sta, 2) + "a");
                                                if (dt_ar_side_right_p.Columns.Contains(col_name_a) == true)
                                                {
                                                    dt_ar_side_right_p.Columns.Remove(col_name_a);
                                                }
                                                dt_ar_side_right_p.Columns.Add(col_name_a, typeof(Point2d));

                                                string col_name_b = Convert.ToString(Math.Round(ref_sta, 2) + "b");
                                                if (dt_ar_side_right_p.Columns.Contains(col_name_b) == true)
                                                {
                                                    dt_ar_side_right_p.Columns.Remove(col_name_b);
                                                }
                                                dt_ar_side_right_p.Columns.Add(col_name_b, typeof(Point2d));

                                                string col_name_c = Convert.ToString(Math.Round(ref_sta, 2) + "wdth_len");
                                                if (dt_ar_side_right_p.Columns.Contains(col_name_c) == true)
                                                {
                                                    dt_ar_side_right_p.Columns.Remove(col_name_c);
                                                }
                                                dt_ar_side_right_p.Columns.Add(col_name_c, typeof(double));

                                                for (int i = 0; i < left_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_side_right_p.Rows.Count == i)
                                                    {
                                                        dt_ar_side_right_p.Rows.Add();
                                                    }
                                                    dt_ar_side_right_p.Rows[i][col_name_a] = left_side.GetPoint2dAt(i);
                                                }
                                                for (int i = 0; i < right_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_side_right_p.Rows.Count == i)
                                                    {
                                                        dt_ar_side_right_p.Rows.Add();
                                                    }
                                                    dt_ar_side_right_p.Rows[i][col_name_b] = right_side.GetPoint2dAt(i);
                                                }
                                                dt_ar_side_right_p.Rows[0][col_name_c] = len1;
                                                dt_ar_side_right_p.Rows[1][col_name_c] = width1;

                                                dt_ar.Rows.Add();
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_width_column] = width1;
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_type_column] = "Permanent";
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_handle_column] = Convert.ToString(Math.Round(ref_sta, 2));
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_station_column] = Math.Round(ref_sta, 2);
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_length_column] = Math.Round(len1, 2);

                                            }
                                            else
                                            {
                                                string col_name_a = Convert.ToString(Math.Round(ref_sta, 2) + "a");
                                                if (dt_ar_temp.Columns.Contains(col_name_a) == true)
                                                {
                                                    dt_ar_temp.Columns.Remove(col_name_a);
                                                }
                                                dt_ar_temp.Columns.Add(col_name_a, typeof(Point2d));

                                                string col_name_b = Convert.ToString(Math.Round(ref_sta, 2) + "b");
                                                if (dt_ar_temp.Columns.Contains(col_name_b) == true)
                                                {
                                                    dt_ar_temp.Columns.Remove(col_name_b);
                                                }
                                                dt_ar_temp.Columns.Add(col_name_b, typeof(Point2d));

                                                string col_name_c = Convert.ToString(Math.Round(ref_sta, 2) + "wdth_len");
                                                if (dt_ar_temp.Columns.Contains(col_name_c) == true)
                                                {
                                                    dt_ar_temp.Columns.Remove(col_name_c);
                                                }
                                                dt_ar_temp.Columns.Add(col_name_c, typeof(double));


                                                for (int i = 0; i < left_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_temp.Rows.Count == i)
                                                    {
                                                        dt_ar_temp.Rows.Add();
                                                    }
                                                    dt_ar_temp.Rows[i][col_name_a] = left_side.GetPoint2dAt(i);
                                                }

                                                for (int i = 0; i < right_side.NumberOfVertices; ++i)
                                                {
                                                    if (dt_ar_temp.Rows.Count == i)
                                                    {
                                                        dt_ar_temp.Rows.Add();
                                                    }
                                                    dt_ar_temp.Rows[i][col_name_b] = right_side.GetPoint2dAt(i);
                                                }

                                                dt_ar_temp.Rows[0][col_name_c] = len1;
                                                dt_ar_temp.Rows[1][col_name_c] = width1;

                                                dt_ar.Rows.Add();
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_width_column] = width1;
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_type_column] = "Temporary";
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_handle_column] = Convert.ToString(Math.Round(ref_sta, 2));
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_station_column] = Math.Round(ref_sta, 2);
                                                dt_ar.Rows[dt_ar.Rows.Count - 1][ar_length_column] = Math.Round(len1, 2);

                                            }
                                        }

                                    }
                                    #endregion

                                }
                            }
                        }
                        Trans1.Commit();
                    }
                    delete_existing_linework();
                    draw_all_corridors();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }




            this.WindowState = FormWindowState.Normal;


            ThisDrawing.Editor.SetImpliedSelection(Empty_array);
            ThisDrawing.Editor.WriteMessage("\nCommand:");
            set_enable_true();
        }

        public System.Data.DataTable get_dt_ar_structure()
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(ar_station_column, typeof(double));
            dt1.Columns.Add(ar_width_column, typeof(double));
            dt1.Columns.Add(ar_length_column, typeof(double));
            dt1.Columns.Add(ar_type_column, typeof(string));
            dt1.Columns.Add(ar_handle_column, typeof(string));

            return dt1;
        }





        private void button_zoom_to_ar_Click(object sender, EventArgs e)
        {
            set_enable_false();
            ar.button_zoom_to_ar_Click(dt_ar, dataGridView_ar_data);
            set_enable_true();
        }

        private void button_ar_select_drafted_Click(object sender, EventArgs e)
        {
            string justif1 = "Temporary";
            if (radioButton_ar_perm.Checked == true)
            {
                justif1 = "Permanent";
            }

            if (comboBox_layer_ar.Text != "")
            {
                Functions.Creaza_layer(comboBox_layer_ar.Text, 5, true);
                set_enable_false();
                this.WindowState = FormWindowState.Minimized;


                ObjectId[] Empty_array = null;
                System.Data.DataTable dt1 = new System.Data.DataTable();
                Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
                Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
                Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();

                List<ObjectId> lista_od_ar_object_id = new List<ObjectId>();
                List<string> lista_od_ar_justif = new List<string>();

                double len1 = 0;
                try
                {

                    using (DocumentLock lock1 = ThisDrawing.LockDocument())
                    {


                        using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                        {
                            BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                            BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;


                            Autodesk.AutoCAD.EditorInput.PromptEntityResult rezultat_ar;
                            Autodesk.AutoCAD.EditorInput.PromptEntityOptions prompt_ar;
                            prompt_ar = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the access road:");
                            prompt_ar.SetRejectMessage("\nSelect a polyline!");
                            prompt_ar.AllowNone = true;
                            prompt_ar.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                            rezultat_ar = ThisDrawing.Editor.GetEntity(prompt_ar);

                            if (rezultat_ar.Status != PromptStatus.OK)
                            {
                                this.WindowState = FormWindowState.Normal;
                                set_enable_true();
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                return;
                            }

                            Polyline poly1 = null;
                            try
                            {
                                poly1 = Trans1.GetObject(rezultat_ar.ObjectId, OpenMode.ForRead) as Polyline;
                                dt1 = build_data_table_from_poly(poly1);
                            }
                            catch (Autodesk.AutoCAD.Runtime.Exception)
                            {

                            }

                            Trans1.Commit();
                        }

                        if (dt1 != null && dt1.Rows.Count > 0)
                        {


                            using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                            {
                                BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                                BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                                Polyline lod_left = create_lod_construction_polylines(4, "LEFT");


                                Polyline lod_right = create_lod_construction_polylines(4, "RIGHT");


                                Polyline polyCL = new Polyline();
                                if (dt_cl != null && dt_cl.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dt_cl.Rows.Count; ++i)
                                    {
                                        polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                                    }
                                }




                                Polyline poly_ar = new Polyline();
                                if (dt1 != null && dt1.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dt1.Rows.Count; ++i)
                                    {
                                        poly_ar.AddVertexAt(i, (Point2d)dt1.Rows[i][0], 0, 0, 0);
                                    }
                                }

                                if (poly_ar.Length > 0.01)
                                {
                                    poly_ar.Layer = comboBox_layer_ar.Text;
                                    poly_ar.ColorIndex = 256;
                                    poly_ar.Linetype = "ByLayer";
                                    poly_ar.Closed = true;
                                    BTrecord.AppendEntity(poly_ar);
                                    Trans1.AddNewlyCreatedDBObject(poly_ar, true);

                                    using (DrawOrderTable DrawOrderTable1 = Trans1.GetObject(BTrecord.DrawOrderTableId, OpenMode.ForWrite) as DrawOrderTable)
                                    {
                                        ObjectIdCollection col1 = new ObjectIdCollection();
                                        col1.Add(poly_ar.ObjectId);
                                        DrawOrderTable1.MoveToTop(col1);
                                    }
                                    string handle1 = poly_ar.ObjectId.Handle.Value.ToString();

                                    if (dt_ar == null)
                                    {
                                        dt_ar = get_dt_ar_structure();
                                    }

                                    bool is_found = false;
                                    int index1 = -1;
                                    for (int k = 0; k < dt_ar.Rows.Count; ++k)
                                    {
                                        if (dt_ar.Rows[k][ar_handle_column] != DBNull.Value)
                                        {
                                            string handle2 = Convert.ToString(dt_ar.Rows[k][ar_handle_column]);
                                            if (handle1.ToLower() == handle2.ToLower())
                                            {
                                                is_found = true;
                                                index1 = k;
                                            }
                                        }
                                    }

                                    if (dt_ar_temp == null)
                                    {
                                        dt_ar_temp = new System.Data.DataTable();
                                    }

                                    if (dt_ar_temp.Columns.Contains(handle1 + "a") == false)
                                    {
                                        dt_ar_temp.Columns.Add(handle1 + "a", typeof(Point2d));
                                    }
                                    else
                                    {
                                        for (int n = 0; n < dt_ar_temp.Rows.Count; ++n)
                                        {
                                            dt_ar_temp.Rows[n][handle1 + "a"] = DBNull.Value;
                                        }
                                    }
                                    if (dt_ar_temp.Columns.Contains(handle1 + "b") == false)
                                    {
                                        dt_ar_temp.Columns.Add(handle1 + "b", typeof(Point2d));
                                    }
                                    else
                                    {
                                        for (int n = 0; n < dt_ar_temp.Rows.Count; ++n)
                                        {
                                            dt_ar_temp.Rows[n][handle1 + "b"] = DBNull.Value;
                                        }
                                    }
                                    if (dt_ar_temp.Columns.Contains(handle1 + "wdth_len") == false)
                                    {
                                        dt_ar_temp.Columns.Add(handle1 + "wdth_len", typeof(Point2d));
                                    }
                                    else
                                    {
                                        for (int n = 0; n < dt_ar_temp.Rows.Count; ++n)
                                        {
                                            dt_ar_temp.Rows[n][handle1 + "wdth_len"] = DBNull.Value;
                                        }
                                    }


                                    for (int n = 0; n < poly_ar.NumberOfVertices; ++n)
                                    {
                                        if (dt_ar_temp.Rows.Count == n)
                                        {
                                            dt_ar_temp.Rows.Add();
                                        }
                                        dt_ar_temp.Rows[n][handle1 + "a"] = poly_ar.GetPoint2dAt(n);
                                    }

                                    double sta = 0;

                                    if (lod_left.NumberOfVertices > 1 && lod_right.NumberOfVertices > 1)
                                    {

                                        Point3dCollection col_left1 = Functions.Intersect_on_both_operands(poly_ar, lod_left);
                                        Point3dCollection col_right1 = Functions.Intersect_on_both_operands(poly_ar, lod_right);

                                        if (col_left1.Count > 0)
                                        {
                                            Point3d pcl = polyCL.GetClosestPointTo(col_left1[0], Vector3d.ZAxis, false);
                                            sta = polyCL.GetDistAtPoint(pcl);
                                        }
                                        else if (col_right1.Count > 0)
                                        {
                                            Point3d pcl = polyCL.GetClosestPointTo(col_right1[0], Vector3d.ZAxis, false);
                                            sta = polyCL.GetDistAtPoint(pcl);
                                        }
                                        else if (col_right1.Count == 0 && col_left1.Count == 0)
                                        {
                                            Point3d pcl = polyCL.GetClosestPointTo(poly_ar.StartPoint, Vector3d.ZAxis, false);
                                            sta = polyCL.GetDistAtPoint(pcl);
                                        }

                                    }
                                    lista_od_ar_object_id.Add(poly_ar.ObjectId);
                                    lista_od_ar_justif.Add(justif1);
                                    if (is_found == false)
                                    {
                                        dt_ar.Rows.Add();
                                        index1 = dt_ar.Rows.Count - 1;
                                        dt_ar.Rows[index1][ar_station_column] = sta;
                                    }
                                    dt_ar.Rows[index1][ar_type_column] = justif1;
                                    dt_ar.Rows[index1][ar_handle_column] = handle1;
                                    dt_ar.Rows[index1][ar_length_column] = len1;
                                }


                                ar.attach_dt_ar_to_datagridview(dt_ar, dataGridView_ar_data);
                                Trans1.Commit();
                            }

                            attach_od_to_ar(lista_od_ar_object_id, lista_od_ar_justif, checkBox_use_od, comboBox_ar_od_name, comboBox_ar_od_field);
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }

                Editor1.SetImpliedSelection(Empty_array);
                Editor1.WriteMessage("\nCommand:");



                set_enable_true();
                this.WindowState = FormWindowState.Normal;
            }
        }




        private void button_highlight_ar_Click(object sender, EventArgs e)
        {
            if (dataGridView_ar_data.Rows.Count > 0)
            {
                set_enable_false();
                ar.button_highlight_ar_Click(dataGridView_ar_data);
                set_enable_true();
            }

        }

        private void comboBox_ar_od_name_DropDown(object sender, EventArgs e)
        {
            ar.comboBox_ar_od_name_DropDown(comboBox_ar_od_name, comboBox_ar_od_field);
        }

        private void comboBox_ar_od_name_SelectedIndexChanged(object sender, EventArgs e)
        {
            ar.comboBox_ar_od_name_SelectedIndexChanged(comboBox_ar_od_name, comboBox_ar_od_field);
        }

        private void button_ar_update_justification_Click(object sender, EventArgs e)
        {
            if (dt_ar == null || dt_ar.Rows.Count == 0)
            {
                MessageBox.Show("no access road data present\r\noperation abborted");
                return;
            }
            set_enable_false();
            ar.button_ar_update_justification_Click(dt_ar, checkBox_use_od, comboBox_ar_od_name, comboBox_ar_od_field);
            set_enable_true();
        }

        private void button_ar_out_Click(object sender, EventArgs e)
        {
            if (dt_ar == null || dt_ar.Rows.Count == 0)
            {
                MessageBox.Show("no access road data present\r\noperation abborted");
                return;
            }

            set_enable_false();
            ar.button_ar_out_Click(dt_ar, ar_data_tab);
            set_enable_true();
        }

        private void button_ar_in_Click(object sender, EventArgs e)
        {
            set_enable_false();
            ar.button_ar_in_Click(dt_ar, ar_data_tab, dataGridView_ar_data);
            set_enable_true();
        }



        private void button_pick_points_Click(object sender, EventArgs e)
        {
            if (dt_cl == null || dt_cl.Rows.Count < 2)
            {
                MessageBox.Show("no centerline data\r\noperation aborted");

                return;
            }

            #region build cl polyline                                
            Polyline poly_cl = new Polyline();
            for (int k = 0; k < dt_cl.Rows.Count; ++k)
            {
                if (dt_cl.Rows[k][0] == DBNull.Value || dt_cl.Rows[k][1] == DBNull.Value || Functions.IsNumeric(Convert.ToString(dt_cl.Rows[k][1])) == false)
                {
                    MessageBox.Show("issues found on centerline data\r\noperation aborted");
                    set_enable_true();
                    this.WindowState = FormWindowState.Normal;
                    return;
                }
                poly_cl.AddVertexAt(k, (Point2d)dt_cl.Rows[k][0], 0, 0, 0);
            }
            poly_cl.Elevation = 0;
            #endregion


            //corr_sta_start = -1;
            //corr_sta_end = -1;

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;

                        this.WindowState = FormWindowState.Minimized;

                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res1;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions pp1;
                        pp1 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify start point");
                        pp1.AllowNone = false;
                        pp1.Keywords.Add("Feature");
                        Point_res1 = Editor1.GetPoint(pp1);

                        if (Point_res1.Status != PromptStatus.OK && Point_res1.Status != PromptStatus.Keyword)
                        {
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;
                            return;
                        }

                        Point3d pt1 = new Point3d();
                        if (Point_res1.Status == PromptStatus.Keyword)
                        {
                            #region Feature
                            if (Point_res1.StringResult.ToLower() == "feature")
                            {
                                pt1 = get_feature_intersection_point(Trans1, poly_cl);

                                if (pt1.X == -1.234 && pt1.Y == -1.234)
                                {
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    MessageBox.Show("feature does not intersect the centerline!\r\noperation aborted");
                                    set_enable_true();
                                    this.WindowState = FormWindowState.Normal;
                                    return;
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            pt1 = poly_cl.GetClosestPointTo(Point_res1.Value, Vector3d.ZAxis, false);
                        }

                        double sta1 = poly_cl.GetDistAtPoint(pt1);

                        Autodesk.AutoCAD.EditorInput.PromptPointResult Point_res2;
                        Autodesk.AutoCAD.EditorInput.PromptPointOptions pp2;
                        pp2 = new Autodesk.AutoCAD.EditorInput.PromptPointOptions("\nSpecify end point");
                        pp2.AllowNone = false;
                        pp2.UseBasePoint = true;
                        pp2.BasePoint = pt1;
                        pp2.Keywords.Add("Feature");
                        Point_res2 = Editor1.GetPoint(pp2);

                        if (Point_res2.Status != PromptStatus.OK && Point_res2.Status != PromptStatus.Keyword)
                        {
                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;
                            return;
                        }

                        //Functions.keep_the_view_at_pickpoint();

                        Point3d pt2 = new Point3d();
                        if (Point_res2.Status == PromptStatus.Keyword)
                        {
                            #region Feature
                            if (Point_res2.StringResult.ToLower() == "feature")
                            {
                                pt2 = get_feature_intersection_point(Trans1, poly_cl);

                                if (pt2.X == -1.234 && pt2.Y == -1.234)
                                {
                                    ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                    MessageBox.Show("feature does not intersect the centerline!\r\noperation aborted");
                                    set_enable_true();

                                    this.WindowState = FormWindowState.Normal;
                                    return;
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            pt2 = poly_cl.GetClosestPointTo(Point_res2.Value, Vector3d.ZAxis, false);
                        }

                        double sta2 = poly_cl.GetDistAtPoint(pt2);

                        if (sta1 >= poly_cl.Length)
                        {
                            sta1 = Math.Floor(100 * poly_cl.Length) / 100;
                        }

                        if (sta2 >= poly_cl.Length)
                        {
                            sta2 = Math.Floor(100 * poly_cl.Length) / 100;
                        }

                        if (sta1 > sta2)
                        {
                            double t = sta1;
                            sta1 = sta2;
                            sta2 = t;
                        }

                        if (Math.Abs(sta2 - sta1) < 10)
                        {
                            MessageBox.Show("the points are within 10 feet of each other\r\noperation aborted");
                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;
                            return;
                        }


                        insert_row_in_dt_corridor(sta1, sta2);
                        dataGridView_ws_data.DataSource = dt_corridor;

                        delete_existing_linework();

                        build_dt_pcn();

                        adjust_permanent(poly_cl, sta1, sta2);


                        Trans1.Commit();
                    }



                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            this.WindowState = FormWindowState.Normal;
            set_enable_true();
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();


        }

        private void insert_row_in_dt_corridor(double sta1, double sta2)
        {
            if (dt_corridor == null)
            {
                dt_corridor = get_dt_corridor_structure();
            }

            #region load primary to dt_ws
            if (primary_workspace_name != "")
            {
                if (dt_corridor.Rows.Count == 0)
                {
                    dt_corridor.Rows.Add();
                    dt_corridor.Rows[dt_corridor.Rows.Count - 1][col_corridor_name] = primary_workspace_name;
                    dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_sta1_column] = "0.00";
                    dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_sta2_column] = Functions.Get_String_Rounded(Math.Floor(Convert.ToDouble(dt_cl.Rows[dt_cl.Rows.Count - 1][1]) * 100) / 100, 2);
                    dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_side_column] = "normal";
                    dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_primary_column] = true;
                    dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_modified_column] = false;
                }
                else
                {
                    for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                    {
                        if (Convert.ToBoolean(dt_corridor.Rows[i][tws_primary_column]) == true)
                        {
                            dt_corridor.Rows[i][col_corridor_name] = primary_workspace_name;
                        }
                    }
                }
            }
            #endregion

            if (comboBox_current_ws.Text != "" && sta1 != -1 && sta2 != -1)
            {
                dataGridView_atws_data.DataSource = null;

                string w_name = comboBox_current_ws.Text;

                bool prev_flipped = false;
                for (int i = 0; i < dt_library.Rows.Count; ++i)
                {
                    if (Convert.ToString(dt_library.Rows[i][lib_name_column]) == w_name)
                    {

                        dt_corridor.Rows.Add();
                        dt_corridor.Rows[dt_corridor.Rows.Count - 1][col_corridor_name] = w_name;
                        dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_sta1_column] = sta1;
                        dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_sta2_column] = sta2;
                        dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_modified_column] = false;

                        bool is_flipped = false;

                        if (checkBox_flip_workspace.Checked == true)
                        {
                            dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_side_column] = "flipped";
                            is_flipped = true;
                        }
                        else
                        {
                            dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_side_column] = "normal";
                        }

                        if (w_name == primary_workspace_name && dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_side_column] != DBNull.Value && Convert.ToString(dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_side_column]) == "normal")
                        {
                            dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_primary_column] = true;
                        }
                        else
                        {
                            dt_corridor.Rows[dt_corridor.Rows.Count - 1][tws_primary_column] = false;
                        }

                        if (dt_corridor.Rows.Count > 1)
                        {
                            for (int j = dt_corridor.Rows.Count - 2; j >= 0; --j)
                            {
                                if (dt_corridor.Rows[j][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][tws_sta1_column])) == true &&
                                        dt_corridor.Rows[j][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][tws_sta2_column])) == true)
                                {
                                    double sta11 = Convert.ToDouble(dt_corridor.Rows[j][tws_sta1_column]);
                                    double sta22 = Convert.ToDouble(dt_corridor.Rows[j][tws_sta2_column]);
                                    if (sta11 < sta1 && sta22 > sta1 && sta22 <= sta2)
                                    {
                                        dt_corridor.Rows[j][atws_sta2_column] = sta1;
                                    }
                                    else if (sta11 >= sta1 && sta11 < sta2 && sta22 > sta2)
                                    {
                                        dt_corridor.Rows[j][tws_sta1_column] = sta2;
                                    }
                                    else if (sta11 < sta1 && sta22 > sta2)
                                    {
                                        System.Data.DataRow row1 = dt_corridor.NewRow();
                                        for (int k = 0; k < dt_corridor.Columns.Count; ++k)
                                        {
                                            row1[k] = dt_corridor.Rows[j][k];
                                        }
                                        row1[tws_sta1_column] = sta2;

                                        dt_corridor.Rows[j][atws_sta2_column] = sta1;

                                        dt_corridor.Rows.InsertAt(row1, j + 1);
                                    }
                                    else if (sta11 >= sta1 && sta11 < sta2 && sta22 > sta1 && sta22 <= sta2)
                                    {
                                        dt_corridor.Rows[j].Delete();
                                    }
                                }
                            }

                            dt_corridor = Functions.Sort_data_table(dt_corridor, tws_sta1_column);
                            //Functions.Transfer_datatable_to_new_excel_spreadsheet_formated_general(dt_corridor);
                            for (int j = dt_corridor.Rows.Count - 1; j > 0; --j)
                            {
                                if (dt_corridor.Rows[j][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][tws_sta1_column])) == true &&
                                        dt_corridor.Rows[j][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[j][tws_sta2_column])) == true &&
                                         dt_corridor.Rows[j][tws_sta2_column] != DBNull.Value && dt_corridor.Rows[j][tws_side_column] != DBNull.Value)
                                {
                                    double sta_start1 = Convert.ToDouble(dt_corridor.Rows[j][tws_sta1_column]);
                                    double sta_end1 = Convert.ToDouble(dt_corridor.Rows[j][tws_sta2_column]);
                                    string ws_name1 = Convert.ToString(dt_corridor.Rows[j][col_corridor_name]);

                                    string flip1 = Convert.ToString(dt_corridor.Rows[j][tws_side_column]);

                                    for (int k = j - 1; k >= 0; --k)
                                    {
                                        if (dt_corridor.Rows[k][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[k][tws_sta1_column])) == true &&
                                                dt_corridor.Rows[k][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[k][tws_sta2_column])) == true &&
                                                 dt_corridor.Rows[k][tws_sta2_column] != DBNull.Value && dt_corridor.Rows[k][tws_side_column] != DBNull.Value)
                                        {
                                            double sta_start2 = Convert.ToDouble(dt_corridor.Rows[k][tws_sta1_column]);
                                            double sta_end2 = Convert.ToDouble(dt_corridor.Rows[k][tws_sta2_column]);
                                            string ws_name2 = Convert.ToString(dt_corridor.Rows[k][col_corridor_name]);
                                            string flip2 = Convert.ToString(dt_corridor.Rows[k][tws_side_column]);
                                            if (ws_name1 == ws_name2 && sta_start1 == sta_end2 && flip1 == flip2)
                                            {
                                                dt_corridor.Rows[k][tws_sta2_column] = sta_end1;
                                                dt_corridor.Rows[j].Delete();
                                            }
                                        }
                                    }
                                }
                            }
                            prev_flipped = is_flipped;
                            i = dt_library.Rows.Count;
                        }
                    }
                }

            }

            if (sta1 != -1 && sta2 != -1)
            {
                delete_atws(sta1, sta2);
            }







        }


        public void adjust_permanent(Polyline poly_cl, double sta1, double sta2)
        {
            set_enable_false();
            string perm_layer = comboBox_layer_perm.Text;

            ObjectId[] Empty_array = null;

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            if (ThisDrawing == null)
            {
                MessageBox.Show("you are trying to run outside of a drawing\r\nopen or create a drawing\r\noperation aborted");
                set_enable_true();
                return;
            }

            string dwg1 = ThisDrawing.Database.OriginalFileName;

            using (DocumentLock lock1 = ThisDrawing.LockDocument())
            {
                using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                    Autodesk.AutoCAD.ApplicationServices.Application.SetSystemVariable("OFFSETGAPTYPE", 0);

                    Functions.Creaza_layer(perm_layer, 1, true);

                    System.Data.DataTable dt_perm_left = new System.Data.DataTable();
                    System.Data.DataTable dt_perm_right = new System.Data.DataTable();

                    dt_perm_left.Columns.Add("pt", typeof(Point2d));
                    dt_perm_left.Columns.Add(col_sta1, typeof(double));
                    dt_perm_left.Columns.Add(col_sta2, typeof(double));
                    dt_perm_right = dt_perm_left.Clone();


                    if (dt_poly_perm != null && dt_poly_perm.Rows.Count > 0)
                    {

                        Polyline perm_left = new Polyline();
                        Polyline perm_right = new Polyline();

                        #region build left and right perm polylines
                        int idx = 0;
                        for (int k = 0; k < dt_poly_perm.Rows.Count; ++k)
                        {
                            if (dt_poly_perm.Rows[k][col_x] == DBNull.Value || dt_poly_perm.Rows[k][col_y] == DBNull.Value ||
                                dt_poly_perm.Rows[k][col_side] == DBNull.Value || dt_poly_perm.Rows[k][col_sta1] == DBNull.Value || dt_poly_perm.Rows[k][col_sta2] == DBNull.Value)
                            {
                                MessageBox.Show("issues found on permanent easement data\r\noperation aborted");
                                set_enable_true();
                                return;
                            }

                            if (Convert.ToString(dt_poly_perm.Rows[k][col_side]) == "LEFT")
                            {
                                double x = Convert.ToDouble(dt_poly_perm.Rows[k][col_x]);
                                double y = Convert.ToDouble(dt_poly_perm.Rows[k][col_y]);

                                perm_left.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                                ++idx;


                                dt_perm_left.Rows.Add();
                                dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][col_sta1] = dt_poly_perm.Rows[k][col_sta1];
                                dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][col_sta2] = dt_poly_perm.Rows[k][col_sta2];
                                dt_perm_left.Rows[dt_perm_left.Rows.Count - 1][0] = new Point2d(x, y);
                            }
                            else
                            {
                                k = dt_poly_perm.Rows.Count;
                            }
                        }
                        perm_left.Elevation = 0;


                        Polyline poly1 = new Polyline();
                        poly1 = perm_left.Clone() as Polyline;
                        if(poly1!= null)
                        {
                        BTrecord.AppendEntity(poly1);
                        Trans1.AddNewlyCreatedDBObject(poly1, true);
                        }


                       

                        idx = 0;
                        for (int k = dt_poly_perm.Rows.Count - 1; k >= 0; --k)
                        {
                            if (dt_poly_perm.Rows[k][col_x] == DBNull.Value || dt_poly_perm.Rows[k][col_y] == DBNull.Value ||
                                dt_poly_perm.Rows[k][col_side] == DBNull.Value ||
                                Functions.IsNumeric(Convert.ToString(dt_poly_perm.Rows[k][col_x])) == false ||
                                 Functions.IsNumeric(Convert.ToString(dt_poly_perm.Rows[k][col_y])) == false)
                            {
                                MessageBox.Show("issues found on permanent easement data\r\noperation aborted");
                                set_enable_true();
                                return;
                            }

                            if (Convert.ToString(dt_poly_perm.Rows[k][col_side]) == "RIGHT")
                            {
                                double x = Convert.ToDouble(dt_poly_perm.Rows[k][col_x]);
                                double y = Convert.ToDouble(dt_poly_perm.Rows[k][col_y]);

                                perm_right.AddVertexAt(idx, new Point2d(x, y), 0, 0, 0);
                                ++idx;

                                dt_perm_right.Rows.Add();
                                dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][col_sta1] = dt_poly_perm.Rows[k][col_sta1];
                                dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][col_sta2] = dt_poly_perm.Rows[k][col_sta2];
                                dt_perm_right.Rows[dt_perm_right.Rows.Count - 1][0] = new Point2d(x, y);

                            }
                            else
                            {
                                k = -1;
                            }
                        }
                        perm_right.Elevation = 0;
                        #endregion





                        for (int i = 0; i < dt_corridor.Rows.Count; ++i)
                        {
                            if (dt_corridor.Rows[i][tws_sta1_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta1_column])) == true &&
                                    dt_corridor.Rows[i][tws_sta2_column] != DBNull.Value && Functions.IsNumeric(Convert.ToString(dt_corridor.Rows[i][tws_sta2_column])) == true)
                            {
                                double sta11 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta1_column]);
                                double sta22 = Convert.ToDouble(dt_corridor.Rows[i][tws_sta2_column]);
                                if (sta11 == sta1 && sta22 == sta2)
                                {
                                    double perm_l = Convert.ToDouble(dt_pcn.Rows[i][6]);
                                    double perm_r = Convert.ToDouble(dt_pcn.Rows[i][7]);


                                    Point3d pt1 = poly_cl.GetPointAtDist(sta1);
                                    Point3d pt2 = poly_cl.GetPointAtDist(sta2);
                                    double par1 = poly_cl.GetParameterAtDistance(sta1);
                                    double par2 = poly_cl.GetParameterAtDistance(sta2);
                                    double p1 = Math.Round(par1, 0);
                                    double p2 = Math.Round(par2, 0);
                                    Point3d pt11 = poly_cl.GetPointAtParameter(p1);
                                    Point3d pt22 = poly_cl.GetPointAtParameter(p2);

                                    Polyline part_cl = new Polyline();
                                    bool remove_pt1 = false;
                                    bool remove_pt2 = false;

                                    if (perm_l > 0 || perm_r > 0)
                                    {
                                        double d1 = Math.Pow(Math.Pow((pt1.X - pt11.X), 2) + Math.Pow(pt1.Y - pt11.Y, 2), 0.5);
                                        if (d1 < 0.01)
                                        {
                                            par1 = p1;
                                            remove_pt1 = true;
                                            p1 = p1 - 1;
                                            if (p1 < 0)
                                            {
                                                remove_pt1 = false;
                                                p1 = 0;
                                            }
                                        }
                                        else
                                        {
                                            p1 = par1;
                                        }

                                        double d2 = Math.Pow(Math.Pow((pt2.X - pt22.X), 2) + Math.Pow(pt2.Y - pt22.Y, 2), 0.5);
                                        if (d2 < 0.01)
                                        {
                                            par2 = p2;
                                            remove_pt2 = true;
                                            p2 = p2 + 1;
                                            if (p2 > poly_cl.EndParam)
                                            {
                                                remove_pt2 = false;
                                                p2 = poly_cl.EndParam;
                                            }
                                        }
                                        else
                                        {
                                            p2 = par2;
                                        }
                                        part_cl = get_part_of_poly(poly_cl, p1, p2);


                                    }

                                    if (perm_l > 0)
                                    {
                                        Polyline pcl = new Polyline();
                                        pcl = get_simple_offset_polyline(part_cl, -perm_l);

                                        if (remove_pt1 == true)
                                        {
                                            pcl.RemoveVertexAt(0);

                                        }

                                        if (remove_pt2 == true)
                                        {
                                            pcl.RemoveVertexAt(pcl.NumberOfVertices - 1);
                                        }


                                        Point3d point_on_perm1 = perm_left.GetClosestPointTo(pcl.StartPoint, Vector3d.ZAxis, false);
                                        Point3d point_on_perm2 = perm_left.GetClosestPointTo(pcl.EndPoint, Vector3d.ZAxis, false);

                                        double param_on_perm1 = perm_left.GetParameterAtPoint(point_on_perm1);
                                        double param_on_perm2 = perm_left.GetParameterAtPoint(point_on_perm2);

                                        int ceil1 = Convert.ToInt32(Math.Ceiling(param_on_perm1));
                                        int flr2 = Convert.ToInt32(Math.Floor(param_on_perm2));

                                        if (flr2 >= ceil1)
                                        {
                                            for (int j = ceil1; j <= flr2; j++)
                                            {
                                                perm_left.RemoveVertexAt(ceil1);
                                                dt_perm_left.Rows[ceil1].Delete();
                                            }
                                        }


                                        for (int j = pcl.NumberOfVertices - 1; j >= 0; j--)
                                        {
                                            Point2d p2d = pcl.GetPoint2dAt(j);
                                            perm_left.AddVertexAt(ceil1, p2d, 0, 0, 0);
                                            System.Data.DataRow row1 = dt_perm_left.NewRow();
                                            row1[0] = p2d;
                                            row1[col_sta1] = sta1;
                                            row1[col_sta2] = sta2;
                                            dt_perm_left.Rows.InsertAt(row1, ceil1);

                                        }


                                    }

                                    if (perm_r > 0)
                                    {

                                        Polyline pcl = new Polyline();
                                        pcl = get_simple_offset_polyline(part_cl, perm_r);

                                        if (remove_pt1 == true)
                                        {
                                            pcl.RemoveVertexAt(0);
                                        }

                                        if (remove_pt2 == true)
                                        {
                                            pcl.RemoveVertexAt(pcl.NumberOfVertices - 1);
                                        }
                                        Point3d point_on_perm1 = perm_right.GetClosestPointTo(pcl.StartPoint, Vector3d.ZAxis, false);
                                        Point3d point_on_perm2 = perm_right.GetClosestPointTo(pcl.EndPoint, Vector3d.ZAxis, false);

                                        double param_on_perm1 = perm_right.GetParameterAtPoint(point_on_perm1);
                                        double param_on_perm2 = perm_right.GetParameterAtPoint(point_on_perm2);

                                        int ceil1 = Convert.ToInt32(Math.Ceiling(param_on_perm1));
                                        int flr2 = Convert.ToInt32(Math.Floor(param_on_perm2));

                                        if (flr2 >= ceil1)
                                        {
                                            for (int j = ceil1; j <= flr2; j++)
                                            {
                                                perm_right.RemoveVertexAt(ceil1);
                                                dt_perm_right.Rows[ceil1].Delete();

                                            }
                                        }
                                        for (int j = pcl.NumberOfVertices - 1; j >= 0; j--)
                                        {
                                            Point2d p2d = pcl.GetPoint2dAt(j);
                                            perm_right.AddVertexAt(ceil1, p2d, 0, 0, 0);
                                            System.Data.DataRow row1 = dt_perm_right.NewRow();
                                            row1[0] = p2d;
                                            row1[col_sta1] = sta1;
                                            row1[col_sta2] = sta2;
                                            dt_perm_right.Rows.InsertAt(row1, ceil1);
                                        }
                                    }
                                }
                            }
                        }




                        #region permanent easement
                        if (dt_perm_left.Rows.Count > 1 && dt_perm_right.Rows.Count > 1)
                        {

                            dt_poly_perm.Rows.Clear();
                            Polyline poly_perm = new Polyline();
                            idx = 0;

                            for (int k = 0; k < dt_perm_left.Rows.Count; ++k)
                            {
                                Point2d pt1 = (Point2d)dt_perm_left.Rows[k][0];
                                dt_poly_perm.Rows.Add();

                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_x] = pt1.X;
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_y] = pt1.Y;
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_sta1] = dt_perm_left.Rows[k][col_sta1];
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_sta2] = dt_perm_left.Rows[k][col_sta2];
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_side] = "LEFT";

                                poly_perm.AddVertexAt(idx, pt1, 0, 0, 0);
                                ++idx;

                            }

                            for (int k = dt_perm_right.Rows.Count - 1; k >= 0; --k)
                            {
                                Point2d pt1 = (Point2d)dt_perm_right.Rows[k][0];
                                dt_poly_perm.Rows.Add();

                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_x] = pt1.X;
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_y] = pt1.Y;
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_sta1] = dt_perm_right.Rows[k][col_sta1];
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_sta2] = dt_perm_right.Rows[k][col_sta2];
                                dt_poly_perm.Rows[dt_poly_perm.Rows.Count - 1][col_side] = "RIGHT";

                                poly_perm.AddVertexAt(idx, pt1, 0, 0, 0);
                                ++idx;

                            }

                            poly_perm.Elevation = 0;
                            poly_perm.Closed = true;
                            poly_perm.ColorIndex = 256;
                            poly_perm.Layer = perm_layer;
                            BTrecord.AppendEntity(poly_perm);
                            Trans1.AddNewlyCreatedDBObject(poly_perm, true);

                            dt_erase.Rows.Add();
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = dwg1;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_perm.ObjectId;
                            dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = perm_layer;
                        }
                        #endregion

                    }
                    Trans1.Commit();
                }
            }
            set_enable_true();
        }


        private void button_prop_perm_select_drafted_Click(object sender, EventArgs e)
        {

            if (checkBox_use_od.Checked == true)
            {
                if (comboBox_prop_perm_od_name.Text != "")
                {
                    if (comboBox_prop_perm_od_field.Text == "")
                    {
                        MessageBox.Show("no justification specified\r\noperation aborted");
                        return;
                    }
                }
                else
                {
                    if (comboBox_prop_perm_od_field.Text == "")
                    {
                        MessageBox.Show("no object data table specified\r\noperation aborted");
                        return;
                    }
                }
            }
            if (dt_corridor == null || dt_corridor.Rows.Count == 0)
            {
                MessageBox.Show("no tws data found\r\noperation aborted");
                return;
            }

            ObjectId[] Empty_array = null;
            System.Data.DataTable dt1 = new System.Data.DataTable();
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    this.WindowState = FormWindowState.Minimized;

                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForRead) as BlockTableRecord;

                        Autodesk.AutoCAD.EditorInput.PromptEntityResult rezultat_pp;
                        Autodesk.AutoCAD.EditorInput.PromptEntityOptions prompt_pp;
                        prompt_pp = new Autodesk.AutoCAD.EditorInput.PromptEntityOptions("\nSelect the proposed permanent easement:");
                        prompt_pp.SetRejectMessage("\nSelect a polyline!");
                        prompt_pp.AllowNone = true;
                        prompt_pp.AddAllowedClass(typeof(Autodesk.AutoCAD.DatabaseServices.Polyline), false);
                        rezultat_pp = ThisDrawing.Editor.GetEntity(prompt_pp);

                        if (rezultat_pp.Status != PromptStatus.OK)
                        {
                            set_enable_true();
                            this.WindowState = FormWindowState.Normal;

                            ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                            return;
                        }

                        Polyline poly1 = null;
                        try
                        {
                            poly1 = Trans1.GetObject(rezultat_pp.ObjectId, OpenMode.ForWrite) as Polyline;



                            dt1 = build_data_table_from_poly(poly1);
                            poly1.Erase();
                        }
                        catch (Autodesk.AutoCAD.Runtime.Exception)
                        {


                        }




                        Trans1.Commit();
                    }

                    if (dt1 != null && dt1.Rows.Count > 0 && comboBox_layer_proposed_perm.Text != "")
                    {
                        using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                        {
                            BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                            BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;




                            Polyline polyCL = new Polyline();
                            if (dt_cl != null && dt_cl.Rows.Count > 0)
                            {
                                for (int i = 0; i < dt_cl.Rows.Count; ++i)
                                {
                                    polyCL.AddVertexAt(i, (Point2d)dt_cl.Rows[i][0], 0, 0, 0);
                                }
                            }


                            Functions.Creaza_layer(comboBox_layer_proposed_perm.Text, 5, true);
                            List<ObjectId> lista_od_proposed_perm_object_id = new List<ObjectId>();
                            List<string> lista_od_proposed_perm_justif = new List<string>();



                            Polyline poly_prop_perm = new Polyline();
                            if (dt1 != null && dt1.Rows.Count > 0)
                            {
                                int index1 = 0;
                                Point2d p1_2d = (Point2d)dt1.Rows[0][0];
                                Point2d p2_2d = (Point2d)dt1.Rows[dt1.Rows.Count - 1 - index1][0];

                                Point3d pt1_3d = new Point3d(p1_2d.X, p1_2d.Y, 0);
                                Point3d pt2_3d = new Point3d(p2_2d.X, p2_2d.Y, 0);

                                double dist_start_end = Functions.get_2d_distance(pt1_3d, pt2_3d);
                                do
                                {
                                    if (dist_start_end < 0.1)
                                    {
                                        ++index1;
                                        p2_2d = (Point2d)dt1.Rows[dt1.Rows.Count - 1 - index1][0];
                                        pt2_3d = new Point3d(p2_2d.X, p2_2d.Y, 0);
                                    }
                                    dist_start_end = Functions.get_2d_distance(pt1_3d, pt2_3d);
                                } while (dist_start_end < 0.1);
                                int nr_row_dt1 = dt1.Rows.Count;
                                if (index1 > 0)
                                {
                                    for (int j = nr_row_dt1 - 1; j > nr_row_dt1 - 1 - index1; --j)
                                    {
                                        dt1.Rows[j].Delete();
                                    }
                                }

                                p1_2d = (Point2d)dt1.Rows[0][0];
                                p2_2d = (Point2d)dt1.Rows[dt1.Rows.Count - 1][0];

                                pt1_3d = new Point3d(p1_2d.X, p1_2d.Y, 0);
                                pt2_3d = new Point3d(p2_2d.X, p2_2d.Y, 0);


                                Point3d pt_on_cl1 = polyCL.GetClosestPointTo(pt1_3d, Vector3d.ZAxis, false);
                                Point3d pt_on_cl2 = polyCL.GetClosestPointTo(pt2_3d, Vector3d.ZAxis, false);

                                double sta1 = polyCL.GetDistAtPoint(pt_on_cl1);
                                double sta2 = polyCL.GetDistAtPoint(pt_on_cl2);

                                if (sta1 > sta2)
                                {
                                    using (System.Data.DataTable dt2 = dt1.Clone())
                                    {

                                        for (int k = dt1.Rows.Count - 1; k >= 0; k--)
                                        {
                                            dt2.Rows.Add();
                                            dt2.Rows[dt2.Rows.Count - 1].ItemArray = dt1.Rows[k].ItemArray;
                                        }
                                        dt1 = dt2.Copy();
                                    }

                                }


                                for (int i = 0; i < dt1.Rows.Count; ++i)
                                {
                                    poly_prop_perm.AddVertexAt(i, (Point2d)dt1.Rows[i][0], 0, 0, 0);
                                }
                            }

                            if (poly_prop_perm.Length > 0.01)
                            {
                                string justif1 = "xxx";
                                if (radioButton_justif_pp_custom.Checked == true)
                                {
                                    justif1 = textBox_proposed_perm_justification.Text;
                                }
                                else
                                {
                                    justif1 = comboBox_proposed_perm_justif.Text;
                                }

                                if (justif1.Replace(" ", "") == "")
                                {
                                    justif1 = "xxx";
                                }

                                poly_prop_perm.Layer = comboBox_layer_proposed_perm.Text;
                                poly_prop_perm.ColorIndex = 256;
                                poly_prop_perm.Linetype = "ByLayer";
                                poly_prop_perm.Closed = true;
                                BTrecord.AppendEntity(poly_prop_perm);
                                Trans1.AddNewlyCreatedDBObject(poly_prop_perm, true);



                                dt_erase.Rows.Add();
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_dwg] = ThisDrawing.Database.OriginalFileName;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_objid] = poly_prop_perm.ObjectId;
                                dt_erase.Rows[dt_erase.Rows.Count - 1][col_layer] = comboBox_layer_proposed_perm.Text;


                                using (DrawOrderTable DrawOrderTable1 = Trans1.GetObject(BTrecord.DrawOrderTableId, OpenMode.ForWrite) as DrawOrderTable)
                                {
                                    ObjectIdCollection col1 = new ObjectIdCollection();
                                    col1.Add(poly_prop_perm.ObjectId);
                                    DrawOrderTable1.MoveToTop(col1);
                                }

                                string handle1 = poly_prop_perm.ObjectId.Handle.Value.ToString();

                                if (dt_prop_perm == null)
                                {
                                    dt_prop_perm = get_dt_proposed_perm_structure();
                                }

                                if (dt_prop_perm.Rows.Count > 0)
                                {
                                    for (int i = dt_prop_perm.Rows.Count - 1; i >= 0; --i)
                                    {
                                        if (dt_prop_perm.Rows[i][col_pp_id] != DBNull.Value)
                                        {
                                            string handle2 = Convert.ToString(dt_prop_perm.Rows[i][col_pp_id]);
                                            if (handle1 == handle2)
                                            {
                                                dt_prop_perm.Rows[i].Delete();
                                            }
                                        }
                                    }
                                }

                                double start_pp = -1;
                                double end_pp = -1;
                                int idx_start = dt_prop_perm.Rows.Count;
                                int idx_end = dt1.Rows.Count;

                                for (int i = 0; i < dt1.Rows.Count; ++i)
                                {
                                    Point2d pt2d = (Point2d)dt1.Rows[i][0];
                                    double x1 = pt2d.X;
                                    double y1 = pt2d.Y;

                                    dt_prop_perm.Rows.Add();
                                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][col_pp_id] = handle1;
                                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][col_pp_x] = x1;
                                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][col_pp_y] = y1;
                                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][col_pp_justif] = justif1;

                                    Point3d point_on_poly1 = polyCL.GetClosestPointTo(new Point3d(x1, y1, polyCL.Elevation), Vector3d.ZAxis, false);
                                    double sta_pp1 = polyCL.GetDistAtPoint(point_on_poly1);
                                    if (i == 0)
                                    {
                                        start_pp = sta_pp1;
                                        end_pp = sta_pp1;
                                    }
                                    if (sta_pp1 < start_pp)
                                    {
                                        start_pp = sta_pp1;
                                    }
                                    if (sta_pp1 > end_pp)
                                    {
                                        end_pp = sta_pp1;
                                    }

                                    double x2 = point_on_poly1.X;
                                    double y2 = point_on_poly1.Y;
                                    double offset1 = Math.Pow(Math.Pow(x1 - x2, 2) + Math.Pow(y1 - y2, 2), 0.5);
                                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][col_pp_offset] = offset1;
                                }

                                lista_od_proposed_perm_object_id.Add(poly_prop_perm.ObjectId);
                                lista_od_proposed_perm_justif.Add(justif1);

                                for (int i = idx_start; i < idx_end; ++i)
                                {
                                    dt_prop_perm.Rows[i][col_pp_start] = start_pp;
                                    dt_prop_perm.Rows[i][col_pp_end] = end_pp;
                                }
                            }

                            attach_od_to_proposed_perm(lista_od_proposed_perm_object_id, lista_od_proposed_perm_justif);
                            attach_dt_perm_proposed_to_datagridview(dt_prop_perm);

                            Trans1.Commit();
                        }
                    }



                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
            this.WindowState = FormWindowState.Normal;


        }

        private void attach_od_to_proposed_perm(List<ObjectId> lista_od_object_id, List<string> lista_od_justif)
        {
            if (checkBox_use_od.Checked == false) return;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
            {
                if (lista_od_object_id.Count > 0)
                {
                    Autodesk.Gis.Map.ObjectData.Tables Tables1 = Autodesk.Gis.Map.HostMapApplicationServices.Application.ActiveProject.ODTables;
                    BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                    BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;



                    List<string> lista_field_name = Functions.get_object_data_table_field_names(Tables1, comboBox_prop_perm_od_name.Text);

                    if (lista_field_name == null || lista_field_name.Count == 0 || lista_field_name.Contains(comboBox_prop_perm_od_field.Text) == false)
                    {
                        MessageBox.Show("Issue with proposed permanent easement data table found in the drawing");
                        set_enable_true();
                        return;
                    }

                    List<Autodesk.Gis.Map.Constants.DataType> lista_types = Functions.get_object_data_table_data_types(Tables1, comboBox_prop_perm_od_name.Text);

                    for (int i = 0; i < lista_od_object_id.Count; ++i)
                    {

                        Polyline poly_pp = Trans1.GetObject(lista_od_object_id[i], OpenMode.ForWrite) as Polyline;

                        List<object> lista_val = new List<object>();

                        for (int k = 0; k < lista_field_name.Count; ++k)
                        {
                            if (lista_field_name[k] == comboBox_prop_perm_od_field.Text)
                            {
                                if (lista_types[k] == Autodesk.Gis.Map.Constants.DataType.Character)
                                {
                                    lista_val.Add(lista_od_justif[i]);
                                }
                                else
                                {
                                    MessageBox.Show("The Object Data field " + comboBox_prop_perm_od_field.Text + " is not defined as character field.\r\nPlease make sure you selected the correct field.\r\nOperation aborted");
                                    Entity ent1 = Trans1.GetObject(lista_od_object_id[i], OpenMode.ForWrite) as Entity;
                                    ent1.Erase();
                                    Trans1.Commit();
                                    set_enable_true();
                                    return;
                                }
                            }
                            else if (lista_field_name[k] == nume_field_handle)
                            {
                                lista_val.Add(lista_od_object_id[i].Handle.Value.ToString());
                            }
                            else
                            {
                                lista_val.Add(null);
                            }
                        }
                        Functions.Populate_object_data_table_from_objectid(lista_od_object_id[i], comboBox_prop_perm_od_name.Text, lista_val, lista_types);
                    }
                }
                Trans1.Commit();
            }

        }

        private System.Data.DataTable get_dt_proposed_perm_structure()
        {
            System.Data.DataTable dt1 = new System.Data.DataTable();
            dt1.Columns.Add(col_pp_id, typeof(string));
            dt1.Columns.Add(col_pp_x, typeof(double));
            dt1.Columns.Add(col_pp_y, typeof(double));
            dt1.Columns.Add(col_pp_offset, typeof(double));
            dt1.Columns.Add(col_pp_justif, typeof(string));
            dt1.Columns.Add(col_pp_start, typeof(double));
            dt1.Columns.Add(col_pp_end, typeof(double));



            return dt1;
        }


        private void attach_dt_perm_proposed_to_datagridview(System.Data.DataTable dt1)
        {
            if (dt1 != null && dt1.Rows.Count > 0)
            {
                dataGridView_proposed_permanent_easement.DataSource = dt1;
                dataGridView_proposed_permanent_easement.Columns[col_pp_id].Width = 100;
                dataGridView_proposed_permanent_easement.Columns[col_pp_x].Width = 100;
                dataGridView_proposed_permanent_easement.Columns[col_pp_y].Width = 100;
                dataGridView_proposed_permanent_easement.Columns[col_pp_offset].Width = 100;

                dataGridView_proposed_permanent_easement.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_proposed_permanent_easement.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
                dataGridView_proposed_permanent_easement.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                Padding newpadding = new Padding(4, 0, 0, 0);
                dataGridView_proposed_permanent_easement.ColumnHeadersDefaultCellStyle.Padding = newpadding;
                dataGridView_proposed_permanent_easement.RowHeadersDefaultCellStyle.BackColor = Color.FromArgb(37, 37, 38);
                dataGridView_proposed_permanent_easement.DefaultCellStyle.BackColor = Color.FromArgb(51, 51, 55);
                dataGridView_proposed_permanent_easement.DefaultCellStyle.ForeColor = Color.White;
                dataGridView_proposed_permanent_easement.EnableHeadersVisualStyles = false;
            }
            else
            {
                dataGridView_proposed_permanent_easement.DataSource = null;
            }
        }

        private void format_and_transfer_dt_proposed_perm_to_excel(Worksheet W44)
        {
            if (W44 != null && dt_prop_perm != null && dt_prop_perm.Rows.Count > 0)
            {
                W44.Range["A:D"].ColumnWidth = 28;
                W44.Range["E:G"].ColumnWidth = 33;
                W44.Range["A1:G1"].VerticalAlignment = XlVAlign.xlVAlignCenter;
                W44.Range["A1:G1"].HorizontalAlignment = XlHAlign.xlHAlignCenter;
                W44.Range["A1:G30000"].ClearContents();
                W44.Range["A1:G30000"].ClearFormats();
                W44.Range["A2:G" + Convert.ToString(1 + dt_prop_perm.Rows.Count)].HorizontalAlignment = XlHAlign.xlHAlignLeft;
                W44.Range["A2:G" + Convert.ToString(1 + dt_prop_perm.Rows.Count)].VerticalAlignment = XlVAlign.xlVAlignCenter;
                Range range1 = W44.Range["A1:G1"];
                Functions.Color_border_range_inside(range1, 41); //blue
                range1.Font.ColorIndex = 2;
                range1.Font.Size = 11;
                range1.Font.Bold = true;

                Functions.Transfer_datatable_to_excel_spreadsheet(W44, dt_prop_perm, 1, true);

                range1 = W44.Range["A2:G" + Convert.ToString(dt_prop_perm.Rows.Count + 1)];
                Functions.Color_border_range_inside(range1, 44); //orange
                range1.Font.ColorIndex = 1;//black
                range1.Font.Size = 11;
                range1.Font.Bold = true;
            }
            else
            {
                W44.Range["A1:G30000"].ClearContents();
                W44.Range["A1:G30000"].ClearFormats();
            }
        }


        private void build_dt_proposed_perm_easement_from_config_excel(Worksheet W1)
        {

            dt_prop_perm = get_dt_proposed_perm_structure();

            Range range1 = W1.Range["A1:G30000"];
            object[,] values1 = new object[30000, 7];
            values1 = range1.Value2;

            for (int i = 2; i <= 30000; ++i)
            {
                object val1 = values1[i, 1];
                object val2 = values1[i, 2];
                object val3 = values1[i, 3];
                object val4 = values1[i, 4];
                object val5 = values1[i, 5];
                object val6 = values1[i, 6];
                object val7 = values1[i, 7];

                if (val1 != null && val2 != null && val3 != null && val4 != null)
                {
                    dt_prop_perm.Rows.Add();
                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][0] = Convert.ToString(val1);
                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][1] = Convert.ToDouble(val2);
                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][2] = Convert.ToDouble(val3);
                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][3] = Convert.ToDouble(val4);
                    if (val5 != null) dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][4] = Convert.ToString(val5);
                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][5] = Convert.ToDouble(val6);
                    dt_prop_perm.Rows[dt_prop_perm.Rows.Count - 1][6] = Convert.ToDouble(val7);
                }
                else
                {
                    i = values1.Length + 1;
                }
            }
        }


        private void radioButton_justif_pp_custom_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton_justif_pp_custom.Checked == true)
            {
                textBox_proposed_perm_justification.Visible = true;

            }
            else
            {
                textBox_proposed_perm_justification.Visible = false;

            }
        }


        private void comboBox_prop_perm_od_name_DropDown(object sender, EventArgs e)
        {
            try
            {
                Functions.load_object_data_table_name_to_combobox(comboBox_prop_perm_od_name);
                if (comboBox_prop_perm_od_name.Items.Count == 1)
                {
                    comboBox_prop_perm_od_field.Items.Clear();
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void comboBox_prop_perm_od_name_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                Functions.load_object_data_fieds_to_combobox(comboBox_prop_perm_od_name, comboBox_prop_perm_od_field);
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void button_proposed_perm_add_preset_Click(object sender, EventArgs e)
        {

            set_enable_false();
            string preset1 = "";
            if (InputBox("Add a new justification preset", "New preset:", ref preset1) == DialogResult.OK)
            {
                if (preset1.Length > 0)
                {
                    comboBox_proposed_perm_justif.Items.Add(preset1);
                }
            }
            set_enable_true();

        }

        private void button_zoom_to_proposed_perm_Click(object sender, EventArgs e)
        {
            try
            {
                if (dt_prop_perm != null && dt_prop_perm.Rows.Count > 0)
                {
                    set_enable_false();
                    int row_idx = dataGridView_proposed_permanent_easement.SelectedCells[0].RowIndex;
                    if (row_idx >= 0)
                    {
                        string handle1 = Convert.ToString(dataGridView_proposed_permanent_easement.Rows[row_idx].Cells[col_pp_id].Value);

                        Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
                        Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
                        using (DocumentLock lock1 = ThisDrawing.LockDocument())
                        {
                            using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                            {
                                ObjectId id1 = Functions.GetObjectId(ThisDrawing.Database, handle1);
                                if (id1 != ObjectId.Null)
                                {
                                    Functions.zoom_to_object(id1);
                                }
                            }
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            set_enable_true();
        }

        private void button_highlight_prop_perm_Click(object sender, EventArgs e)
        {

            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;

            if (dataGridView_atws_data.Rows.Count > 0)
            {
                set_enable_false();

                try
                {
                    Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
                    Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
                    using (Autodesk.AutoCAD.ApplicationServices.DocumentLock Lock1 = ThisDrawing.LockDocument())
                    {
                        using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                        {
                            Autodesk.AutoCAD.DatabaseServices.BlockTable BlockTable_data1 = (BlockTable)ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead);
                            Autodesk.AutoCAD.DatabaseServices.BlockTableRecord BTrecord = (BlockTableRecord)Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, Autodesk.AutoCAD.DatabaseServices.OpenMode.ForRead);

                            bool ask_for_selection = false;
                            Autodesk.AutoCAD.EditorInput.PromptSelectionResult Rezultat_object = (Autodesk.AutoCAD.EditorInput.PromptSelectionResult)Editor1.SelectImplied();

                            if (Rezultat_object.Status == PromptStatus.OK)
                            {
                                if (Rezultat_object.Value.Count == 0)
                                {
                                    ask_for_selection = true;
                                }
                                if (Rezultat_object.Value.Count > 1)
                                {
                                    MessageBox.Show("There is more than one object selected," + "\r\n" + "the first object in selection will be the one that will be current in table");
                                    ask_for_selection = false;
                                }
                            }
                            else
                            {
                                ask_for_selection = true;
                            }


                            if (ask_for_selection == true)
                            {
                                this.WindowState = FormWindowState.Minimized;
                                Autodesk.AutoCAD.EditorInput.PromptSelectionOptions Prompt_object = new Autodesk.AutoCAD.EditorInput.PromptSelectionOptions();
                                Prompt_object.MessageForAdding = "\nSelect a proposed permanent easement";
                                Prompt_object.SingleOnly = true;
                                Rezultat_object = Editor1.GetSelection(Prompt_object);
                            }


                            if (Rezultat_object.Status != PromptStatus.OK)
                            {
                                this.WindowState = FormWindowState.Normal;
                                ThisDrawing.Editor.WriteMessage("\n" + "Command:");
                                set_enable_true();
                                return;
                            }
                            this.WindowState = FormWindowState.Normal;


                            Entity Ent1 = (Entity)Trans1.GetObject(Rezultat_object.Value[0].ObjectId, OpenMode.ForRead);
                            string handle1 = Ent1.ObjectId.Handle.Value.ToString();

                            for (int i = 0; i < dataGridView_proposed_permanent_easement.Rows.Count; ++i)
                            {
                                string handle2 = Convert.ToString(dataGridView_proposed_permanent_easement.Rows[i].Cells[col_pp_id].Value);
                                if (handle1 == handle2)
                                {
                                    dataGridView_proposed_permanent_easement.CurrentCell = dataGridView_proposed_permanent_easement.Rows[i].Cells[0];
                                    i = dataGridView_proposed_permanent_easement.Rows.Count;
                                }
                            }


                            Trans1.Commit();
                        }
                    }
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }

            set_enable_true();
        }

        private void button_prop_perm_update_justification_Click(object sender, EventArgs e)
        {
            if (dt_prop_perm == null || dt_prop_perm.Rows.Count == 0)
            {
                MessageBox.Show("no permanent easement data\r\noperation abborted");
                return;
            }

            ObjectId[] Empty_array = null;
            Autodesk.AutoCAD.ApplicationServices.Document ThisDrawing = Autodesk.AutoCAD.ApplicationServices.Application.DocumentManager.MdiActiveDocument;
            Autodesk.AutoCAD.EditorInput.Editor Editor1 = ThisDrawing.Editor;
            Matrix3d curent_ucs_matrix = Editor1.CurrentUserCoordinateSystem;
            Autodesk.AutoCAD.Internal.Utils.SetFocusToDwgView();
            try
            {
                set_enable_false();
                using (DocumentLock lock1 = ThisDrawing.LockDocument())
                {
                    using (Autodesk.AutoCAD.DatabaseServices.Transaction Trans1 = ThisDrawing.TransactionManager.StartTransaction())
                    {
                        BlockTable BlockTable1 = ThisDrawing.Database.BlockTableId.GetObject(OpenMode.ForRead) as BlockTable;
                        BlockTableRecord BTrecord = Trans1.GetObject(ThisDrawing.Database.CurrentSpaceId, OpenMode.ForWrite) as BlockTableRecord;

                        List<ObjectId> lista_od_pp_object_id = new List<ObjectId>();
                        List<string> lista_od_pp_justif = new List<string>();



                        for (int i = 0; i < dt_prop_perm.Rows.Count; ++i)
                        {
                            if (dt_prop_perm.Rows[i][col_pp_id] != DBNull.Value && dt_prop_perm.Rows[i][col_pp_justif] != DBNull.Value)
                            {
                                string handle1 = Convert.ToString(dt_prop_perm.Rows[i][col_pp_id]);
                                string justif1 = Convert.ToString(dt_prop_perm.Rows[i][col_pp_justif]);

                                ObjectId id1 = Functions.GetObjectId(ThisDrawing.Database, handle1);

                                if (id1 != ObjectId.Null)
                                {
                                    lista_od_pp_justif.Add(justif1);
                                    lista_od_pp_object_id.Add(id1);
                                }
                            }
                        }

                        attach_od_to_proposed_perm(lista_od_pp_object_id, lista_od_pp_justif);

                        Trans1.Commit();
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Editor1.SetImpliedSelection(Empty_array);
            Editor1.WriteMessage("\nCommand:");
            set_enable_true();
        }

        private void button_pp_out_Click(object sender, EventArgs e)
        {

            if (dt_prop_perm == null || dt_prop_perm.Rows.Count == 0)
            {
                MessageBox.Show("no proposed permanent data\r\noperation abborted");
                return;
            }

            set_enable_false();
            try
            {
                if (dt_prop_perm != null && dt_prop_perm.Rows.Count > 0)
                {
                    Worksheet W1 = Functions.get_worksheet_W1(true, proposed_permanent_tab);
                    format_and_transfer_dt_proposed_perm_to_excel(W1);
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            set_enable_true();
        }

        private void button_pp_in_Click(object sender, EventArgs e)
        {
            try
            {

                Microsoft.Office.Interop.Excel.Application Excel1 = null;
                bool is_found = false;
                try
                {
                    Excel1 = (Microsoft.Office.Interop.Excel.Application)System.Runtime.InteropServices.Marshal.GetActiveObject("Excel.Application");

                    if (Excel1 != null)
                    {

                        foreach (Workbook workbook1 in Excel1.Workbooks)
                        {
                            if (is_found == false)
                            {
                                foreach (Worksheet W1 in workbook1.Worksheets)
                                {
                                    if (is_found == false && W1.Name == proposed_permanent_tab)
                                    {
                                        is_found = true;
                                        build_dt_proposed_perm_easement_from_config_excel(W1);
                                        attach_dt_perm_proposed_to_datagridview(dt_prop_perm);
                                    }
                                }
                            }

                        }
                    }



                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("no excel found");

                }


            }
            catch (System.Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
    }
}

